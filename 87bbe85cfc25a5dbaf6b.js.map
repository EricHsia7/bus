{"version":3,"file":"87bbe85cfc25a5dbaf6b.js","mappings":"++CAuRO,SAASA,EAAgBC,GAC9B,MAAO,GAAPC,OAAUD,EAAQE,KAAKC,KAAK,KAAGF,OAAGD,EAAQI,SAASD,KAAK,KAAGF,OAAGD,EAAQK,KAAKF,KAAK,MAAIF,OAClFD,EAAQM,aAAaC,MAAK,SAAUC,EAAGC,GACrC,OAAOD,EAAIC,CACb,IAAGC,OAAS,EACRV,EAAQM,aAAaH,KAAK,KAAO,IACjC,IAAEF,OAEND,EAAQW,MAAMD,OAAS,EACnBV,EAAQW,MACLJ,MAAK,SAAUC,EAAGC,GACjB,OAAOD,EAAIC,CACb,IACCN,KAAK,KAAO,IACf,IAAEF,OAEND,EAAQY,aAAaF,OAAS,EAC1BV,EAAQY,aACLL,MAAK,SAAUC,EAAGC,GACjB,OAAOD,EAAIC,CACb,IACCN,KAAK,KAAO,IACf,IAAEF,OAEND,EAAQa,UAAUH,OAAS,EACvBV,EAAQa,UACLN,MAAK,SAAUC,EAAGC,GACjB,OAAOD,EAAIC,CACb,IACCN,KAAK,KAAO,IACf,IAAEF,OACLD,EAAQc,YAAYJ,OAAS,EAAIV,EAAQc,YAAYX,KAAK,KAAO,IAAM,IAAEF,OAAGD,EAAQe,UAAUL,OAAS,EAAI,KAAOV,EAAQe,UAAUZ,KAAK,KAAO,IAAM,GAC3J,CA8DO,SAASa,EAA2BC,GACzC,IAE+BC,EAF3BC,EAAS,GACTC,EAAmB,CAAC,EAAEC,EAAAC,EACJL,GAAS,IAA/B,IAAAI,EAAAE,MAAAL,EAAAG,EAAAG,KAAAC,MAAiC,KAAtBzB,EAAOkB,EAAAQ,MAChB,IAAK,IAAMC,KAAO3B,EACXoB,EAAiBQ,eAAeD,KACnCP,EAAiBO,GAAO,GAEtB3B,EAAQ2B,GAAKjB,OAAS,IACxBU,EAAiBO,GAAOP,EAAiBO,GAAO,EAGtD,CAAC,OAAAE,GAAAR,EAAAS,EAAAD,EAAA,SAAAR,EAAAU,GAAA,CACD,IAAIC,EAAmBC,OAAOC,QAAQd,GACnCe,KAAI,SAACC,GACJ,MAAO,CAAET,IAAKS,EAAS,GAAIV,MAAOU,EAAS,GAC7C,IACCC,QAAO,SAACP,GACP,OAAOA,EAAEJ,QAAUT,EAAUP,MAC/B,IACCH,MAAK,SAAUC,EAAGC,GACjB,OAAOD,EAAEkB,MAAQjB,EAAEiB,KACrB,IACF,GAAIM,EAAiBtB,OAAS,EAAG,KACc4B,EADdC,EAAAjB,EACFU,GAAgB,IAA7C,IAAAO,EAAAhB,MAAAe,EAAAC,EAAAf,KAAAC,MAA+C,KAEde,EAFtBC,EAAcH,EAAAZ,MACnBgB,EAAa,GAAGC,EAAArB,EACEL,GAAS,IAA/B,IAAA0B,EAAApB,MAAAiB,EAAAG,EAAAnB,KAAAC,MAAiC,KAAtBzB,EAAOwC,EAAAd,MAChBgB,EAAWE,KAAK5C,EAAQyC,EAAed,KAAKxB,KAAK,IACnD,CAAC,OAAA0B,GAAAc,EAAAb,EAAAD,EAAA,SAAAc,EAAAZ,GAAA,EACGc,EAAAA,EAAAA,IAAkBH,IACpBvB,EAAOyB,KAAK,CAAEF,WAAYA,EAAYI,IAAKC,KAAKC,IAAGC,MAARF,KAAIG,EAAQR,EAAWP,KAAI,SAACL,GAAC,OAAKA,EAAEpB,MAAM,OAEzF,CAAC,OAAAmB,GAAAU,EAAAT,EAAAD,EAAA,SAAAU,EAAAR,GAAA,CACH,CAEA,GAAIZ,EAAOT,OAAS,EAIlB,OAHAS,EAASA,EAAOZ,MAAK,SAAUC,EAAGC,GAChC,OAAOD,EAAEsC,IAAMrC,EAAEqC,GACnB,KACc,GAAGJ,WAEjB,IAAMS,EAAkBlC,EAAUP,OAClC,OAAO0C,EAAAA,EAAAA,GAAqBD,EAEhC,C,sgCClYO,SAASN,EAAkBQ,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAI3C,OAAQ4C,IAC9B,IAAK,IAAIC,EAAID,EAAI,EAAGC,EAAIF,EAAI3C,OAAQ6C,IAClC,GAAIF,EAAIC,KAAOD,EAAIE,GACjB,OAAO,EAIb,OAAO,CACT,CASO,SAASC,EAAgBC,EAAeC,GAC7C,IAAIvC,EAAS,GACb,GAAIsC,EAAO/C,QAAUgD,EAAOhD,OAAQ,KACTiD,EADSC,EAAAtC,EACfmC,GAAM,IAAzB,IAAAG,EAAArC,MAAAoC,EAAAC,EAAApC,KAAAC,MAA2B,KAAhBoC,EAAIF,EAAAjC,MACTgC,EAAOI,QAAQD,IAAS,GAC1B1C,EAAOyB,KAAKiB,EAEhB,CAAC,OAAAhC,GAAA+B,EAAA9B,EAAAD,EAAA,SAAA+B,EAAA7B,GAAA,CACH,KAAO,KACoBgC,EADpBC,EAAA1C,EACcoC,GAAM,IAAzB,IAAAM,EAAAzC,MAAAwC,EAAAC,EAAAxC,KAAAC,MAA2B,KAAhBoC,EAAIE,EAAArC,MACT+B,EAAOK,QAAQD,IAAS,GAC1B1C,EAAOyB,KAAKiB,EAEhB,CAAC,OAAAhC,GAAAmC,EAAAlC,EAAAD,EAAA,SAAAmC,EAAAjC,GAAA,CACH,CACA,OAAOZ,CACT,C,2CCjEO,SAAS8C,EAA2BC,EAAcC,EAAcC,EAAcC,GACnF,IACMC,EAAQF,EAAOrB,KAAKwB,GAAM,IAAOL,EAAOnB,KAAKwB,GAAM,IACnDC,EAAQH,EAAOtB,KAAKwB,GAAM,IAAOJ,EAAOpB,KAAKwB,GAAM,IACnD/D,EAAIuC,KAAK0B,IAAIH,EAAO,GAAKvB,KAAK0B,IAAIH,EAAO,GAAKvB,KAAK2B,IAAKR,EAAOnB,KAAKwB,GAAM,KAAOxB,KAAK2B,IAAKN,EAAOrB,KAAKwB,GAAM,KAAOxB,KAAK0B,IAAID,EAAO,GAAKzB,KAAK0B,IAAID,EAAO,GAG/J,OAAW,KAND,UAIA,EAAIzB,KAAK4B,MAAM5B,KAAK6B,KAAKpE,GAAIuC,KAAK6B,KAAK,EAAIpE,KAGvD,CAEO,SAASqE,EAAaC,GAI3B,IAHA,IAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC9DzB,EAAI,EAEDwB,GAAiB,MAAQxB,EAAIyB,EAAMrE,OAAS,GACjDoE,GAAiB,KACjBxB,IAGF,MAAO,GAAPrD,OAAU6E,EAAcE,QAAQ,GAAE,KAAA/E,OAAI8E,EAAMzB,GAC9C,CAEO,SAAS2B,EAAuBC,GAErC,IADA,IAAI/D,EAAS,GACN+D,EAAS,GAAG,CACjB,IAAIC,GAAaD,EAAS,GAAK,GAE/B/D,EADaiE,OAAOC,aAAaF,EAAY,IAC3BhE,EAClB+D,EAASnC,KAAKuC,OAAOJ,EAAS,GAAK,GACrC,CACA,OAAO/D,CACT,C,oDC/BO,SAASoE,EAAaC,EAAcC,EAAgBC,EAAcC,GACvE,IACMC,GAD4BL,EAAaM,SAAWN,EAAaM,OAASC,SAASC,cAAc,YAChFC,WAAW,MAC5BC,EAAe,GAAHhG,OAAMwF,EAAM,KAAAxF,OAAIyF,EAAI,KAAAzF,OAAI0F,GAE1C,OADAC,EAAQK,KAAOA,EACRL,EAAQM,YAAYV,GAAMW,KACnC,CASO,SAASC,EAAgBC,EAA+BC,EAAWC,EAAWJ,EAAeK,EAAgBC,EAA+BC,GAG/ID,EADoB,iBAAXA,EACA,CAAEE,GAAIF,EAAQG,GAAIH,EAAQI,GAAIJ,EAAQK,GAAIL,GAG1C,CACPE,GAAIF,EAAOE,IAAM,EACjBC,GAAIH,EAAOG,IAAM,EACjBC,GAAIJ,EAAOI,IAAM,EACjBC,GAAIL,EAAOK,IAAM,GAKrBT,EAAIU,YAEJV,EAAIW,OAAOV,EAAIG,EAAOE,GAAIJ,GAE1BF,EAAIY,OAAOX,EAAIH,EAAQM,EAAOG,GAAIL,GAClCF,EAAIa,iBAAiBZ,EAAIH,EAAOI,EAAGD,EAAIH,EAAOI,EAAIE,EAAOG,IAEzDP,EAAIY,OAAOX,EAAIH,EAAOI,EAAIC,EAASC,EAAOI,IAC1CR,EAAIa,iBAAiBZ,EAAIH,EAAOI,EAAIC,EAAQF,EAAIH,EAAQM,EAAOI,GAAIN,EAAIC,GAEvEH,EAAIY,OAAOX,EAAIG,EAAOK,GAAIP,EAAIC,GAC9BH,EAAIa,iBAAiBZ,EAAGC,EAAIC,EAAQF,EAAGC,EAAIC,EAASC,EAAOK,IAE3DT,EAAIY,OAAOX,EAAGC,EAAIE,EAAOE,IACzBN,EAAIa,iBAAiBZ,EAAGC,EAAGD,EAAIG,EAAOE,GAAIJ,GAE1CF,EAAIc,YAEJd,EAAIe,UAAYV,EAChBL,EAAIK,MACN,C,0HClDO,IAAMW,EAAMC,EAAQ,MAEpB,SAASC,EAAc/G,EAAQC,GACpC,SAAS+G,EAAYC,GACnB,OAAOC,KAAKC,UAAU,CAAE7F,EAAG2F,GAC7B,CACA,IAAMG,EAAKJ,EAAYhH,GACjBqH,EAAKL,EAAY/G,GAEjBqH,EAAmBF,EAAGlH,OACtBqH,EAAmBF,EAAGnH,OAC5B,GAAIoH,IAAaC,EAAU,CACzB,GAAID,EAJiB,IAIIC,EAJJ,GAIuB,CAK1C,IAJA,IAAMC,EAAiBX,EAAIO,GACrBK,EAAiBZ,EAAIQ,GAEvBK,GAAiB,EACZ5E,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAG1B,GAFoB0E,EAAOG,OAAO7E,KACd2E,EAAOE,OAAO7E,GAClC,CAGE4E,GAAQ,EACR,KACF,CACF,CACA,OAAOA,CACT,CACE,OAAIN,IAAOC,CAMf,CACE,OAAO,CAEX,CAEO,SAASO,IAId,IAJ8D,IACxDC,EAAe,mEACjBlH,EAAS,GAAHlB,OAFqCqI,UAAA5H,OAAA,QAAA6H,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAE5B,KAEbhF,EAAI,EAAGA,EADO,GACKA,IAAK,CAC/B,IAAMkF,EAAezF,KAAK0F,MAAsBJ,GAAhBtF,KAAK2F,UACrCvH,GAAUkH,EAAaM,UAAUH,EAAcA,EAAe,EAChE,CACA,OAAOrH,CACT,CAEO,SAASyH,EAAoBC,GAIlC,SAHa,IAAIC,MAAOC,UACDF,GAAU7D,QAAQ,GAAK6D,GACxBG,SAAS,GAEjC,CAEO,SAASC,EAAYC,GAA4E,IAA3DC,EAAYb,UAAA5H,OAAA,QAAA6H,IAAAD,UAAA,GAAAA,UAAA,GAAG,mBAAoBc,EAAgBd,UAAA5H,OAAA,EAAA4H,UAAA,QAAAC,EACxFc,EAAO,IAAIC,KAAK,CAACJ,GAAU,CAAEC,KAAMA,IACnCI,EAAU,IAAIC,KAAK,CAACH,GAAOD,EAAU,CAAED,KAAMA,IACnD,GAAIM,UAAUC,UAAYD,UAAUC,SAAS,CAAEC,MAAO,CAACJ,KACrDE,UACGG,MAAM,CACLD,MAAO,CAACJ,KACR,OACK,SAACM,GAAW,QAChB,CACL,IAAMC,EAAUC,IAAIC,gBAAgBX,GAC9BY,EAAenE,SAASC,cAAc,KAC5CkE,EAAaC,KAAOJ,EACpBG,EAAaE,SAAWf,EACxBtD,SAASsE,KAAKC,YAAYJ,GAC1BA,EAAaK,QACbL,EAAaM,SACbC,YAAW,WACTT,IAAIU,gBAAgBX,EACtB,GAAG,IACL,CACF,CAEO,SAASY,IACd,OAAOC,OAAOC,WAAW,8BAA8BC,OACzD,CAEO,SAASC,IACd,UAAI,iBAAkBH,UAAUlB,UAAUsB,eAO5C,CAEO,SAASC,EAAgB1E,GAC9B,GAAiB,kBAANA,EACT,OAAIA,EACK,OAEA,OAGb,CAEO,SAAS2E,EAAWC,GACzB,IAEE,OADA,IAAInB,IAAImB,IACD,CACT,CAAE,MAAOC,GACP,OAAO,CACT,CACF,C,ujCC7GO,SAAS/H,EAAqBgI,GAEnC,IADA,IAAIjK,EAAS,GACJmC,EAAI,EAAGA,EAAI8H,EAAU9H,IAC5BnC,EAAOyB,KAAK,KAAD3C,QAAMgF,EAAAA,EAAAA,IAAuB3B,EAAI,KAE9C,OAAOnC,CACT,CAEO,SAASkK,EAAwBC,GACtC,IAoDqC3H,EApDjCxC,EAAS,GAaPoK,EAAa,CACjB,CACEC,OAdkB,CAAC,EAAG,GAetBC,MAAO,MAET,CACED,OAhBgB,CAAC,EAAG,GAiBpBC,MAAO,KAET,CACED,OAnBe,CAAC,EAAG,GAoBnBC,MAAO,KAET,CACED,OArBgB,CAAC,GAAI,GAsBrBC,MAAO,KAET,CACED,OA1Be,EAAE,EAAG,GA2BpBC,MAAO,KAET,CACED,OA3BoB,CAACzI,KAAK6B,KAAK,GAAK,EAAG7B,KAAK6B,KAAK,GAAK,GA4BtD6G,MAAO,MAET,CACED,OA9BoB,CAACzI,KAAK6B,KAAK,GAAK,GAAI7B,KAAK6B,KAAK,GAAK,GA+BvD6G,MAAO,MAET,CACED,OAjCoB,EAAEzI,KAAK6B,KAAK,GAAK,GAAI7B,KAAK6B,KAAK,GAAK,GAkCxD6G,MAAO,MAET,CACED,OApCoB,EAAEzI,KAAK6B,KAAK,GAAK,EAAG7B,KAAK6B,KAAK,GAAK,GAqCvD6G,MAAO,OAET7H,EAAAtC,EAEsBgK,GAAa,IAArC,IAAA1H,EAAArC,MAAAoC,EAAAC,EAAApC,KAAAC,MAAuC,KAGPsC,EAHrB2H,EAAS/H,EAAAjC,MACd4E,EAAI,EACJC,EAAI,EAAEvC,EAAA1C,EACWoK,GAAS,IAA9B,IAAA1H,EAAAzC,MAAAwC,EAAAC,EAAAxC,KAAAC,MAAgC,KAArB+J,EAAMzH,EAAArC,MACf4E,GAAKkF,EAAO,GACZjF,GAAKiF,EAAO,EACd,CAAC,OAAA3J,GAAAmC,EAAAlC,EAAAD,EAAA,SAAAmC,EAAAjC,GAAA,CACD,IAEkC4J,EAF5BC,GAAaC,EAAAA,EAAAA,IAAoB,CAACvF,EAAGC,IACvCuF,EAAU,GAAGC,EAAAzK,EACOiK,GAAU,IAAlC,IAAAQ,EAAAxK,MAAAoK,EAAAI,EAAAvK,KAAAC,MAAoC,KAAzBV,EAAS4K,EAAAjK,MACZsK,EAAajL,EAAUyK,OAAO,GAAKI,EAAW,GAAK7K,EAAUyK,OAAO,GAAKI,EAAW,GAC1FE,EAAQlJ,KAAK,CAAE6I,MAAO1K,EAAU0K,MAAOO,WAAYA,GACrD,CAAC,OAAAnK,GAAAkK,EAAAjK,EAAAD,EAAA,SAAAkK,EAAAhK,GAAA,CAID,IAAMkK,GAHNH,EAAUA,EAAQvL,MAAK,SAAUC,EAAGC,GAClC,OAAOA,EAAEuL,WAAaxL,EAAEwL,UAC1B,KAC0B,GAC1B7K,EAAOyB,KAAKqJ,EAAUR,MACxB,CAAC,OAAA5J,GAAA+B,EAAA9B,EAAAD,EAAA,SAAA+B,EAAA7B,GAAA,CACD,OAAOZ,CACT,C","sources":["webpack://bus/./src/tools/address.ts","webpack://bus/./src/tools/array.ts","webpack://bus/./src/tools/convert.ts","webpack://bus/./src/tools/graphic.ts","webpack://bus/./src/tools/index.ts","webpack://bus/./src/tools/labels.ts"],"sourcesContent":["import { generateLetterLabels } from './labels';\nimport { areItemsDifferent } from './array';\n\ninterface AddressPart {\n  suffixes?: string;\n  key: keyof ParsedAddress;\n  process: (e: string[] | null) => string[] | number[] | null;\n  type: number;\n}\n\ninterface ParsedAddress {\n  city: string[];\n  district: string[];\n  area: string[];\n  road: string[];\n  road_section: number[];\n  alley: number[];\n  alley_branch: number[];\n  doorplate: number[];\n  floornumber: string[];\n  exit: string[];\n  direction: string[];\n  [key: string]: string[] | number[] | null;\n}\n\ninterface FeatureCounts {\n  [key: string]: { count: number; chars: string; index: number };\n}\n\nexport function mergeAddressesIntoOne(addresses: Array<string>): ParsedAddress | string {\n  const parts: Array<AddressPart> = [\n    {\n      suffixes: '市',\n      key: 'city',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '區',\n      key: 'district',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '鄉鎮村里',\n      key: 'area',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '路街道',\n      key: 'road',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.replaceAll(/[\\(\\)\\（\\）]/gim, '').trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '段',\n      key: 'road_section',\n      process: function (e) {\n        var toNumber = function (char) {\n          switch (char) {\n            case '一':\n              return 1;\n              break;\n            case '二':\n              return 2;\n              break;\n            case '三':\n              return 3;\n              break;\n            case '四':\n              return 4;\n              break;\n            case '五':\n              return 5;\n              break;\n            case '六':\n              return 6;\n              break;\n            case '七':\n              return 7;\n              break;\n            case '八':\n              return 8;\n              break;\n            case '九':\n              return 9;\n              break;\n            case '十':\n              return 10;\n              break;\n          }\n          if (!isNaN(parseInt(char))) {\n            return parseInt(char);\n          }\n          return 0;\n        };\n        var len = String(e).length;\n        var numbers = [];\n        for (let i = 0; i < len; i++) {\n          var p = toNumber(String(e).charAt(i));\n          if (p === 10) {\n            if (numbers.length > 0) {\n              numbers = [numbers.reduce((a, b) => a + b, 0) * 10];\n            }\n          } else {\n            numbers = [numbers.reduce((a, b) => a + b, 0) + p];\n          }\n        }\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '巷',\n      key: 'alley',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[巷]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '弄',\n      key: 'alley_branch',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[弄]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '號',\n      key: 'doorplate',\n      process: function (e) {\n        var numbers = String(e).match(/[0-9]+/gim);\n        numbers =\n          numbers?.map((n) => {\n            if (n === null) {\n              return null;\n            } else {\n              return parseInt(n);\n            }\n          }) || null;\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '樓',\n      key: 'floornumber',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      key: 'exit',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 2\n    },\n    {\n      key: 'direction',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim().replace(/[往向]/gim, '');\n          });\n        }\n      },\n      type: 1\n    }\n  ];\n\n  function parseAddress(address: string): object {\n    function regex(suffixes, type) {\n      if (type === 0) {\n        return new RegExp(`([^市區鄉鎮村里路段街道巷弄號樓與]+[${suffixes}])`, 'gmi');\n      }\n      if (type === 1) {\n        return new RegExp(`([往向]+[東南西北])`, 'gmi');\n      }\n      if (type === 2) {\n        return new RegExp(`([0-9]+[號]出口)`, 'gmi');\n      }\n    }\n    var result = {};\n    for (var part of parts) {\n      var r = regex(part?.suffixes, part.type);\n      result[part.key] = part.process(String(address).match(r));\n    }\n    return result;\n  }\n\n  function mergeAddresses(addresses: Array<string>): object {\n    var result = {};\n    for (var address of addresses) {\n      var parsedAddress = parseAddress(address);\n      for (var part of parts) {\n        if (!result.hasOwnProperty(part.key)) {\n          result[part.key] = [];\n        }\n        result[part.key] = result[part.key].concat(parsedAddress[part.key]);\n      }\n    }\n    for (var key in result) {\n      result[key] = Array.from(new Set(result[key]))\n        .filter((e) => (e ? true : false))\n        .sort(function (a, b) {\n          if (typeof a === 'number' && typeof b === 'number') {\n            return a - b;\n          } else {\n            return String(a).charCodeAt(0) - String(b).charCodeAt(0);\n          }\n        });\n    }\n    return result;\n  }\n  return mergeAddresses(addresses);\n}\n\nexport function addressToString(address: ParsedAddress): string {\n  return `${address.city.join('')}${address.district.join('')}${address.road.join('、')}${\n    address.road_section.sort(function (a, b) {\n      return a - b;\n    }).length > 0\n      ? address.road_section.join('、') + '段'\n      : ''\n  }${\n    address.alley.length > 0\n      ? address.alley\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '巷'\n      : ''\n  }${\n    address.alley_branch.length > 0\n      ? address.alley_branch\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '弄'\n      : ''\n  }${\n    address.doorplate.length > 0\n      ? address.doorplate\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '號'\n      : ''\n  }${address.floornumber.length > 0 ? address.floornumber.join('、') + '樓' : ''}${address.direction.length > 0 ? '（朝' + address.direction.join('、') + '）' : ''}`;\n}\n\nexport function extractCommonFeaturesFromAddresses(addresses: Array<string>): string {\n  // Create an object to store feature occurrences\n  const featureCounts: { [key: string]: { count: number; chars: string; index: number } } = {};\n\n  // Create a set to store unique simplified addresses\n  const simplifiedSet = new Set<string>();\n\n  // Iterate through each address\n  for (const address of addresses) {\n    // Extract common features by splitting the address\n    const features = String(address)\n      .split('')\n      .filter((feature) => feature.trim() !== '');\n\n    // Join the extracted features to create a simplified address\n    const simplifiedAddress = features.join('');\n\n    // Add the simplified address to the set\n    simplifiedSet.add(simplifiedAddress);\n\n    // Count occurrences of each feature\n    let index = 0;\n    for (const feature of features) {\n      // Check if the feature is a digit\n      if (!isNaN(parseInt(feature))) {\n        // Create a key for the digit feature\n        const digitKey = `digit_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[digitKey] = {\n          count: (featureCounts[digitKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      } else {\n        // Create a key for non-digit features\n        const featureKey = `chars_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[featureKey] = {\n          count: (featureCounts[featureKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      }\n      index += 1;\n    }\n  }\n\n  // Set threshold and limit for filtering features\n  const threshold = addresses.length * 0.6;\n  const limit = addresses.length * 1;\n\n  // Convert the feature counts object to an array of [feature, count] pairs\n  const sortedFeatures = Object.entries(featureCounts)\n    .filter((pair) => threshold <= pair[1].count && pair[1].count <= limit)\n    .sort((a, b) => a[1].index - b[1].index);\n\n  // Extract the features from the sorted array\n  const commonFeatures = sortedFeatures.map((pair) => pair[1].chars);\n\n  return commonFeatures.join('');\n}\n\nexport function generateLabelFromAddresses(addresses: Array<ParsedAddress>): Array<string> {\n  let result = [];\n  let filledProperties = {};\n  for (const address of addresses) {\n    for (const key in address) {\n      if (!filledProperties.hasOwnProperty(key)) {\n        filledProperties[key] = 0;\n      }\n      if (address[key].length > 0) {\n        filledProperties[key] = filledProperties[key] + 1;\n      }\n    }\n  }\n  let commonProperties = Object.entries(filledProperties)\n    .map((property) => {\n      return { key: property[0], value: property[1] };\n    })\n    .filter((e) => {\n      return e.value === addresses.length ? true : false;\n    })\n    .sort(function (a, b) {\n      return a.value - b.value;\n    });\n  if (commonProperties.length > 0) {\n    for (const commonProperty of commonProperties) {\n      let components = [];\n      for (const address of addresses) {\n        components.push(address[commonProperty.key].join(''));\n      }\n      if (areItemsDifferent(components)) {\n        result.push({ components: components, len: Math.max(...components.map((e) => e.length)) });\n      }\n    }\n  }\n\n  if (result.length > 0) {\n    result = result.sort(function (a, b) {\n      return a.len - b.len;\n    });\n    return result[0].components;\n  } else {\n    const addressesLength = addresses.length;\n    return generateLetterLabels(addressesLength);\n  }\n}\n","// Function to split data based on delta\n\n/**\n * Splits data into groups based on delta between consecutive elements.\n *\n * @param {Array<[number, number]>} data - Array of tuples where each tuple contains two numbers.\n * @returns {Array<Array<[number, number]>>} - Array of groups, each containing arrays of tuples.\n */\n\nexport function splitDataByDelta(data: Array<[number, number]>): Array<Array<[number, number]>> {\n  const result: Array<Array<[number, number]>> = [];\n  let currentGroup: Array<[number, number]> = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (i === 0 || data[i][0] - data[i - 1][0] > 0) {\n      if (currentGroup.length > 0) {\n        result.push(currentGroup);\n      }\n      currentGroup = [data[i]];\n    } else {\n      currentGroup.push(data[i]);\n    }\n  }\n\n  if (currentGroup.length > 0) {\n    result.push(currentGroup);\n  }\n\n  return result;\n}\n\nexport function areItemsDifferent(arr: Array): boolean {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        return false; // Found a duplicate\n      }\n    }\n  }\n  return true; // No duplicates found\n}\n\n/**\n * Get common items from the two arrays\n * @param arrayA - The first array\n * @param arrayB - The second array\n * @returns An array of the common items\n */\n\nexport function getIntersection(arrayA: Array, arrayB: Array): Array {\n  let result = [];\n  if (arrayA.length <= arrayB.length) {\n    for (const item of arrayA) {\n      if (arrayB.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  } else {\n    for (const item of arrayB) {\n      if (arrayA.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  }\n  return result;\n}\n","export function convertPositionsToDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6378.137;\n  const dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\n  const dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c;\n  return d * 1000; // measured in meters\n}\n\nexport function convertBytes(contentLength: number): string {\n  const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let i = 0;\n\n  while (contentLength >= 1024 && i < units.length - 1) {\n    contentLength /= 1024;\n    i++;\n  }\n\n  return `${contentLength.toFixed(2)} ${units[i]}`;\n}\n\nexport function convertNumberToLetters(number: number): string {\n  let result = '';\n  while (number > 0) {\n    let remainder = (number - 1) % 26; // Adjust for 1-based indexing\n    let letter = String.fromCharCode(remainder + 65); // A=65 in ASCII\n    result = letter + result;\n    number = Math.floor((number - 1) / 26); // Update number for next iteration\n  }\n  return result;\n}","export function getTextWidth(text: string, weight: number, size: string, fontFamily: string): number {\n  const canvas: HTMLCanvasElement = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  const font: string = `${weight} ${size} ${fontFamily}`;\n  context.font = font;\n  return context.measureText(text).width;\n}\n\ninterface BorderRadius {\n  tl: number;\n  tr: number;\n  br: number;\n  bl: number;\n}\n\nexport function drawRoundedRect(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number | BorderRadius, fill: string): void {\n  // If radius is a single value, treat it as the same for all corners\n  if (typeof radius === 'number') {\n    radius = { tl: radius, tr: radius, br: radius, bl: radius };\n  } else {\n    // Set defaults if individual radii are not provided\n    radius = {\n      tl: radius.tl || 0,\n      tr: radius.tr || 0,\n      br: radius.br || 0,\n      bl: radius.bl || 0\n    };\n  }\n\n  // Start path\n  ctx.beginPath();\n  // Move to the top-left corner, accounting for the top-left radius\n  ctx.moveTo(x + radius.tl, y);\n  // Draw the top line, rounding the top-right corner\n  ctx.lineTo(x + width - radius.tr, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n  // Draw the right side, rounding the bottom-right corner\n  ctx.lineTo(x + width, y + height - radius.br);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n  // Draw the bottom side, rounding the bottom-left corner\n  ctx.lineTo(x + radius.bl, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n  // Draw the left side, rounding the top-left corner\n  ctx.lineTo(x, y + radius.tl);\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n  // Complete the path\n  ctx.closePath();\n\n  ctx.fillStyle = fill;\n  ctx.fill(); // To fill the shape\n}\n","export const md5 = require('md5');\n\nexport function compareThings(a: any, b: any): boolean {\n  function anyToString(any: any): string {\n    return JSON.stringify({ e: any });\n  }\n  const ax = anyToString(a);\n  const bx = anyToString(b);\n  const length: number = 32;\n  const axLength: number = ax.length;\n  const bxLength: number = bx.length;\n  if (axLength === bxLength) {\n    if (axLength > length || bxLength > length) {\n      const hash_a: string = md5(ax);\n      const hash_b: string = md5(bx);\n\n      let equal: boolean = true;\n      for (let i = 0; i < 8; i++) {\n        const a_i: string = hash_a.charAt(i);\n        const b_i: string = hash_b.charAt(i);\n        if (a_i === b_i) {\n          continue;\n        } else {\n          equal = false;\n          break;\n        }\n      }\n      return equal;\n    } else {\n      if (ax === bx) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  } else {\n    return false;\n  }\n}\n\nexport function generateIdentifier(prefix: string = ''): string {\n  const characterSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n  let result = `${prefix}_`;\n  const length: number = 16;\n  for (let i = 0; i < length; i++) {\n    const randomNumber = Math.round(Math.random() * characterSet.length);\n    result += characterSet.substring(randomNumber, randomNumber + 1);\n  }\n  return result;\n}\n\nexport function getNoCacheParameter(interval: number): string {\n  const time = new Date().getTime();\n  const number = (time / interval).toFixed(0) * interval;\n  const string = number.toString(36);\n  return string;\n}\n\nexport function releaseFile(content: string, type: string = 'application/json', fileName: string): void {\n  const blob = new Blob([content], { type: type });\n  const fileObj = new File([blob], fileName, { type: type });\n  if (navigator.canShare && navigator.canShare({ files: [fileObj] })) {\n    navigator\n      .share({\n        files: [fileObj]\n      })\n      .catch((error) => {});\n  } else {\n    const blobURL = URL.createObjectURL(blob);\n    const downloadLink = document.createElement('a');\n    downloadLink.href = blobURL;\n    downloadLink.download = fileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    downloadLink.remove();\n    setTimeout(() => {\n      URL.revokeObjectURL(blobURL);\n    }, 10 * 1000);\n  }\n}\n\nexport function isRunningStandalone(): boolean {\n  return window.matchMedia('(display-mode: standalone)').matches;\n}\n\nexport function supportTouch(): boolean {\n  if ('ontouchstart' in window || navigator.maxTouchPoints) {\n    // Touch events are supported\n    return true;\n  } else {\n    // Touch events are not supported\n    return false;\n  }\n}\n\nexport function booleanToString(x: boolean): 'true' | 'false' {\n  if (typeof x === 'boolean') {\n    if (x) {\n      return 'true';\n    } else {\n      return 'false';\n    }\n  }\n}\n\nexport function isValidURL(string: string): boolean {\n  try {\n    new URL(string);\n    return true; // If no error is thrown, it's a valid URL\n  } catch (_) {\n    return false; // Invalid URL\n  }\n}\n","import { convertNumberToLetters } from './convert';\nimport { convertToUnitVector } from './math';\n\nexport function generateLetterLabels(quantity: number): Array<string> {\n  let result = [];\n  for (let i = 0; i < quantity; i++) {\n    result.push(`地點${convertNumberToLetters(i + 1)}`);\n  }\n  return result;\n}\n\nexport function generateDirectionLabels(setsOfVectors: Array<Array<[number, number]>>): Array<string> {\n  let result = [];\n  const unknownVector = [0, 0];\n  // cardinal directions\n  const NorthVector = [0, 1];\n  const EastVector = [1, 0];\n  const WestVector = [-1, 0];\n  const SouthVector = [0, -1];\n  // intercardinal directions\n  const NorthEastVector = [Math.sqrt(2) / 2, Math.sqrt(2) / 2]; // 45 degrees\n  const SouthEastVector = [Math.sqrt(2) / 2, -Math.sqrt(2) / 2]; // 135 degrees\n  const SouthWestVector = [-Math.sqrt(2) / 2, -Math.sqrt(2) / 2]; // 225 degrees\n  const NorthWestVector = [-Math.sqrt(2) / 2, Math.sqrt(2) / 2]; // 315 degrees\n\n  const directions = [\n    {\n      vector: unknownVector,\n      label: '未知'\n    },\n    {\n      vector: NorthVector,\n      label: '北'\n    },\n    {\n      vector: EastVector,\n      label: '東'\n    },\n    {\n      vector: SouthVector,\n      label: '南'\n    },\n    {\n      vector: WestVector,\n      label: '西'\n    },\n    {\n      vector: NorthEastVector,\n      label: '東北'\n    },\n    {\n      vector: SouthEastVector,\n      label: '東南'\n    },\n    {\n      vector: SouthWestVector,\n      label: '西南'\n    },\n    {\n      vector: NorthWestVector,\n      label: '西北'\n    }\n  ];\n\n  for (const vectorSet of setsOfVectors) {\n    let x = 0;\n    let y = 0;\n    for (const vector of vectorSet) {\n      x += vector[0];\n      y += vector[1];\n    }\n    const meanVector = convertToUnitVector([x, y]);\n    let result2 = [];\n    for (const direction of directions) {\n      const dotProduct = direction.vector[0] * meanVector[0] + direction.vector[1] * meanVector[1];\n      result2.push({ label: direction.label, dotProduct: dotProduct });\n    }\n    result2 = result2.sort(function (a, b) {\n      return b.dotProduct - a.dotProduct;\n    });\n    const bestMatch = result2[0];\n    result.push(bestMatch.label);\n  }\n  return result;\n}\n"],"names":["addressToString","address","concat","city","join","district","road","road_section","sort","a","b","length","alley","alley_branch","doorplate","floornumber","direction","generateLabelFromAddresses","addresses","_step4","result","filledProperties","_iterator4","_createForOfIteratorHelper","s","n","done","value","key","hasOwnProperty","err","e","f","commonProperties","Object","entries","map","property","filter","_step5","_iterator5","_step6","commonProperty","components","_iterator6","push","areItemsDifferent","len","Math","max","apply","_toConsumableArray","addressesLength","generateLetterLabels","arr","i","j","getIntersection","arrayA","arrayB","_step","_iterator","item","indexOf","_step2","_iterator2","convertPositionsToDistance","lat1","lon1","lat2","lon2","dLat","PI","dLon","sin","cos","atan2","sqrt","convertBytes","contentLength","units","toFixed","convertNumberToLetters","number","remainder","String","fromCharCode","floor","getTextWidth","text","weight","size","fontFamily","context","canvas","document","createElement","getContext","font","measureText","width","drawRoundedRect","ctx","x","y","height","radius","fill","tl","tr","br","bl","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fillStyle","md5","require","compareThings","anyToString","any","JSON","stringify","ax","bx","axLength","bxLength","hash_a","hash_b","equal","charAt","generateIdentifier","characterSet","arguments","undefined","randomNumber","round","random","substring","getNoCacheParameter","interval","Date","getTime","toString","releaseFile","content","type","fileName","blob","Blob","fileObj","File","navigator","canShare","files","share","error","blobURL","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","remove","setTimeout","revokeObjectURL","isRunningStandalone","window","matchMedia","matches","supportTouch","maxTouchPoints","booleanToString","isValidURL","string","_","quantity","generateDirectionLabels","setsOfVectors","directions","vector","label","vectorSet","_step3","meanVector","convertToUnitVector","result2","_iterator3","dotProduct","bestMatch"],"sourceRoot":""}