{"version":3,"file":"1ebb48c59bbdc3e7fe75.js","mappings":"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","sources":["webpack://bus/webpack/universalModuleDefinition","webpack://bus/./src/data/analytics/bus-arrival-time/getBusArrivalTimes-worker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bus\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bus\"] = factory();\n\telse\n\t\troot[\"bus\"] = factory();\n})(self, () => {\nreturn ","import { PersonalScheduleArray } from '../../personal-schedule/index';\nimport { BusArrivalTimeDataGroupArray, BusArrivalTimes } from './index';\n\ninterface task {\n  personalSchedules: PersonalScheduleArray;\n  busArrivalTimeDataGroups: BusArrivalTimeDataGroupArray;\n  chartWidth: number;\n  chartHeight: number;\n  taskID: string;\n  port: any;\n}\n\nlet taskQueue: Array<task> = [];\nlet isProcessing: boolean = false;\n\n// Setup message handling (works for dedicated or shared workers)\nif ('onconnect' in self) {\n  self.onconnect = function (e) {\n    const port = e.ports[0];\n    port.onmessage = function (event) {\n      const [personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID] = event.data;\n      taskQueue.push({ personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port });\n      processWorkerTask();\n    };\n  };\n} else {\n  const port = self;\n  self.onmessage = function (event) {\n    const [personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID] = event.data;\n    taskQueue.push({ personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port });\n    processWorkerTask();\n  };\n}\n\n// Main processing function\nfunction processWorkerTask(): void {\n  if (isProcessing || taskQueue.length === 0) return;\n  isProcessing = true;\n\n  // Dequeue the next task\n  const { personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port }: task = taskQueue.shift();\n\n  const result: BusArrivalTimes = {};\n\n  // For each personalSchedule, build an SVG graph\n  for (const personalSchedule of personalSchedules) {\n    const startIndex = personalSchedule.period.start.hours * 60 + personalSchedule.period.start.minutes;\n    const endIndex = personalSchedule.period.end.hours * 60 + personalSchedule.period.end.minutes;\n    const barWidth = chartWidth / (endIndex - startIndex);\n    for (const busArrivalTimeDataGroup of busArrivalTimeDataGroups) {\n      if (personalSchedule.days.indexOf(busArrivalTimeDataGroup.day) < 0) {\n        continue;\n      }\n      const statsMax = busArrivalTimeDataGroup.max;\n      const statsArray = busArrivalTimeDataGroup.stats.slice(startIndex, endIndex);\n      const statsArrayLength = statsArray.length;\n\n      // Gridline\n      let verticalGridlinePathCommand = '';\n      let verticalGridlineInterval = 0; // minutes\n      if (statsArrayLength / 30 <= 3) {\n        verticalGridlineInterval = 10;\n      } else {\n        verticalGridlineInterval = 30;\n      }\n      const verticalGridlineQuantity = statsArrayLength / verticalGridlineInterval;\n      const verticalGridlineGap = chartWidth / verticalGridlineQuantity;\n      for (let i = verticalGridlineQuantity - 1; i >= 0; i--) {\n        verticalGridlinePathCommand += ` M${i * verticalGridlineGap},0`;\n        verticalGridlinePathCommand += ` L${i * verticalGridlineGap},${chartHeight}`;\n      }\n      const verticalGridline = `<path d=\"${verticalGridlinePathCommand}\" fill=\"none\" stroke-width=\"0.35\" component=\"vertical-gridline\"/>`;\n\n      // Bars\n      let barsPathCommand = '';\n      barsPathCommand += `M${chartWidth},${chartHeight}`;\n      for (let j = statsArrayLength - 1; j >= 0; j--) {\n        let x = ((j + 1) / statsArrayLength) * chartWidth; // Shift right for correct alignment\n        let y = (1 - statsArray[j] / statsMax) * chartHeight;\n        barsPathCommand += ` L${x},${y}`;\n        barsPathCommand += ` L${x - barWidth},${y}`;\n        barsPathCommand += ` L${x - barWidth},${chartHeight}`;\n      }\n      barsPathCommand += ' Z';\n      const bars = `<path d=\"${barsPathCommand}\" stroke=\"none\" stroke-width=\"0\" component=\"bars\"/>`;\n\n      const svg = `<svg width=\"${chartWidth}\" height=\"${chartHeight}\" viewBox=\"0 0 ${chartWidth} ${chartHeight}\" xmlns=\"http://www.w3.org/2000/svg\">${verticalGridline}${bars}</svg>`;\n      const stopKey = `s_${busArrivalTimeDataGroup.id}`;\n      if (!result.hasOwnProperty(stopKey)) {\n        result[stopKey] = [];\n      }\n      result[stopKey].push({\n        personalSchedule: personalSchedule,\n        chart: svg,\n        day: busArrivalTimeDataGroup.day\n      });\n    }\n  }\n\n  // Send the complete HTML back to the main thread\n  port.postMessage([result, taskID]);\n\n  isProcessing = false;\n  processWorkerTask(); // Process next task in the queue if any\n}\n"],"names":["root","factory","exports","module","define","amd","self","taskQueue","isProcessing","onconnect","e","port","ports","onmessage","event","_event$data","_slicedToArray","data","personalSchedules","busArrivalTimeDataGroups","chartWidth","chartHeight","taskID","push","processWorkerTask","_event$data2","length","_step","_taskQueue$shift","shift","result","_iterator","_createForOfIteratorHelper","s","n","done","_step2","personalSchedule","value","startIndex","period","start","hours","minutes","endIndex","end","barWidth","_iterator2","busArrivalTimeDataGroup","days","indexOf","day","statsMax","max","statsArray","stats","slice","statsArrayLength","verticalGridlinePathCommand","verticalGridlineQuantity","verticalGridlineGap","i","concat","verticalGridline","barsPathCommand","j","x","y","bars","svg","stopKey","id","hasOwnProperty","chart","err","f","postMessage"],"sourceRoot":""}