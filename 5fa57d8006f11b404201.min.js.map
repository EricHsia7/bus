{"version":3,"file":"5fa57d8006f11b404201.min.js","mappings":"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","sources":["webpack://bus/./src/data/analytics/data-usage.ts"],"sourcesContent":["import { convertBytes } from '../../tools/convert';\nimport { segmentsToPath, simplifyPath } from '../../tools/path';\nimport { dateToString, TimeStampPeriod } from '../../tools/time';\nimport { lfSetItem, lfGetItem, lfListItemKeys } from '../storage/index';\n\nlet incompleteRecords = {};\n\nexport async function recordRequest(requestID: string, data: object, incomplete: boolean): void {\n  if (!incompleteRecords.hasOwnProperty(requestID)) {\n    incompleteRecords[requestID] = data;\n  }\n  incompleteRecords[requestID].end_time = data.end_time;\n  incompleteRecords[requestID].content_length = incompleteRecords[requestID].content_length + data.content_length;\n\n  if (!incomplete) {\n    if (incompleteRecords.hasOwnProperty(requestID)) {\n      await lfSetItem(2, requestID, JSON.stringify(incompleteRecords[requestID]));\n      delete incompleteRecords[requestID];\n    }\n  }\n}\n\nexport async function discardExpiredDataUsageRecords(): void {\n  const keys = await lfListItemKeys(2);\n  for (const key of keys) {\n    const json = await lfGetItem(2, key);\n    const object: object = JSON.parse(json);\n    if (new Date().getTime() - object.timeStamp > 60 * 60 * 24 * 30 * 1000) {\n      await lfRemoveItem(2, key);\n    }\n  }\n}\n\nexport async function getDataUsageRecordsPeriod(): Promise<TimeStampPeriod> {\n  const keys = await lfListItemKeys(2);\n  let startTimeArray = [];\n  let endTimeArray = [];\n  for (const key of keys) {\n    const json = await lfGetItem(2, key);\n    const object = JSON.parse(json);\n    startTimeArray.push(object.start_time);\n    endTimeArray.push(object.end_time);\n  }\n  const minStartTime = new Date(Math.min(...startTimeArray));\n  const maxEndTime = new Date(Math.max(...endTimeArray));\n\n  return {\n    start: minStartTime,\n    end: maxEndTime\n  };\n}\n\nexport async function calculateTotalDataUsage(): Promise<string> {\n  const keys = await lfListItemKeys(2);\n  let totalContentLength = 0;\n  for (const key of keys) {\n    const json = await lfGetItem(2, key);\n    const object = JSON.parse(json);\n    totalContentLength += object.content_length;\n  }\n  return convertBytes(totalContentLength);\n}\n\nexport type AggregationPeriod = 'minutely' | 'hourly' | 'daily';\n\nexport async function generateDataUsageGraph(aggregationPeriod: AggregationPeriod, width: number, height: number, padding: number): Promise<string | boolean> {\n  const keys = await lfListItemKeys(2);\n  let dateToStringTemplate = 'YYYY_MM_DD_hh_mm_ss';\n  switch (aggregationPeriod) {\n    case 'minutely':\n      dateToStringTemplate = 'YYYY_MM_DD_hh_mm';\n      break;\n    case 'hourly':\n      dateToStringTemplate = 'YYYY_MM_DD_hh';\n      break;\n    case 'daily':\n      dateToStringTemplate = 'YYYY_MM_DD';\n      break;\n    default:\n      break;\n  }\n\n  let aggregatedData = {};\n  for (const key of keys) {\n    const json = await lfGetItem(2, key);\n    const object = JSON.parse(json);\n    const startDate = new Date(object.start_time);\n    const graphDataKey = `d_${dateToString(startDate, dateToStringTemplate)}`;\n    if (!aggregatedData.hasOwnProperty(graphDataKey)) {\n      aggregatedData[graphDataKey] = { start_time: object.start_time, end_time: object.end_time, content_length: 0 };\n    }\n    aggregatedData[graphDataKey].content_length = aggregatedData[graphDataKey].content_length + object.content_length;\n    if (object.start_time < aggregatedData[graphDataKey].start_time) {\n      aggregatedData[graphDataKey].start_time = object.start_time;\n    }\n    if (object.end_time > aggregatedData[graphDataKey].end_time) {\n      aggregatedData[graphDataKey].end_time = object.end_time;\n    }\n  }\n\n  let graphDataArray = [];\n  for (const graphDataKey in aggregatedData) {\n    const item = aggregatedData[graphDataKey];\n    graphDataArray.push(item);\n  }\n\n  if (graphDataArray.length > 3) {\n    graphDataArray.sort(function (a, b) {\n      return a.start_time - b.start_time;\n    });\n    const startTimeArray = graphDataArray.map((e) => e.start_time);\n    const minStartTime = Math.min(...startTimeArray);\n    const maxStartTime = Math.max(...startTimeArray);\n\n    const contentLengthArray = graphDataArray.map((e) => e.content_length);\n    const minContentLength = Math.min(...contentLengthArray);\n    const maxContentLength = Math.max(...contentLengthArray);\n\n    let points = [];\n    for (const graphData of graphDataArray) {\n      const point = {\n        x: Math.round(padding + ((graphData.start_time - minStartTime) / (maxStartTime - minStartTime)) * width),\n        y: Math.round(padding + (1 - (graphData.content_length - minContentLength) / (maxContentLength - minContentLength)) * height)\n      };\n      points.push(point);\n    }\n\n    // X-axis (horizontal)\n    const xAxis = `<line x1=\"${padding}\" y1=\"${height + padding}\" x2=\"${padding + width}\" y2=\"${height + padding}\" stroke=\"var(--b-cssvar-333333)\" stroke-width=\"1\" />`;\n\n    // Y-axis (vertical)\n    const yAxis = `<line x1=\"${padding}\" y1=\"${padding}\" x2=\"${padding}\" y2=\"${height + padding}\" stroke=\"var(--b-cssvar-333333)\" stroke-width=\"1\" />`;\n\n    // Axis Labels\n    const xAxisLabel = `<text x=\"${padding + width / 2}\" y=\"${padding + height + padding}\" text-anchor=\"middle\" font-size=\"12\" fill=\"var(--b-cssvar-333333)\">時間</text>`;\n    const yAxisLabel = `<text x=\"${padding / 2}\" y=\"${padding + height / 2}\" text-anchor=\"middle\" font-size=\"12\" fill=\"var(--b-cssvar-333333)\" transform=\"rotate(-90, ${padding * 0.7}, ${padding + height / 2})\">傳輸量</text>`;\n\n    // Paths\n    const simplifiedPath = simplifyPath(points, 1.1);\n    const pathData = segmentsToPath(simplifiedPath, 1);\n    const fillingPathData = `M${padding},${height + padding}${pathData}L${padding + width},${height + padding}L${padding},${height + padding}`;\n    const path = `<path d=\"${pathData}\" fill=\"none\" stroke=\"var(--b-cssvar-main-color)\" stroke-width=\"0.9\" stroke-linecap=\"round\" stroke-linejoin=\"round\" opacity=\"1\"></path>`;\n    const fillingPath = `<path d=\"${fillingPathData}\" stroke=\"none\" stroke-width=\"0\" fill=\"url(#grad1)\"></path>`;\n    const filling = `<linearGradient id=\"grad1\" x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\"><stop offset=\"0%\" style=\"stop-color:rgba(var(--b-cssvar-main-color-r), var(--b-cssvar-main-color-g), var(--b-cssvar-main-color-b), 0.3);\" /><stop offset=\"73%\" style=\"stop-color:rgba(var(--b-cssvar-main-color-r), var(--b-cssvar-main-color-g), var(--b-cssvar-main-color-b), 0.09);\" /><stop offset=\"100%\" style=\"stop-color:rgba(var(--b-cssvar-main-color-r), var(--b-cssvar-main-color-g), var(--b-cssvar-main-color-b), 0);\" /></linearGradient>`;\n\n    // SVG\n    return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width + padding * 2}px\" height=\"${height + padding * 2}px\" viewBox=\"0 0 ${width + padding * 2} ${height + padding * 2}\"><defs>${filling}</defs>${fillingPath}${path}${xAxis}${yAxis}${xAxisLabel}${yAxisLabel}</svg>`;\n  } else {\n    return false;\n  }\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","incompleteRecords","recordRequest","_x","_x2","_x3","_recordRequest","_callee","requestID","data","incomplete","_context","end_time","content_length","lfSetItem","JSON","stringify","discardExpiredDataUsageRecords","_discardExpiredDataUsageRecords","_callee2","_iterator","_step","key","json","object","_context2","lfListItemKeys","_createForOfIteratorHelper","lfGetItem","parse","Date","getTime","timeStamp","lfRemoveItem","t0","getDataUsageRecordsPeriod","_getDataUsageRecordsPeriod","_callee3","startTimeArray","endTimeArray","_iterator2","_step2","minStartTime","maxEndTime","_context3","start_time","Math","min","max","start","end","calculateTotalDataUsage","_calculateTotalDataUsage","_callee4","totalContentLength","_iterator3","_step3","_context4","convertBytes","generateDataUsageGraph","_x4","_x5","_x6","_x7","_generateDataUsageGraph","_callee5","aggregationPeriod","width","height","padding","dateToStringTemplate","aggregatedData","_iterator4","_step4","startDate","_graphDataKey","graphDataArray","graphDataKey","item","maxStartTime","contentLengthArray","minContentLength","maxContentLength","points","_iterator5","_step5","graphData","point","xAxis","yAxis","xAxisLabel","yAxisLabel","simplifiedPath","pathData","fillingPathData","path","fillingPath","_context5","concat","dateToString","t1","sort","b","map","_toConsumableArray","x","round","err","simplifyPath","segmentsToPath"],"sourceRoot":""}