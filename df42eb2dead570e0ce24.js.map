{"version":3,"file":"df42eb2dead570e0ce24.js","mappings":";sXACAA,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAO,KAAA,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAjB,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAS,MAAAP,EAAAiB,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAApB,EAAAD,EAAA,KAAAkB,EAAA,aAAAjB,GAAAiB,EAAA,SAAAjB,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAoB,EAAArB,EAAAD,EAAAE,EAAAG,GAAA,IAAAK,EAAAV,GAAAA,EAAAI,qBAAAmB,EAAAvB,EAAAuB,EAAAX,EAAAT,OAAAqB,OAAAd,EAAAN,WAAAU,EAAA,IAAAW,EAAApB,GAAA,WAAAE,EAAAK,EAAA,WAAAH,MAAAiB,EAAAzB,EAAAC,EAAAY,KAAAF,CAAA,UAAAe,EAAA1B,EAAAD,EAAAE,GAAA,WAAA0B,KAAA,SAAAC,IAAA5B,EAAA6B,KAAA9B,EAAAE,GAAA,OAAAD,GAAA,OAAA2B,KAAA,QAAAC,IAAA5B,EAAA,EAAAD,EAAAsB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAApC,OAAAqC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAAvC,GAAAG,EAAAyB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAE,EAAAN,EAAAjC,UAAAmB,EAAAnB,UAAAD,OAAAqB,OAAAc,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,SAAA,SAAA7C,GAAAkB,EAAAjB,EAAAD,GAAA,SAAAC,GAAA,YAAA6C,QAAA9C,EAAAC,EAAA,gBAAA8C,EAAA9C,EAAAD,GAAA,SAAAgD,EAAA9C,EAAAK,EAAAG,EAAAE,GAAA,IAAAE,EAAAa,EAAA1B,EAAAC,GAAAD,EAAAM,GAAA,aAAAO,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAP,MAAA,OAAAsB,GAAA,UAAAkB,EAAAlB,IAAA1B,EAAAyB,KAAAC,EAAA,WAAA/B,EAAAkD,QAAAnB,EAAAoB,SAAAC,MAAA,SAAAnD,GAAA+C,EAAA,OAAA/C,EAAAS,EAAAE,EAAA,aAAAX,GAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAZ,EAAAkD,QAAAnB,GAAAqB,MAAA,SAAAnD,GAAAe,EAAAP,MAAAR,EAAAS,EAAAM,EAAA,aAAAf,GAAA,OAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAA3B,EAAAK,EAAA,gBAAAE,MAAA,SAAAR,EAAAI,GAAA,SAAAgD,IAAA,WAAArD,GAAA,SAAAA,EAAAE,GAAA8C,EAAA/C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAAkD,KAAAC,EAAAA,GAAAA,GAAA,aAAA3B,EAAA1B,EAAAE,EAAAG,GAAA,IAAAE,EAAAwB,EAAA,gBAAArB,EAAAE,GAAA,GAAAL,IAAA0B,EAAA,MAAAqB,MAAA,mCAAA/C,IAAA2B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAAH,MAAAR,EAAAsD,MAAA,OAAAlD,EAAAmD,OAAA9C,EAAAL,EAAAwB,IAAAjB,IAAA,KAAAE,EAAAT,EAAAoD,SAAA,GAAA3C,EAAA,KAAAE,EAAA0C,EAAA5C,EAAAT,GAAA,GAAAW,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAX,EAAAmD,OAAAnD,EAAAsD,KAAAtD,EAAAuD,MAAAvD,EAAAwB,SAAA,aAAAxB,EAAAmD,OAAA,IAAAjD,IAAAwB,EAAA,MAAAxB,EAAA2B,EAAA7B,EAAAwB,IAAAxB,EAAAwD,kBAAAxD,EAAAwB,IAAA,gBAAAxB,EAAAmD,QAAAnD,EAAAyD,OAAA,SAAAzD,EAAAwB,KAAAtB,EAAA0B,EAAA,IAAAK,EAAAX,EAAA3B,EAAAE,EAAAG,GAAA,cAAAiC,EAAAV,KAAA,IAAArB,EAAAF,EAAAkD,KAAArB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAA1B,MAAA6B,EAAAT,IAAA0B,KAAAlD,EAAAkD,KAAA,WAAAjB,EAAAV,OAAArB,EAAA2B,EAAA7B,EAAAmD,OAAA,QAAAnD,EAAAwB,IAAAS,EAAAT,IAAA,YAAA6B,EAAA1D,EAAAE,GAAA,IAAAG,EAAAH,EAAAsD,OAAAjD,EAAAP,EAAAa,SAAAR,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAuD,SAAA,eAAApD,GAAAL,EAAAa,SAAA,SAAAX,EAAAsD,OAAA,SAAAtD,EAAA2B,IAAA5B,EAAAyD,EAAA1D,EAAAE,GAAA,UAAAA,EAAAsD,SAAA,WAAAnD,IAAAH,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA1D,EAAA,aAAA8B,EAAA,IAAAzB,EAAAiB,EAAApB,EAAAP,EAAAa,SAAAX,EAAA2B,KAAA,aAAAnB,EAAAkB,KAAA,OAAA1B,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAAnB,EAAAmB,IAAA3B,EAAAuD,SAAA,KAAAtB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAA2C,MAAArD,EAAAF,EAAAgE,YAAApD,EAAAH,MAAAP,EAAA+D,KAAAjE,EAAAkE,QAAA,WAAAhE,EAAAsD,SAAAtD,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,GAAAC,EAAAuD,SAAA,KAAAtB,GAAAvB,GAAAV,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA7D,EAAAuD,SAAA,KAAAtB,EAAA,UAAAgC,EAAAlE,GAAA,IAAAD,EAAA,CAAAoE,OAAAnE,EAAA,SAAAA,IAAAD,EAAAqE,SAAApE,EAAA,SAAAA,IAAAD,EAAAsE,WAAArE,EAAA,GAAAD,EAAAuE,SAAAtE,EAAA,SAAAuE,WAAAC,KAAAzE,EAAA,UAAA0E,EAAAzE,GAAA,IAAAD,EAAAC,EAAA0E,YAAA,GAAA3E,EAAA4B,KAAA,gBAAA5B,EAAA6B,IAAA5B,EAAA0E,WAAA3E,CAAA,UAAAyB,EAAAxB,GAAA,KAAAuE,WAAA,EAAAJ,OAAA,SAAAnE,EAAA4C,QAAAsB,EAAA,WAAAS,OAAA,YAAAlC,EAAA1C,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAY,GAAA,GAAAV,EAAA,OAAAA,EAAA4B,KAAA9B,GAAA,sBAAAA,EAAAiE,KAAA,OAAAjE,EAAA,IAAA6E,MAAA7E,EAAA8E,QAAA,KAAAvE,GAAA,EAAAG,EAAA,SAAAuD,IAAA,OAAA1D,EAAAP,EAAA8E,QAAA,GAAAzE,EAAAyB,KAAA9B,EAAAO,GAAA,OAAA0D,EAAAxD,MAAAT,EAAAO,GAAA0D,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,SAAAvD,EAAAuD,KAAAvD,CAAA,YAAAqD,UAAAd,EAAAjD,GAAA,2BAAAoC,EAAAhC,UAAAiC,EAAA9B,EAAAoC,EAAA,eAAAlC,MAAA4B,EAAAjB,cAAA,IAAAb,EAAA8B,EAAA,eAAA5B,MAAA2B,EAAAhB,cAAA,IAAAgB,EAAA2C,YAAA7D,EAAAmB,EAAArB,EAAA,qBAAAhB,EAAAgF,oBAAA,SAAA/E,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAgF,YAAA,QAAAjF,IAAAA,IAAAoC,GAAA,uBAAApC,EAAA+E,aAAA/E,EAAAkF,MAAA,EAAAlF,EAAAmF,KAAA,SAAAlF,GAAA,OAAAE,OAAAiF,eAAAjF,OAAAiF,eAAAnF,EAAAoC,IAAApC,EAAAoF,UAAAhD,EAAAnB,EAAAjB,EAAAe,EAAA,sBAAAf,EAAAG,UAAAD,OAAAqB,OAAAmB,GAAA1C,CAAA,EAAAD,EAAAsF,MAAA,SAAArF,GAAA,OAAAkD,QAAAlD,EAAA,EAAA2C,EAAAG,EAAA3C,WAAAc,EAAA6B,EAAA3C,UAAAU,GAAA,0BAAAd,EAAA+C,cAAAA,EAAA/C,EAAAuF,MAAA,SAAAtF,EAAAC,EAAAG,EAAAE,EAAAG,QAAA,IAAAA,IAAAA,EAAA8E,SAAA,IAAA5E,EAAA,IAAAmC,EAAAzB,EAAArB,EAAAC,EAAAG,EAAAE,GAAAG,GAAA,OAAAV,EAAAgF,oBAAA9E,GAAAU,EAAAA,EAAAqD,OAAAb,MAAA,SAAAnD,GAAA,OAAAA,EAAAsD,KAAAtD,EAAAQ,MAAAG,EAAAqD,MAAA,KAAArB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAA3C,EAAAyF,KAAA,SAAAxF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAAuE,KAAApE,GAAA,OAAAH,EAAAwF,UAAA,SAAAzB,IAAA,KAAA/D,EAAA4E,QAAA,KAAA7E,EAAAC,EAAAyF,MAAA,GAAA1F,KAAAD,EAAA,OAAAiE,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAAjE,EAAA0C,OAAAA,EAAAjB,EAAArB,UAAA,CAAA6E,YAAAxD,EAAAmD,MAAA,SAAA5E,GAAA,QAAA4F,KAAA,OAAA3B,KAAA,OAAAN,KAAA,KAAAC,MAAA3D,EAAA,KAAAsD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA3B,IAAA5B,EAAA,KAAAuE,WAAA3B,QAAA6B,IAAA1E,EAAA,QAAAE,KAAA,WAAAA,EAAA2F,OAAA,IAAAxF,EAAAyB,KAAA,KAAA5B,KAAA2E,OAAA3E,EAAA4F,MAAA,WAAA5F,GAAAD,EAAA,EAAA8F,KAAA,gBAAAxC,MAAA,MAAAtD,EAAA,KAAAuE,WAAA,GAAAG,WAAA,aAAA1E,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,YAAAmE,IAAA,EAAAnC,kBAAA,SAAA7D,GAAA,QAAAuD,KAAA,MAAAvD,EAAA,IAAAE,EAAA,cAAA+F,EAAA5F,EAAAE,GAAA,OAAAK,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAA7B,EAAAE,EAAA+D,KAAA5D,EAAAE,IAAAL,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,KAAAM,CAAA,SAAAA,EAAA,KAAAiE,WAAAM,OAAA,EAAAvE,GAAA,IAAAA,EAAA,KAAAG,EAAA,KAAA8D,WAAAjE,GAAAK,EAAAF,EAAAiE,WAAA,YAAAjE,EAAA0D,OAAA,OAAA6B,EAAA,UAAAvF,EAAA0D,QAAA,KAAAwB,KAAA,KAAA9E,EAAAT,EAAAyB,KAAApB,EAAA,YAAAM,EAAAX,EAAAyB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAA4E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,WAAAuB,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,SAAAxD,GAAA,QAAA8E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,YAAArD,EAAA,MAAAsC,MAAA,kDAAAsC,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,KAAAR,OAAA,SAAA7D,EAAAD,GAAA,QAAAE,EAAA,KAAAsE,WAAAM,OAAA,EAAA5E,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAAiE,WAAAtE,GAAA,GAAAK,EAAA6D,QAAA,KAAAwB,MAAAvF,EAAAyB,KAAAvB,EAAA,oBAAAqF,KAAArF,EAAA+D,WAAA,KAAA5D,EAAAH,EAAA,OAAAG,IAAA,UAAAT,GAAA,aAAAA,IAAAS,EAAA0D,QAAApE,GAAAA,GAAAU,EAAA4D,aAAA5D,EAAA,UAAAE,EAAAF,EAAAA,EAAAiE,WAAA,UAAA/D,EAAAgB,KAAA3B,EAAAW,EAAAiB,IAAA7B,EAAAU,GAAA,KAAA8C,OAAA,YAAAS,KAAAvD,EAAA4D,WAAAnC,GAAA,KAAA+D,SAAAtF,EAAA,EAAAsF,SAAA,SAAAjG,EAAAD,GAAA,aAAAC,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,gBAAA5B,EAAA2B,MAAA,aAAA3B,EAAA2B,KAAA,KAAAqC,KAAAhE,EAAA4B,IAAA,WAAA5B,EAAA2B,MAAA,KAAAoE,KAAA,KAAAnE,IAAA5B,EAAA4B,IAAA,KAAA2B,OAAA,cAAAS,KAAA,kBAAAhE,EAAA2B,MAAA5B,IAAA,KAAAiE,KAAAjE,GAAAmC,CAAA,EAAAgE,OAAA,SAAAlG,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAoE,aAAArE,EAAA,YAAAiG,SAAAhG,EAAAyE,WAAAzE,EAAAqE,UAAAG,EAAAxE,GAAAiC,CAAA,kBAAAlC,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAkE,SAAAnE,EAAA,KAAAI,EAAAH,EAAAyE,WAAA,aAAAtE,EAAAuB,KAAA,KAAArB,EAAAF,EAAAwB,IAAA6C,EAAAxE,EAAA,QAAAK,CAAA,QAAA+C,MAAA,0BAAA8C,cAAA,SAAApG,EAAAE,EAAAG,GAAA,YAAAoD,SAAA,CAAA5C,SAAA6B,EAAA1C,GAAAgE,WAAA9D,EAAAgE,QAAA7D,GAAA,cAAAmD,SAAA,KAAA3B,IAAA5B,GAAAkC,CAAA,GAAAnC,CAAA,UAAAqG,EAAAnG,EAAAF,GAAA,IAAAC,EAAA,oBAAAU,QAAAT,EAAAS,OAAAE,WAAAX,EAAA,kBAAAD,EAAA,IAAAqG,MAAAC,QAAArG,KAAAD,EAAA,SAAAC,EAAAU,GAAA,GAAAV,EAAA,qBAAAA,EAAA,OAAAsG,EAAAtG,EAAAU,GAAA,IAAAX,EAAA,GAAAwG,SAAA3E,KAAA5B,GAAA4F,MAAA,uBAAA7F,GAAAC,EAAA+E,cAAAhF,EAAAC,EAAA+E,YAAAC,MAAA,QAAAjF,GAAA,QAAAA,EAAAqG,MAAAI,KAAAxG,GAAA,cAAAD,GAAA,2CAAA0G,KAAA1G,GAAAuG,EAAAtG,EAAAU,QAAA,GAAAgG,CAAA1G,KAAAF,GAAAE,GAAA,iBAAAA,EAAA4E,OAAA,CAAA7E,IAAAC,EAAAD,GAAA,IAAA4G,EAAA,EAAAC,EAAA,oBAAA5E,EAAA4E,EAAAzG,EAAA,kBAAAwG,GAAA3G,EAAA4E,OAAA,CAAAvB,MAAA,IAAAA,MAAA,EAAA9C,MAAAP,EAAA2G,KAAA,EAAA7G,EAAA,SAAAE,GAAA,MAAAA,CAAA,EAAA+B,EAAA6E,EAAA,WAAA/C,UAAA,6IAAAxD,EAAAK,GAAA,EAAAI,GAAA,SAAAkB,EAAA,WAAAjC,EAAAA,EAAA6B,KAAA5B,EAAA,EAAAG,EAAA,eAAAH,EAAAD,EAAAgE,OAAA,OAAArD,EAAAV,EAAAqD,KAAArD,CAAA,EAAAF,EAAA,SAAAE,GAAAc,GAAA,EAAAT,EAAAL,CAAA,EAAA+B,EAAA,eAAArB,GAAA,MAAAX,EAAA,QAAAA,EAAA,oBAAAe,EAAA,MAAAT,CAAA,aAAAiG,EAAAtG,EAAAU,IAAA,MAAAA,GAAAA,EAAAV,EAAA4E,UAAAlE,EAAAV,EAAA4E,QAAA,QAAA9E,EAAA,EAAAK,EAAAiG,MAAA1F,GAAAZ,EAAAY,EAAAZ,IAAAK,EAAAL,GAAAE,EAAAF,GAAA,OAAAK,CAAA,UAAA0G,EAAA1G,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAK,EAAAE,GAAA,QAAAJ,EAAAL,EAAAO,GAAAE,GAAAE,EAAAN,EAAAD,KAAA,OAAAJ,GAAA,YAAAL,EAAAK,EAAA,CAAAK,EAAA6C,KAAAtD,EAAAe,GAAAwE,QAAAtC,QAAAlC,GAAAoC,KAAAlD,EAAAK,EAAA,CA0BA,SAASyG,EAAqBC,GAC5B,IACI/B,EAAO,GACPgC,EAAM,GACV,QAHiBC,EAAAA,EAAAA,IAAYF,IAI3B,IAAK,aACH/B,EAAO,KACPgC,EAAM,QACN,MACF,IAAK,gBACHhC,EAAO,KACPgC,EAAM,WACN,MACF,IAAK,wBAIL,IAAK,sBAIL,IAAK,mCAIL,IAAK,6BACHhC,EAAO,KACPgC,EAAM,YACN,MACF,IAAK,wBACHhC,EAAO,QACPgC,EAAM,mBACN,MACF,IAAK,mBACHhC,EAAO,OACPgC,EAAM,cACN,MACF,IAAK,kBAIL,IAAK,0BAIL,IAAK,qBACHhC,EAAO,MACPgC,EAAM,UACN,MACF,QACEhC,EAAO,KACPgC,EAAM,SAOV,MAJe,CACbhC,KAAAA,EACAgC,IAAAA,EAGJ,CAEO,SAAeE,IAAuB,OAAAC,EAAAC,MAAC,KAADC,UAAA,CA4C5C,SAAAF,IAnID,IAAAhH,EAmIC,OAnIDA,EAmICN,IAAAoF,MA5CM,SAAAqC,IAAA,IAAAC,EAAAC,EAAAC,EAAAjH,EAAAkH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA5I,IAAAuB,MAAA,SAAAsH,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA3E,MAAA,OACDwD,EAAmB,EACnBC,EAAmD,CAAC,EAClDC,GAAekB,EAAAA,EAAAA,MAEZnI,EAAI,EAAC,YAAEA,EAAIiH,GAAY,CAAAiB,EAAA3E,KAAA,gBAAA2E,EAAA3E,KAAA,GACJ6E,EAAAA,EAAAA,IAAepI,GAAE,OAArCkH,EAAWgB,EAAAjF,KACbkE,EAAuB,EAACC,EAAAzB,EACNuB,GAAWgB,EAAAhD,KAAA,GAAAkC,EAAA5F,IAAA,YAAA6F,EAAAD,EAAAzH,KAAAkD,KAAE,CAAFqF,EAAA3E,KAAA,SAAf,OAAP+D,EAAOD,EAAAtH,MAAAmI,EAAA3E,KAAA,IACG8E,EAAAA,EAAAA,IAAUrI,EAAGsH,GAAQ,QAAlCC,EAAIW,EAAAjF,KACJuE,EAAec,OAAOf,GACtBE,EAAaD,EAAapD,OAASkD,EAAQlD,OACjD2C,GAAoBU,EACpBN,GAAwBM,EAAW,QAAAS,EAAA3E,KAAA,iBAAA2E,EAAA3E,KAAA,iBAAA2E,EAAAhD,KAAA,GAAAgD,EAAAK,GAAAL,EAAA,UAAAd,EAAA9H,EAAA4I,EAAAK,IAAA,eAAAL,EAAAhD,KAAA,GAAAkC,EAAA7F,IAAA2G,EAAAzC,OAAA,YAE/BiC,EAAepB,EAAqBtG,GACpC2H,EAAkBD,EAAalB,IAChCQ,EAAwBpH,eAAe+H,KAC1CX,EAAwBW,GAAmB,CACzCa,SAAUd,EACVe,KAAM,IAGVzB,EAAwBU,EAAalB,KAAKiC,KAAOzB,EAAwBU,EAAalB,KAAKiC,KAAOtB,EAAqB,QAlBvFnH,IAAGkI,EAAA3E,KAAA,gBAwBrC,IAAWiD,KAHLoB,GAAYc,EAAAA,EAAAA,IAAa3B,GAE3Bc,EAAqC,CAAC,EACxBb,EACVU,EAAeV,EAAwBR,GAAKgC,SAC5CR,EAAmBhB,EAAwBR,GAAKiC,KACtDZ,EAAiBrB,GAAO,CACtBgC,SAAUd,EACVe,MAAMC,EAAAA,EAAAA,IAAaV,IAOtB,OAHKC,EAA8B,CAClCL,UAAAA,EACAC,iBAAAA,GACDK,EAAA9E,OAAA,SAEM6E,GAAM,yBAAAC,EAAA7C,OAAA,GAAAyB,EAAA,yBACdH,EAnID,eAAApH,EAAA,KAAAD,EAAAuH,UAAA,WAAA/B,SAAA,SAAAtF,EAAAK,GAAA,IAAAK,EAAAP,EAAAiH,MAAArH,EAAAD,GAAA,SAAAqJ,EAAAhJ,GAAA0G,EAAAnG,EAAAV,EAAAK,EAAA8I,EAAAC,EAAA,OAAAjJ,EAAA,UAAAiJ,EAAAjJ,GAAA0G,EAAAnG,EAAAV,EAAAK,EAAA8I,EAAAC,EAAA,QAAAjJ,EAAA,CAAAgJ,OAAA,OAmIChC,EAAAC,MAAA,KAAAC,UAAA,2UCnIDxH,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAO,KAAA,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAjB,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAS,MAAAP,EAAAiB,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAApB,EAAAD,EAAA,KAAAkB,EAAA,aAAAjB,GAAAiB,EAAA,SAAAjB,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAoB,EAAArB,EAAAD,EAAAE,EAAAG,GAAA,IAAAK,EAAAV,GAAAA,EAAAI,qBAAAmB,EAAAvB,EAAAuB,EAAAX,EAAAT,OAAAqB,OAAAd,EAAAN,WAAAU,EAAA,IAAAW,EAAApB,GAAA,WAAAE,EAAAK,EAAA,WAAAH,MAAAiB,EAAAzB,EAAAC,EAAAY,KAAAF,CAAA,UAAAe,EAAA1B,EAAAD,EAAAE,GAAA,WAAA0B,KAAA,SAAAC,IAAA5B,EAAA6B,KAAA9B,EAAAE,GAAA,OAAAD,GAAA,OAAA2B,KAAA,QAAAC,IAAA5B,EAAA,EAAAD,EAAAsB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAApC,OAAAqC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAAvC,GAAAG,EAAAyB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAE,EAAAN,EAAAjC,UAAAmB,EAAAnB,UAAAD,OAAAqB,OAAAc,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,SAAA,SAAA7C,GAAAkB,EAAAjB,EAAAD,GAAA,SAAAC,GAAA,YAAA6C,QAAA9C,EAAAC,EAAA,gBAAA8C,EAAA9C,EAAAD,GAAA,SAAAgD,EAAA9C,EAAAK,EAAAG,EAAAE,GAAA,IAAAE,EAAAa,EAAA1B,EAAAC,GAAAD,EAAAM,GAAA,aAAAO,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAP,MAAA,OAAAsB,GAAA,UAAAkB,EAAAlB,IAAA1B,EAAAyB,KAAAC,EAAA,WAAA/B,EAAAkD,QAAAnB,EAAAoB,SAAAC,MAAA,SAAAnD,GAAA+C,EAAA,OAAA/C,EAAAS,EAAAE,EAAA,aAAAX,GAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAZ,EAAAkD,QAAAnB,GAAAqB,MAAA,SAAAnD,GAAAe,EAAAP,MAAAR,EAAAS,EAAAM,EAAA,aAAAf,GAAA,OAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAA3B,EAAAK,EAAA,gBAAAE,MAAA,SAAAR,EAAAI,GAAA,SAAAgD,IAAA,WAAArD,GAAA,SAAAA,EAAAE,GAAA8C,EAAA/C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAAkD,KAAAC,EAAAA,GAAAA,GAAA,aAAA3B,EAAA1B,EAAAE,EAAAG,GAAA,IAAAE,EAAAwB,EAAA,gBAAArB,EAAAE,GAAA,GAAAL,IAAA0B,EAAA,MAAAqB,MAAA,mCAAA/C,IAAA2B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAAH,MAAAR,EAAAsD,MAAA,OAAAlD,EAAAmD,OAAA9C,EAAAL,EAAAwB,IAAAjB,IAAA,KAAAE,EAAAT,EAAAoD,SAAA,GAAA3C,EAAA,KAAAE,EAAA0C,EAAA5C,EAAAT,GAAA,GAAAW,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAX,EAAAmD,OAAAnD,EAAAsD,KAAAtD,EAAAuD,MAAAvD,EAAAwB,SAAA,aAAAxB,EAAAmD,OAAA,IAAAjD,IAAAwB,EAAA,MAAAxB,EAAA2B,EAAA7B,EAAAwB,IAAAxB,EAAAwD,kBAAAxD,EAAAwB,IAAA,gBAAAxB,EAAAmD,QAAAnD,EAAAyD,OAAA,SAAAzD,EAAAwB,KAAAtB,EAAA0B,EAAA,IAAAK,EAAAX,EAAA3B,EAAAE,EAAAG,GAAA,cAAAiC,EAAAV,KAAA,IAAArB,EAAAF,EAAAkD,KAAArB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAA1B,MAAA6B,EAAAT,IAAA0B,KAAAlD,EAAAkD,KAAA,WAAAjB,EAAAV,OAAArB,EAAA2B,EAAA7B,EAAAmD,OAAA,QAAAnD,EAAAwB,IAAAS,EAAAT,IAAA,YAAA6B,EAAA1D,EAAAE,GAAA,IAAAG,EAAAH,EAAAsD,OAAAjD,EAAAP,EAAAa,SAAAR,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAuD,SAAA,eAAApD,GAAAL,EAAAa,SAAA,SAAAX,EAAAsD,OAAA,SAAAtD,EAAA2B,IAAA5B,EAAAyD,EAAA1D,EAAAE,GAAA,UAAAA,EAAAsD,SAAA,WAAAnD,IAAAH,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA1D,EAAA,aAAA8B,EAAA,IAAAzB,EAAAiB,EAAApB,EAAAP,EAAAa,SAAAX,EAAA2B,KAAA,aAAAnB,EAAAkB,KAAA,OAAA1B,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAAnB,EAAAmB,IAAA3B,EAAAuD,SAAA,KAAAtB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAA2C,MAAArD,EAAAF,EAAAgE,YAAApD,EAAAH,MAAAP,EAAA+D,KAAAjE,EAAAkE,QAAA,WAAAhE,EAAAsD,SAAAtD,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,GAAAC,EAAAuD,SAAA,KAAAtB,GAAAvB,GAAAV,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA7D,EAAAuD,SAAA,KAAAtB,EAAA,UAAAgC,EAAAlE,GAAA,IAAAD,EAAA,CAAAoE,OAAAnE,EAAA,SAAAA,IAAAD,EAAAqE,SAAApE,EAAA,SAAAA,IAAAD,EAAAsE,WAAArE,EAAA,GAAAD,EAAAuE,SAAAtE,EAAA,SAAAuE,WAAAC,KAAAzE,EAAA,UAAA0E,EAAAzE,GAAA,IAAAD,EAAAC,EAAA0E,YAAA,GAAA3E,EAAA4B,KAAA,gBAAA5B,EAAA6B,IAAA5B,EAAA0E,WAAA3E,CAAA,UAAAyB,EAAAxB,GAAA,KAAAuE,WAAA,EAAAJ,OAAA,SAAAnE,EAAA4C,QAAAsB,EAAA,WAAAS,OAAA,YAAAlC,EAAA1C,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAY,GAAA,GAAAV,EAAA,OAAAA,EAAA4B,KAAA9B,GAAA,sBAAAA,EAAAiE,KAAA,OAAAjE,EAAA,IAAA6E,MAAA7E,EAAA8E,QAAA,KAAAvE,GAAA,EAAAG,EAAA,SAAAuD,IAAA,OAAA1D,EAAAP,EAAA8E,QAAA,GAAAzE,EAAAyB,KAAA9B,EAAAO,GAAA,OAAA0D,EAAAxD,MAAAT,EAAAO,GAAA0D,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,SAAAvD,EAAAuD,KAAAvD,CAAA,YAAAqD,UAAAd,EAAAjD,GAAA,2BAAAoC,EAAAhC,UAAAiC,EAAA9B,EAAAoC,EAAA,eAAAlC,MAAA4B,EAAAjB,cAAA,IAAAb,EAAA8B,EAAA,eAAA5B,MAAA2B,EAAAhB,cAAA,IAAAgB,EAAA2C,YAAA7D,EAAAmB,EAAArB,EAAA,qBAAAhB,EAAAgF,oBAAA,SAAA/E,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAgF,YAAA,QAAAjF,IAAAA,IAAAoC,GAAA,uBAAApC,EAAA+E,aAAA/E,EAAAkF,MAAA,EAAAlF,EAAAmF,KAAA,SAAAlF,GAAA,OAAAE,OAAAiF,eAAAjF,OAAAiF,eAAAnF,EAAAoC,IAAApC,EAAAoF,UAAAhD,EAAAnB,EAAAjB,EAAAe,EAAA,sBAAAf,EAAAG,UAAAD,OAAAqB,OAAAmB,GAAA1C,CAAA,EAAAD,EAAAsF,MAAA,SAAArF,GAAA,OAAAkD,QAAAlD,EAAA,EAAA2C,EAAAG,EAAA3C,WAAAc,EAAA6B,EAAA3C,UAAAU,GAAA,0BAAAd,EAAA+C,cAAAA,EAAA/C,EAAAuF,MAAA,SAAAtF,EAAAC,EAAAG,EAAAE,EAAAG,QAAA,IAAAA,IAAAA,EAAA8E,SAAA,IAAA5E,EAAA,IAAAmC,EAAAzB,EAAArB,EAAAC,EAAAG,EAAAE,GAAAG,GAAA,OAAAV,EAAAgF,oBAAA9E,GAAAU,EAAAA,EAAAqD,OAAAb,MAAA,SAAAnD,GAAA,OAAAA,EAAAsD,KAAAtD,EAAAQ,MAAAG,EAAAqD,MAAA,KAAArB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAA3C,EAAAyF,KAAA,SAAAxF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAAuE,KAAApE,GAAA,OAAAH,EAAAwF,UAAA,SAAAzB,IAAA,KAAA/D,EAAA4E,QAAA,KAAA7E,EAAAC,EAAAyF,MAAA,GAAA1F,KAAAD,EAAA,OAAAiE,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAAjE,EAAA0C,OAAAA,EAAAjB,EAAArB,UAAA,CAAA6E,YAAAxD,EAAAmD,MAAA,SAAA5E,GAAA,QAAA4F,KAAA,OAAA3B,KAAA,OAAAN,KAAA,KAAAC,MAAA3D,EAAA,KAAAsD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA3B,IAAA5B,EAAA,KAAAuE,WAAA3B,QAAA6B,IAAA1E,EAAA,QAAAE,KAAA,WAAAA,EAAA2F,OAAA,IAAAxF,EAAAyB,KAAA,KAAA5B,KAAA2E,OAAA3E,EAAA4F,MAAA,WAAA5F,GAAAD,EAAA,EAAA8F,KAAA,gBAAAxC,MAAA,MAAAtD,EAAA,KAAAuE,WAAA,GAAAG,WAAA,aAAA1E,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,YAAAmE,IAAA,EAAAnC,kBAAA,SAAA7D,GAAA,QAAAuD,KAAA,MAAAvD,EAAA,IAAAE,EAAA,cAAA+F,EAAA5F,EAAAE,GAAA,OAAAK,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAA7B,EAAAE,EAAA+D,KAAA5D,EAAAE,IAAAL,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,KAAAM,CAAA,SAAAA,EAAA,KAAAiE,WAAAM,OAAA,EAAAvE,GAAA,IAAAA,EAAA,KAAAG,EAAA,KAAA8D,WAAAjE,GAAAK,EAAAF,EAAAiE,WAAA,YAAAjE,EAAA0D,OAAA,OAAA6B,EAAA,UAAAvF,EAAA0D,QAAA,KAAAwB,KAAA,KAAA9E,EAAAT,EAAAyB,KAAApB,EAAA,YAAAM,EAAAX,EAAAyB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAA4E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,WAAAuB,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,SAAAxD,GAAA,QAAA8E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,YAAArD,EAAA,MAAAsC,MAAA,kDAAAsC,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,KAAAR,OAAA,SAAA7D,EAAAD,GAAA,QAAAE,EAAA,KAAAsE,WAAAM,OAAA,EAAA5E,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAAiE,WAAAtE,GAAA,GAAAK,EAAA6D,QAAA,KAAAwB,MAAAvF,EAAAyB,KAAAvB,EAAA,oBAAAqF,KAAArF,EAAA+D,WAAA,KAAA5D,EAAAH,EAAA,OAAAG,IAAA,UAAAT,GAAA,aAAAA,IAAAS,EAAA0D,QAAApE,GAAAA,GAAAU,EAAA4D,aAAA5D,EAAA,UAAAE,EAAAF,EAAAA,EAAAiE,WAAA,UAAA/D,EAAAgB,KAAA3B,EAAAW,EAAAiB,IAAA7B,EAAAU,GAAA,KAAA8C,OAAA,YAAAS,KAAAvD,EAAA4D,WAAAnC,GAAA,KAAA+D,SAAAtF,EAAA,EAAAsF,SAAA,SAAAjG,EAAAD,GAAA,aAAAC,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,gBAAA5B,EAAA2B,MAAA,aAAA3B,EAAA2B,KAAA,KAAAqC,KAAAhE,EAAA4B,IAAA,WAAA5B,EAAA2B,MAAA,KAAAoE,KAAA,KAAAnE,IAAA5B,EAAA4B,IAAA,KAAA2B,OAAA,cAAAS,KAAA,kBAAAhE,EAAA2B,MAAA5B,IAAA,KAAAiE,KAAAjE,GAAAmC,CAAA,EAAAgE,OAAA,SAAAlG,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAoE,aAAArE,EAAA,YAAAiG,SAAAhG,EAAAyE,WAAAzE,EAAAqE,UAAAG,EAAAxE,GAAAiC,CAAA,kBAAAlC,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAkE,SAAAnE,EAAA,KAAAI,EAAAH,EAAAyE,WAAA,aAAAtE,EAAAuB,KAAA,KAAArB,EAAAF,EAAAwB,IAAA6C,EAAAxE,EAAA,QAAAK,CAAA,QAAA+C,MAAA,0BAAA8C,cAAA,SAAApG,EAAAE,EAAAG,GAAA,YAAAoD,SAAA,CAAA5C,SAAA6B,EAAA1C,GAAAgE,WAAA9D,EAAAgE,QAAA7D,GAAA,cAAAmD,SAAA,KAAA3B,IAAA5B,GAAAkC,CAAA,GAAAnC,CAAA,UAAAuJ,EAAArJ,EAAAF,GAAA,gBAAAE,GAAA,GAAAoG,MAAAC,QAAArG,GAAA,OAAAA,CAAA,CAAAsJ,CAAAtJ,IAAA,SAAAA,EAAA8B,GAAA,IAAA/B,EAAA,MAAAC,EAAA,yBAAAS,QAAAT,EAAAS,OAAAE,WAAAX,EAAA,uBAAAD,EAAA,KAAAD,EAAAK,EAAAK,EAAAM,EAAAJ,EAAA,GAAAqB,GAAA,EAAA1B,GAAA,SAAAG,GAAAT,EAAAA,EAAA6B,KAAA5B,IAAA+D,KAAA,IAAAjC,EAAA,IAAA7B,OAAAF,KAAAA,EAAA,OAAAgC,GAAA,cAAAA,GAAAjC,EAAAU,EAAAoB,KAAA7B,IAAAsD,QAAA3C,EAAA6D,KAAAzE,EAAAS,OAAAG,EAAAkE,SAAA9C,GAAAC,GAAA,UAAA/B,GAAAK,GAAA,EAAAF,EAAAH,CAAA,iBAAA+B,GAAA,MAAAhC,EAAA,SAAAe,EAAAf,EAAA,SAAAE,OAAAa,KAAAA,GAAA,kBAAAT,EAAA,MAAAF,CAAA,SAAAO,CAAA,EAAA6I,CAAAvJ,EAAAF,IAAA4G,EAAA1G,EAAAF,IAAA,qBAAA+D,UAAA,6IAAA2F,EAAA,UAAA3C,EAAA1G,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAK,EAAAE,GAAA,QAAAJ,EAAAL,EAAAO,GAAAE,GAAAE,EAAAN,EAAAD,KAAA,OAAAJ,GAAA,YAAAL,EAAAK,EAAA,CAAAK,EAAA6C,KAAAtD,EAAAe,GAAAwE,QAAAtC,QAAAlC,GAAAoC,KAAAlD,EAAAK,EAAA,UAAAoJ,EAAAtJ,GAAA,sBAAAJ,EAAA,KAAAD,EAAAuH,UAAA,WAAA/B,SAAA,SAAAtF,EAAAK,GAAA,IAAAK,EAAAP,EAAAiH,MAAArH,EAAAD,GAAA,SAAAqJ,EAAAhJ,GAAA0G,EAAAnG,EAAAV,EAAAK,EAAA8I,EAAAC,EAAA,OAAAjJ,EAAA,UAAAiJ,EAAAjJ,GAAA0G,EAAAnG,EAAAV,EAAAK,EAAA8I,EAAAC,EAAA,QAAAjJ,EAAA,CAAAgJ,OAAA,gBAAAhD,EAAAnG,EAAAF,GAAA,IAAAC,EAAA,oBAAAU,QAAAT,EAAAS,OAAAE,WAAAX,EAAA,kBAAAD,EAAA,IAAAqG,MAAAC,QAAArG,KAAAD,EAAA2G,EAAA1G,KAAAF,GAAAE,GAAA,iBAAAA,EAAA4E,OAAA,CAAA7E,IAAAC,EAAAD,GAAA,IAAA4G,EAAA,EAAAC,EAAA,oBAAA5E,EAAA4E,EAAAzG,EAAA,kBAAAwG,GAAA3G,EAAA4E,OAAA,CAAAvB,MAAA,IAAAA,MAAA,EAAA9C,MAAAP,EAAA2G,KAAA,EAAA7G,EAAA,SAAAE,GAAA,MAAAA,CAAA,EAAA+B,EAAA6E,EAAA,WAAA/C,UAAA,6IAAAxD,EAAAK,GAAA,EAAAI,GAAA,SAAAkB,EAAA,WAAAjC,EAAAA,EAAA6B,KAAA5B,EAAA,EAAAG,EAAA,eAAAH,EAAAD,EAAAgE,OAAA,OAAArD,EAAAV,EAAAqD,KAAArD,CAAA,EAAAF,EAAA,SAAAE,GAAAc,GAAA,EAAAT,EAAAL,CAAA,EAAA+B,EAAA,eAAArB,GAAA,MAAAX,EAAA,QAAAA,EAAA,oBAAAe,EAAA,MAAAT,CAAA,aAAAqG,EAAA1G,EAAAU,GAAA,GAAAV,EAAA,qBAAAA,EAAA,OAAAsG,EAAAtG,EAAAU,GAAA,IAAAX,EAAA,GAAAwG,SAAA3E,KAAA5B,GAAA4F,MAAA,uBAAA7F,GAAAC,EAAA+E,cAAAhF,EAAAC,EAAA+E,YAAAC,MAAA,QAAAjF,GAAA,QAAAA,EAAAqG,MAAAI,KAAAxG,GAAA,cAAAD,GAAA,2CAAA0G,KAAA1G,GAAAuG,EAAAtG,EAAAU,QAAA,YAAA4F,EAAAtG,EAAAU,IAAA,MAAAA,GAAAA,EAAAV,EAAA4E,UAAAlE,EAAAV,EAAA4E,QAAA,QAAA9E,EAAA,EAAAK,EAAAiG,MAAA1F,GAAAZ,EAAAY,EAAAZ,IAAAK,EAAAL,GAAAE,EAAAF,GAAA,OAAAK,CAAA,CAiCA,IACIuJ,EAA6C,GAC7CC,EAA0C,GAC1CC,GAAiD,EACjDC,EAAyD,EAEzDC,EAAuE,CACzEC,KAAM,CAAC,EACPC,UAAW,EACXC,GAAI,IAGN,SAASC,EAAuBH,GAC9B,IAKuBlC,EALnBsC,EAAkB,EAClBC,EAAyB,EACzBC,EAAe,EACfC,EAAsB,EACtBC,EAAa,EAAE3C,EAAAzB,EACA4D,GAAI,IAAvB,IAAAnC,EAAA5F,MAAA6F,EAAAD,EAAAzH,KAAAkD,MAAyB,KAAd0E,EAAIF,EAAAtH,MACPiK,EAAezC,EAAK,GACpBiC,EAAYjC,EAAK,GACvBwC,GAAc,EACdJ,GAAmBK,EACnBH,GAAgBL,EAChBI,GAA0BK,KAAKC,IAAIF,EAAc,GACjDF,GAAuBG,KAAKC,IAAIV,EAAW,EAC7C,CAAC,OAAAW,GAAA/C,EAAA9H,EAAA6K,EAAA,SAAA/C,EAAA7F,GAAA,CAED,IAUwB6I,EAVlBC,EAAsBV,EAAkBI,EACxCO,EAAmBT,EAAeE,EAElCQ,EAAuBX,EAAyBG,EAAaE,KAAKC,IAAIG,EAAqB,GAC3FG,EAAoBV,EAAsBC,EAAaE,KAAKC,IAAII,EAAkB,GAElFG,EAAoBR,KAAKS,KAAKH,GAC9BI,EAAiBV,KAAKS,KAAKF,GAE7BI,EAAa,EAAEC,EAAAlF,EACC4D,GAAI,IAAxB,IAAAsB,EAAArJ,MAAA4I,EAAAS,EAAAlL,KAAAkD,MAA0B,KAAfiI,EAAKV,EAAArK,MAGd6K,IAFqBE,EAAM,GAEGT,IADZS,EAAM,GAC0CR,EACpE,CAAC,OAAAH,GAAAU,EAAAvL,EAAA6K,EAAA,SAAAU,EAAAtJ,GAAA,CAiBD,MAZyC,CACvCwJ,cAAe,CACbC,QAASX,EACTY,MAAOR,GAETjB,UAAW,CACTwB,QAASV,EACTW,MAAON,GAETvG,OAAQ2F,EACRmB,aAdFN,GAAcb,IAEoBU,EAAoBE,GAexD,CAEA,SAASQ,EAAyBC,EAAuCC,GACvE,IAAMC,EAAmBF,EAAYhH,OAASiH,EAAYjH,OAEpDmH,GAA6BH,EAAYL,cAAcC,QAAUI,EAAYhH,OAASiH,EAAYN,cAAcC,QAAUK,EAAYjH,QAAUkH,EAChJE,GAA0BJ,EAAY5B,UAAUwB,QAAUI,EAAYhH,OAASiH,EAAY7B,UAAUwB,QAAUK,EAAYjH,QAAUkH,EAmB3I,MAZyC,CACvCP,cAAe,CACbC,QAASO,EACTN,OAR4BQ,EAAAA,EAAAA,IAAuBL,EAAYL,cAAcC,QAASI,EAAYL,cAAcE,MAAOG,EAAYhH,OAAQiH,EAAYN,cAAcC,QAASK,EAAYN,cAAcE,MAAOI,EAAYjH,SAU7NoF,UAAW,CACTwB,QAASQ,EACTP,OAXyBQ,EAAAA,EAAAA,IAAuBL,EAAY5B,UAAUwB,QAASI,EAAY5B,UAAUyB,MAAOG,EAAYhH,OAAQiH,EAAY7B,UAAUwB,QAASK,EAAY7B,UAAUyB,MAAOI,EAAYjH,SAa1MA,OAAQkH,EACRJ,aAZwBQ,EAAAA,EAAAA,IAAwBN,EAAYL,cAAcC,QAASI,EAAY5B,UAAUwB,QAASI,EAAYL,cAAcE,MAAOG,EAAY5B,UAAUyB,MAAOG,EAAYhH,OAAQgH,EAAYF,YAAaG,EAAYN,cAAcC,QAASK,EAAY7B,UAAUwB,QAASK,EAAYN,cAAcE,MAAOI,EAAY7B,UAAUyB,MAAOI,EAAYjH,OAAQiH,EAAYH,aAejY,CAEO,SAAeS,EAAqBC,GAAA,OAAAC,EAAAjF,MAAC,KAADC,UAAA,CAqE1C,SAAAgF,IAAA,OAAAA,EAAA5C,EAAA5J,IAAAoF,MArEM,SAAAqC,EAAqCgF,GAA0B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAlM,EAAAmM,EAAAC,EAAAC,EAAAC,EAAA/E,EAAAgF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArD,EAAAsD,EAAAC,EAAAC,EAAA,OAAA1N,IAAAuB,MAAA,SAAAsH,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA3E,MAAA,OAKpE,GAJMwI,EAAM,IAAIiB,KACVhB,EAA2BD,EAAIkB,UACjChB,GAAc,GAEb7C,EAWH,IAVAA,GAAwC,EACxCF,EAA8B,GAC9BC,GAAkC+D,EAAAA,EAAAA,IAAmB,KACrD5D,EAAqC,CACnCC,KAAM,CAAC,EACPC,UAAWwC,EACXvC,GAAIN,GAENE,EAAiD,EAC3C6C,EAA8BJ,EAAa1H,OAAS,EACjDpE,EAAI,EAAGA,EAxG0B,GAwGSA,IAC3CmM,EAAsBlC,KAAKkD,MAAMlD,KAAKmD,SAAWlB,GACjDE,EAAaN,EAAaK,GAChCjD,EAA4BnF,KAAKqI,EAAWiB,QAIhDhB,EAAA1G,EACmBmG,GAAY,IAA/B,IAAAO,EAAA7K,MAAA8K,EAAAD,EAAA1M,KAAAkD,MAAW0E,EAAI+E,EAAAvM,MACPuN,EAAS/F,EAAK8F,OACdT,EAAU,KAAHW,OAAQD,GACjBpE,EAA4BsE,QAAQF,IAAW,IAC5ChE,EAAmCC,KAAK3J,eAAegN,KAC1DtD,EAAmCC,KAAKqD,GAAW,IAErDtD,EAAmCC,KAAKqD,GAAS7I,KAAK,CAAC0J,SAASlG,EAAKuE,cAAe7B,KAAKkD,OAAOnB,EAAmB1C,EAAmCE,WAAa,QACnKH,GAAkD,GAnHG,KAqHnD4C,GAAc,GAGnB,OAAA9B,GAAAkC,EAAA/M,EAAA6K,EAAA,SAAAkC,EAAA9K,GAAA,IAEG8H,EAAiD,IAAO,EAAC,CAAAnB,EAAA3E,KAAA,eAAA2E,EAAA3E,KAAA,GACrDmK,EAAAA,EAAAA,IAAU,EAAGvE,EAAiCwE,KAAKC,UAAUtE,IAAoC,WAGrG2C,EAAa,CAAF/D,EAAA3E,KAAA,SAAAkJ,EAAA9G,EACQuD,GAA2BhB,EAAAhD,KAAA,GAAAuH,EAAAjL,IAAA,YAAAkL,EAAAD,EAAA9M,KAAAkD,KAAE,CAAFqF,EAAA3E,KAAA,SAG5B,OAHT+J,EAAMZ,EAAA3M,MACT6M,EAAU,KAAHW,OAAQD,GACf/D,EAAOD,EAAmCC,KAAKqD,GACjDC,EAAY,CAAC,EAAC3E,EAAA3E,KAAA,IACS8E,EAAAA,EAAAA,IAAU,EAAGuE,GAAQ,QAc/C,OAdKE,EAAY5E,EAAAjF,OAEV8J,EAAqBY,KAAKE,MAAMf,GAEtCD,EAAUiB,MAAQ3C,EAAyB4B,EAAmBe,MAAOpE,EAAuBH,IAE5FsD,EAAUrD,UAAYuD,EAAmBvD,UACzCqD,EAAUpD,GAAK6D,IAGfT,EAAUiB,MAAQpE,EAAuBH,GAEzCsD,EAAUrD,UAAYwC,EACtBa,EAAUpD,GAAK6D,GAChBpF,EAAA3E,KAAA,IACKmK,EAAAA,EAAAA,IAAU,EAAGd,EAASe,KAAKC,UAAUf,IAAW,eAAA3E,EAAA3E,KAAA,IAChDwK,EAAAA,EAAAA,IAAa,EAAG5E,GAAgC,QAAAjB,EAAA3E,KAAA,iBAAA2E,EAAA3E,KAAA,iBAAA2E,EAAAhD,KAAA,GAAAgD,EAAAK,GAAAL,EAAA,UAAAuE,EAAAnN,EAAA4I,EAAAK,IAAA,eAAAL,EAAAhD,KAAA,GAAAuH,EAAAlL,IAAA2G,EAAAzC,OAAA,YAGxD2D,GAAwC,EAAM,yBAAAlB,EAAA7C,OAAA,GAAAyB,EAAA,2BAEjDF,MAAA,KAAAC,UAAA,CAqCM,SAAemH,IAAwB,OAAAC,EAAArH,MAAC,KAADC,UAAA,CAgB7C,SAAAoH,IAAA,OAAAA,EAAAhF,EAAA5J,IAAAoF,MAhBM,SAAAyJ,IAAA,IAAAnC,EAAAoC,EAAApJ,EAAAkD,EAAAmG,EAAAC,EAAA7H,EAAA8H,EAAAC,EAAA,OAAAlP,IAAAuB,MAAA,SAAA4N,GAAA,cAAAA,EAAAtJ,KAAAsJ,EAAAjL,MAAA,OAEsC,OADrCwI,GAAM,IAAIiB,MAAOC,UACjBkB,EAAapC,EAAM,MAAkByC,EAAAjL,KAAA,GACxB6E,EAAAA,EAAAA,IAAe,GAAE,OAA9BrD,EAAIyJ,EAAAvL,KACNgF,EAAqC,GAAEmG,EAAAzI,EACzBZ,GAAIyJ,EAAAtJ,KAAA,EAAAkJ,EAAA5M,IAAA,WAAA6M,EAAAD,EAAAzO,KAAAkD,KAAE,CAAF2L,EAAAjL,KAAA,SAAR,OAAHiD,EAAG6H,EAAAtO,MAAAyO,EAAAjL,KAAA,IACO8E,EAAAA,EAAAA,IAAU,EAAG7B,GAAI,SAA9B8H,EAAIE,EAAAvL,QAEFsL,EAASZ,KAAKE,MAAMS,GACJC,EAAO/E,UACT2E,GAClBlG,EAAOlE,KAAKwK,IAEf,QAAAC,EAAAjL,KAAA,gBAAAiL,EAAAjL,KAAA,iBAAAiL,EAAAtJ,KAAA,GAAAsJ,EAAAjG,GAAAiG,EAAA,SAAAJ,EAAA9O,EAAAkP,EAAAjG,IAAA,eAAAiG,EAAAtJ,KAAA,GAAAkJ,EAAA7M,IAAAiN,EAAA/I,OAAA,mBAAA+I,EAAApL,OAAA,SAEI6E,GAAM,yBAAAuG,EAAAnJ,OAAA,GAAA6I,EAAA,0BACdtH,MAAA,KAAAC,UAAA,CAEM,SAAe4H,IAAkC,OAAAC,EAAA9H,MAAC,KAADC,UAAA,CAYvD,SAAA6H,IAAA,OAAAA,EAAAzF,EAAA5J,IAAAoF,MAZM,SAAAkK,IAAA,IAAA5C,EAAAoC,EAAApJ,EAAA6J,EAAAC,EAAArI,EAAA8H,EAAAC,EAAA,OAAAlP,IAAAuB,MAAA,SAAAkO,GAAA,cAAAA,EAAA5J,KAAA4J,EAAAvL,MAAA,OAEsC,OADrCwI,GAAM,IAAIiB,MAAOC,UACjBkB,EAAapC,EAAM,MAAkB+C,EAAAvL,KAAA,GACxB6E,EAAAA,EAAAA,IAAe,GAAE,OAA9BrD,EAAI+J,EAAA7L,KAAA2L,EAAAjJ,EACQZ,GAAI+J,EAAA5J,KAAA,EAAA0J,EAAApN,IAAA,WAAAqN,EAAAD,EAAAjP,KAAAkD,KAAE,CAAFiM,EAAAvL,KAAA,SAAR,OAAHiD,EAAGqI,EAAA9O,MAAA+O,EAAAvL,KAAA,IACO8E,EAAAA,EAAAA,IAAU,EAAG7B,GAAI,QAEE,GAFhC8H,EAAIQ,EAAA7L,KACJsL,EAASZ,KAAKE,MAAMS,KACJC,EAAO/E,WACR2E,GAAU,CAAAW,EAAAvL,KAAA,gBAAAuL,EAAAvL,KAAA,IACvBwK,EAAAA,EAAAA,IAAa,EAAGvH,GAAI,QAAAsI,EAAAvL,KAAA,gBAAAuL,EAAAvL,KAAA,iBAAAuL,EAAA5J,KAAA,GAAA4J,EAAAvG,GAAAuG,EAAA,SAAAF,EAAAtP,EAAAwP,EAAAvG,IAAA,eAAAuG,EAAA5J,KAAA,GAAA0J,EAAArN,IAAAuN,EAAArJ,OAAA,6BAAAqJ,EAAAzJ,OAAA,GAAAsJ,EAAA,0BAG/B/H,MAAA,KAAAC,UAAA,CAED,IACIkI,EADAC,EAA+B,CAAC,EAIpC,GAA4B,oBAAjBC,aAA8B,CACvC,IAAMC,EAA4B,IAAID,aAAa,IAAIE,IAAI,qBAC3DJ,EAAOG,EAA0BH,MAC5BK,OACP,KAAO,CACL,IAAMC,EAAsB,IAAIC,OAAO,IAAIH,IAAI,oBAC/CJ,EAAOM,CACT,CAgBO,SAAeE,IAAa,OAAAC,EAAA5I,MAAC,KAADC,UAAA,CAiBnC,SAAA2I,IAFC,OAEDA,EAAAvG,EAAA5J,IAAAoF,MAjBO,SAAAgL,IAAA,IAAAC,EAAAC,EAAA1H,EAAA,OAAA5I,IAAAuB,MAAA,SAAAgP,GAAA,cAAAA,EAAA1K,KAAA0K,EAAArM,MAAA,cAAAqM,EAAArM,KAAA,EACoByK,IAA0B,OACb,OADhC0B,EAAUE,EAAA3M,KACV0M,GAASzC,EAAAA,EAAAA,IAAmB,KAAI0C,EAAArM,KAAA,EAEjB,IAAIuB,SAAQ,SAACtC,EAASqN,GACzCb,EAA6BW,GAAUnN,EAEvCuM,EAAKe,QAAU,SAAUxQ,GACvBuQ,EAAOvQ,EAAEyQ,QACX,EAEAhB,EAAKiB,YAAY,CAACN,EAAYC,GAChC,IAAE,OARU,OAAN1H,EAAM2H,EAAA3M,KAAA2M,EAAAxM,OAAA,SAUL6E,GAAM,wBAAA2H,EAAAvK,OAAA,GAAAoK,EAAA,MACd7I,MAAA,KAAAC,UAAA,CA5BDkI,EAAKkB,UAAY,SAAU3Q,GACzB,IAAA4Q,EAAArH,EAAyBvJ,EAAEiK,KAAI,GAAxBtB,EAAMiI,EAAA,GAAEP,EAAMO,EAAA,GACjBlB,EAA6BW,KAC/BX,EAA6BW,GAAQ1H,UAC9B+G,EAA6BW,GAExC,EAGAZ,EAAKe,QAAU,SAAUxQ,GACvB6Q,QAAQC,MAAM9Q,EAAEyQ,QAClB","sources":["webpack://bus/./src/data/analytics/storage-size.ts","webpack://bus/./src/data/analytics/update-rate/index.ts"],"sourcesContent":["import { convertBytes } from '../../tools/convert';\nimport { getStoreKey, getStoresLength, lfGetItem, lfListItemKeys } from '../storage/index';\n\ninterface StoreCategory {\n  name: string;\n  key: string;\n}\n\ninterface StoreSizeInBytes {\n  category: StoreCategory;\n  size: number;\n}\n\ntype CategorizedSizesInBytes = { [key: string]: StoreSizeInBytes };\n\nexport interface StoreSize {\n  category: StoreCategory;\n  size: number;\n}\n\nexport type CategorizedSizes = { [key: string]: StoreSize };\n\nexport interface StoreSizeStatistics {\n  categorizedSizes: CategorizedSizes;\n  totalSize: number;\n}\n\nfunction storeIndexToCategory(store: number): StoreCategory {\n  const storeKey = getStoreKey(store);\n  let name = '';\n  let key = '';\n  switch (storeKey) {\n    case 'cacheStore':\n      name = '快取';\n      key = 'cache';\n      break;\n    case 'settingsStore':\n      name = '設定';\n      key = 'settings';\n      break;\n    case 'dataUsageRecordsStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'updateRateDataStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'updateRateDataWriteAheadLogStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'busArrivalTimeRecordsStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'personalScheduleStore':\n      name = '個人化行程';\n      key = 'personalSchedule';\n      break;\n    case 'recentViewsStore':\n      name = '最近檢視';\n      key = 'recentViews';\n      break;\n    case 'folderListStore':\n      name = '資料夾';\n      key = 'folders';\n      break;\n    case 'folderContentIndexStore':\n      name = '資料夾';\n      key = 'folders';\n      break;\n    case 'folderContentStore':\n      name = '資料夾';\n      key = 'folders';\n      break;\n    default:\n      name = '其他';\n      key = 'others';\n      break;\n  }\n  const result = {\n    name,\n    key\n  };\n  return result;\n}\n\nexport async function getStoresSizeStatistics(): Promise<StoreSizeStatistics> {\n  let totalSizeInBytes = 0;\n  let categorizedSizesInBytes: CategorizedSizesInBytes = {};\n  const storesLength = getStoresLength();\n\n  for (let i = 0; i < storesLength; i++) {\n    const keysInStore = await lfListItemKeys(i);\n    let thisStoreSizeInBytes = 0;\n    for (const itemKey of keysInStore) {\n      const item = await lfGetItem(i, itemKey);\n      const itemInString = String(item);\n      const itemLength = itemInString.length + itemKey.length;\n      totalSizeInBytes += itemLength;\n      thisStoreSizeInBytes += itemLength;\n    }\n    const thisCategory = storeIndexToCategory(i);\n    const thisCategoryKey = thisCategory.key;\n    if (!categorizedSizesInBytes.hasOwnProperty(thisCategoryKey)) {\n      categorizedSizesInBytes[thisCategoryKey] = {\n        category: thisCategory,\n        size: 0\n      };\n    }\n    categorizedSizesInBytes[thisCategory.key].size = categorizedSizesInBytes[thisCategory.key].size + thisStoreSizeInBytes;\n  }\n\n  const totalSize = convertBytes(totalSizeInBytes);\n\n  let categorizedSizes: CategorizedSizes = {};\n  for (const key in categorizedSizesInBytes) {\n    const thisCategory = categorizedSizesInBytes[key].category;\n    const thisCategorySize = categorizedSizesInBytes[key].size;\n    categorizedSizes[key] = {\n      category: thisCategory,\n      size: convertBytes(thisCategorySize)\n    };\n  }\n\n  const result: StoreSizeStatistics = {\n    totalSize,\n    categorizedSizes\n  };\n\n  return result;\n}\n","import { generateIdentifier } from '../../../tools/index';\nimport { lfSetItem, lfGetItem, lfListItemKeys, lfRemoveItem } from '../../storage/index';\nimport { EstimateTime } from '../../apis/getEstimateTime/index';\nimport { mergePearsonCorrelation, mergeStandardDeviation } from '../../../tools/math';\n\nexport type UpdateRateData = [number, number]; // EstimateTime (seconds), timestamp (seconds)\n\nexport interface UpdateRateDataGroupStats {\n  estimate_time: {\n    average: number;\n    stdev: number;\n  };\n  timestamp: {\n    average: number;\n    stdev: number;\n  };\n  correlation: number;\n  length: number;\n}\n\nexport interface UpdateRateDataGroup {\n  // data: Array<UpdateRateData>;\n  stats: UpdateRateDataGroupStats;\n  // flattened: boolean;\n  timestamp: number;\n  id: number; // stop id\n}\n\nexport interface UpdateRateDataWriteAheadLogGroup {\n  data: Array<UpdateRateData>;\n  timestamp: number;\n  id: string;\n}\n\nconst updateRateData_sampleQuantity: number = 16;\nlet updateRateData_trackedStops: Array<number> = [];\nlet updateRateData_writeAheadLog_id: string = '';\nlet updateRateData_writeAheadLog_tracking: boolean = false;\nlet updateRateData_writeAheadLog_currentDataLength: number = 0;\nconst updateRateData_writeAheadLog_maxDataLength: number = 90;\nlet updateRateData_writeAheadLog_group: UpdateRateDataWriteAheadLogGroup = {\n  data: {},\n  timestamp: 0,\n  id: ''\n};\n\nfunction getUpdateRateDataStats(data: Array<UpdateRateData>): UpdateRateDataGroupStats {\n  let sumEstimateTime = 0;\n  let sumEstimateTimeSquared = 0;\n  let sumTimestamp = 0;\n  let sumTimestampSquared = 0;\n  let dataLength = 0;\n  for (const item of data) {\n    const estimateTime = item[0];\n    const timestamp = item[1];\n    dataLength += 1;\n    sumEstimateTime += estimateTime;\n    sumTimestamp += timestamp;\n    sumEstimateTimeSquared += Math.pow(estimateTime, 2);\n    sumTimestampSquared += Math.pow(timestamp, 2);\n  }\n\n  const averageEstimateTime = sumEstimateTime / dataLength;\n  const averageTimestamp = sumTimestamp / dataLength;\n\n  const estimateTimeVariance = sumEstimateTimeSquared / dataLength - Math.pow(averageEstimateTime, 2);\n  const timestampVariance = sumTimestampSquared / dataLength - Math.pow(averageTimestamp, 2);\n\n  const estimateTimeSTDEV = Math.sqrt(estimateTimeVariance);\n  const timestampSTDEV = Math.sqrt(timestampVariance);\n\n  let covariance = 0;\n  for (const item2 of data) {\n    const estimateTime = item2[0];\n    const timestamp = item2[1];\n    covariance += (estimateTime - averageEstimateTime) * (timestamp - averageTimestamp);\n  }\n  covariance /= dataLength;\n\n  const correlation = covariance / (estimateTimeSTDEV * timestampSTDEV);\n\n  const result: UpdateRateDataGroupStats = {\n    estimate_time: {\n      average: averageEstimateTime,\n      stdev: estimateTimeSTDEV\n    },\n    timestamp: {\n      average: averageTimestamp,\n      stdev: timestampSTDEV\n    },\n    length: dataLength,\n    correlation: correlation\n  };\n  return result;\n}\n\nfunction mergeUpdateRateDataStats(targetStats: UpdateRateDataGroupStats, sourceStats: UpdateRateDataGroupStats): UpdateRateDataGroupStats {\n  const mergedDataLength = targetStats.length + sourceStats.length;\n\n  const mergedAverageEstimateTime = (targetStats.estimate_time.average * targetStats.length + sourceStats.estimate_time.average * sourceStats.length) / mergedDataLength;\n  const mergedAverageTimestamp = (targetStats.timestamp.average * targetStats.length + sourceStats.timestamp.average * sourceStats.length) / mergedDataLength;\n\n  const mergedEstimateTimeSTDEV = mergeStandardDeviation(targetStats.estimate_time.average, targetStats.estimate_time.stdev, targetStats.length, sourceStats.estimate_time.average, sourceStats.estimate_time.stdev, sourceStats.length);\n  const mergedTimestampSTDEV = mergeStandardDeviation(targetStats.timestamp.average, targetStats.timestamp.stdev, targetStats.length, sourceStats.timestamp.average, sourceStats.timestamp.stdev, sourceStats.length);\n\n  const mergedCorrelation = mergePearsonCorrelation(targetStats.estimate_time.average, targetStats.timestamp.average, targetStats.estimate_time.stdev, targetStats.timestamp.stdev, targetStats.length, targetStats.correlation, sourceStats.estimate_time.average, sourceStats.timestamp.average, sourceStats.estimate_time.stdev, sourceStats.timestamp.stdev, sourceStats.length, sourceStats.correlation);\n\n  const result: UpdateRateDataGroupStats = {\n    estimate_time: {\n      average: mergedAverageEstimateTime,\n      stdev: mergedEstimateTimeSTDEV\n    },\n    timestamp: {\n      average: mergedAverageTimestamp,\n      stdev: mergedTimestampSTDEV\n    },\n    length: mergedDataLength,\n    correlation: mergedCorrelation\n  };\n  return result;\n}\n\nexport async function collectUpdateRateData(EstimateTime: EstimateTime) {\n  const now = new Date();\n  const currentTimestamp: number = now.getTime();\n  let needToReset = false;\n  // Initialize\n  if (!updateRateData_writeAheadLog_tracking) {\n    updateRateData_writeAheadLog_tracking = true;\n    updateRateData_trackedStops = [];\n    updateRateData_writeAheadLog_id = generateIdentifier('u');\n    updateRateData_writeAheadLog_group = {\n      data: {},\n      timestamp: currentTimestamp,\n      id: updateRateData_writeAheadLog_id\n    };\n    updateRateData_writeAheadLog_currentDataLength = 0;\n    const EstimateTimeLength1: number = EstimateTime.length - 1;\n    for (let i = 0; i < updateRateData_sampleQuantity; i++) {\n      const randomIndex: number = Math.floor(Math.random() * EstimateTimeLength1);\n      const randomItem = EstimateTime[randomIndex];\n      updateRateData_trackedStops.push(randomItem.StopID);\n    }\n  }\n\n  // Record EstimateTime\n  for (const item of EstimateTime) {\n    const stopID = item.StopID;\n    const stopKey = `s_${stopID}`;\n    if (updateRateData_trackedStops.indexOf(stopID) > -1) {\n      if (!updateRateData_writeAheadLog_group.data.hasOwnProperty(stopKey)) {\n        updateRateData_writeAheadLog_group.data[stopKey] = [];\n      }\n      updateRateData_writeAheadLog_group.data[stopKey].push([parseInt(item.EstimateTime), Math.floor((currentTimestamp - updateRateData_writeAheadLog_group.timestamp) / 1000)]);\n      updateRateData_writeAheadLog_currentDataLength += 1;\n      if (updateRateData_writeAheadLog_currentDataLength > updateRateData_writeAheadLog_maxDataLength) {\n        needToReset = true;\n      }\n    }\n  }\n\n  if (updateRateData_writeAheadLog_currentDataLength % 15 === 0) {\n    await lfSetItem(4, updateRateData_writeAheadLog_id, JSON.stringify(updateRateData_writeAheadLog_group));\n  }\n\n  if (needToReset) {\n    for (const stopID of updateRateData_trackedStops) {\n      const stopKey = `s_${stopID}`;\n      const data = updateRateData_writeAheadLog_group.data[stopKey];\n      let dataGroup = {} as UpdateRateDataGroup;\n      const existingData = await lfGetItem(3, stopKey);\n      if (existingData) {\n        const existingDataObject = JSON.parse(existingData) as UpdateRateDataGroup;\n        // dataGroup.data = existingDataObject.data.concat(data);\n        dataGroup.stats = mergeUpdateRateDataStats(existingDataObject.stats, getUpdateRateDataStats(data));\n        // dataGroup.flattened = existingDataObject.flattened;\n        dataGroup.timestamp = existingDataObject.timestamp;\n        dataGroup.id = stopID;\n      } else {\n        // dataGroup.data = data;\n        dataGroup.stats = getUpdateRateDataStats(data);\n        // dataGroup.flattened = false;\n        dataGroup.timestamp = currentTimestamp;\n        dataGroup.id = stopID;\n      }\n      await lfSetItem(3, stopKey, JSON.stringify(dataGroup));\n      await lfRemoveItem(4, updateRateData_writeAheadLog_id);\n    }\n\n    updateRateData_writeAheadLog_tracking = false;\n  }\n}\n\nexport async function recoverUpdateRateDataFromWriteAheadLog() {\n  const now = new Date().getTime();\n  const oneWeekAgo = now - 60 * 60 * 7 * 1000;\n  const keys = await lfListItemKeys(4);\n  for (const key of keys) {\n    const json = await lfGetItem(4, key);\n    const object = JSON.parse(json) as UpdateRateDataWriteAheadLogGroup;\n    const thisTimestamp = object.timestamp;\n    const thisID = object.id;\n    if (thisTimestamp > oneWeekAgo) {\n      for (const stopKey in object) {\n        const thisStopData = object[stopKey];\n        let dataGroup = {} as UpdateRateDataGroup;\n        const existingData = await lfGetItem(3, stopKey);\n        if (existingData) {\n          const existingDataObject = JSON.parse(existingData) as UpdateRateDataGroup;\n          // dataGroup.data = existingDataObject.data.concat(thisStopData);\n          dataGroup.stats = mergeUpdateRateDataStats(existingDataObject.stats, getUpdateRateDataStats(thisStopData));\n          // dataGroup.flattened = existingDataObject.flattened;\n          dataGroup.timestamp = existingDataObject.timestamp;\n          dataGroup.id = stopID;\n        } else {\n          // dataGroup.data = thisStopData;\n          dataGroup.stats = getUpdateRateDataStats(thisStopData);\n          // dataGroup.flattened = false;\n          dataGroup.timestamp = currentTimestamp;\n          dataGroup.id = stopID;\n        }\n        await lfSetItem(3, stopKey, JSON.stringify(dataGroup));\n        await lfRemoveItem(4, thisID);\n      }\n    }\n  }\n}\n\nexport async function listUpdateRateDataGroups(): Promise<Array<UpdateRateDataGroup>> {\n  const now = new Date().getTime();\n  const oneWeekAgo = now - 60 * 60 * 7 * 1000;\n  const keys = await lfListItemKeys(3);\n  let result: Array<UpdateRateDataGroup> = [];\n  for (const key of keys) {\n    const json = await lfGetItem(3, key);\n    if (json) {\n      const object = JSON.parse(json) as UpdateRateDataGroup;\n      const thisTimestamp = object.timestamp;\n      if (thisTimestamp > oneWeekAgo) {\n        result.push(object);\n      }\n    }\n  }\n  return result;\n}\n\nexport async function discardExpiredUpdateRateDataGroups() {\n  const now = new Date().getTime();\n  const oneWeekAgo = now - 60 * 60 * 7 * 1000;\n  const keys = await lfListItemKeys(3);\n  for (const key of keys) {\n    const json = await lfGetItem(3, key);\n    const object = JSON.parse(json) as UpdateRateDataGroup;\n    const thisTimestamp = object.timestamp;\n    if (thisTimestamp <= oneWeekAgo) {\n      await lfRemoveItem(3, key);\n    }\n  }\n}\n\nlet getUpdateRateWorkerResponses = {};\nvar port;\n\n// Check if SharedWorker is supported, and fall back to Worker if not\nif (typeof SharedWorker !== 'undefined') {\n  const getUpdateRateSharedWorker = new SharedWorker(new URL('./getUpdateRate_worker.ts', import.meta.url)); // Reusable shared worker\n  port = getUpdateRateSharedWorker.port; // Access the port for communication\n  port.start(); // Start the port (required by some browsers)\n} else {\n  const getUpdateRateWorker = new Worker(new URL('./getUpdateRate_worker.ts', import.meta.url)); // Fallback to standard worker\n  port = getUpdateRateWorker; // Use Worker directly for communication\n}\n\n// Handle messages from the worker\nport.onmessage = function (e) {\n  const [result, taskID] = e.data;\n  if (getUpdateRateWorkerResponses[taskID]) {\n    getUpdateRateWorkerResponses[taskID](result); // Resolve the correct promise\n    delete getUpdateRateWorkerResponses[taskID]; // Clean up the response handler\n  }\n};\n\n// Handle errors\nport.onerror = function (e) {\n  console.error(e.message);\n};\n\nexport async function getUpdateRate(): Promise<number> {\n  const dataGroups = await listUpdateRateDataGroups();\n  const taskID = generateIdentifier('t');\n\n  const result = await new Promise((resolve, reject) => {\n    getUpdateRateWorkerResponses[taskID] = resolve; // Store the resolve function for this taskID\n\n    port.onerror = function (e) {\n      reject(e.message);\n    };\n\n    port.postMessage([dataGroups, taskID]); // Send the task to the worker\n  });\n\n  return result;\n}\n\n/*\nexport async function getUpdateRateInTime(): Promise<string> {\n  let totalWeight: number = 0;\n  let totalAverageChange: number = 0;\n  let weightedAverageChange: number = 0;\n  const dataGroup = await listUpdateRateDataGroups();\n  for (const dataSet of dataGroup) {\n    const groups = splitDataByDelta(dataSet);\n    for (const group of groups) {\n      const firstColumn: Array<number> = group.map((item) => item[0]);\n      const secondColumn: Array<number> = group.map((item) => item[1]);\n      const rowCount: number = firstColumn.length;\n      let timeStampUponChanges: Array<number> = [];\n      for (let i = 1; i < rowCount; i++) {\n        const change: number = Math.abs(firstColumn[i] - firstColumn[i - 1]);\n        if (change > 0) {\n          timeStampUponChanges.push(secondColumn[i]);\n        }\n      }\n      const timeStampUponChangesLength: number = timeStampUponChanges.length;\n      let totalChange: number = 0;\n      let average: number = 0;\n      for (let i = 1; i < timeStampUponChangesLength; i++) {\n        const change: number = Math.abs(timeStampUponChanges[i] - timeStampUponChanges[i - 1]); // measured in seconds\n        totalChange += change;\n      }\n      average = totalChange / (timeStampUponChangesLength - 1);\n      totalAverageChange += isNaN(average) ? 0 : average * rowCount;\n      totalWeight += isNaN(average) ? 0 : rowCount;\n    }\n  }\n  weightedAverageChange = totalAverageChange / totalWeight;\n  return isNaN(weightedAverageChange) ? '!' : formatTime(weightedAverageChange, 0);\n}\n*/\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_createForOfIteratorHelper","Array","isArray","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_n","F","asyncGeneratorStep","storeIndexToCategory","store","key","getStoreKey","getStoresSizeStatistics","_getStoresSizeStatistics","apply","arguments","_callee","totalSizeInBytes","categorizedSizesInBytes","storesLength","keysInStore","thisStoreSizeInBytes","_iterator","_step","itemKey","item","itemInString","itemLength","thisCategory","thisCategoryKey","totalSize","categorizedSizes","_key","_thisCategory","thisCategorySize","result","_context","getStoresLength","lfListItemKeys","lfGetItem","String","t0","category","size","convertBytes","_next","_throw","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_asyncToGenerator","updateRateData_trackedStops","updateRateData_writeAheadLog_id","updateRateData_writeAheadLog_tracking","updateRateData_writeAheadLog_currentDataLength","updateRateData_writeAheadLog_group","data","timestamp","id","getUpdateRateDataStats","sumEstimateTime","sumEstimateTimeSquared","sumTimestamp","sumTimestampSquared","dataLength","estimateTime","Math","pow","err","_step2","averageEstimateTime","averageTimestamp","estimateTimeVariance","timestampVariance","estimateTimeSTDEV","sqrt","timestampSTDEV","covariance","_iterator2","item2","estimate_time","average","stdev","correlation","mergeUpdateRateDataStats","targetStats","sourceStats","mergedDataLength","mergedAverageEstimateTime","mergedAverageTimestamp","mergeStandardDeviation","mergePearsonCorrelation","collectUpdateRateData","_x","_collectUpdateRateData","EstimateTime","now","currentTimestamp","needToReset","EstimateTimeLength1","randomIndex","randomItem","_iterator3","_step3","_stopID2","_stopKey","_iterator4","_step4","_stopID","stopKey","dataGroup","existingData","existingDataObject","Date","getTime","generateIdentifier","floor","random","StopID","stopID","concat","indexOf","parseInt","lfSetItem","JSON","stringify","parse","stats","lfRemoveItem","listUpdateRateDataGroups","_listUpdateRateDataGroups","_callee3","oneWeekAgo","_iterator6","_step6","json","object","_context3","discardExpiredUpdateRateDataGroups","_discardExpiredUpdateRateDataGroups","_callee4","_iterator7","_step7","_context4","port","getUpdateRateWorkerResponses","SharedWorker","getUpdateRateSharedWorker","URL","start","getUpdateRateWorker","Worker","getUpdateRate","_getUpdateRate","_callee5","dataGroups","taskID","_context5","reject","onerror","message","postMessage","onmessage","_e$data","console","error"],"sourceRoot":""}