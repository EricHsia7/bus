{"version":3,"file":"98f4817341451e088c28.js","mappings":"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","sources":["webpack://bus/./src/interface/home/folders/index.ts","webpack://bus/./src/interface/icons/index.ts","webpack://bus/./src/interface/home/index.ts","webpack://bus/./src/interface/home/recent-views/index.ts"],"sourcesContent":["import { Folder, integratedFolder, integratedFolderContent, integratedFolders, integrateFolders } from '../../../data/folder/index';\nimport { GeneratedElement, querySize } from '../../index';\nimport { getIconHTML } from '../../icons/index';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../../data/settings/index';\nimport { getUpdateRate } from '../../../data/analytics/update-rate/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../../tools/query-selector';\nimport { booleanToString, compareThings, generateIdentifier } from '../../../tools/index';\nimport { DataReceivingProgressEvent, getDataReceivingProgress } from '../../../data/apis/loader';\nimport { promptMessage } from '../../prompt/index';\nimport { MaterialSymbols } from '../../icons/material-symbols-type';\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeHeadElement = elementQuerySelector(HomeField, '.css_home_head');\nconst HomeBodyElement = elementQuerySelector(HomeField, '.css_home_body');\nconst HomeFoldersElement = elementQuerySelector(HomeBodyElement, '.css_home_folders');\nconst HomeUpdateTimerElement = elementQuerySelector(HomeHeadElement, '.css_home_update_timer_box .css_home_update_timer');\n\nlet previousIntegration = {} as integratedFolders;\nlet previousSkeletonScreen: boolean = false;\nlet previousAnimation: boolean = true;\n\nlet foldersRefreshTimer_retryInterval: number = 10 * 1000;\nlet foldersRefreshTimer_baseInterval: number = 15 * 1000;\nlet foldersRefreshTimer_minInterval: number = 5 * 1000;\nlet foldersRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet foldersRefreshTimer_dynamic: boolean = true;\nlet foldersRefreshTimer_streaming: boolean = false;\nlet foldersRefreshTimer_lastUpdate: number = 0;\nlet foldersRefreshTimer_nextUpdate: number = 0;\nlet foldersRefreshTimer_refreshing: boolean = false;\nlet foldersRefreshTimer_currentRequestID: string = '';\nlet foldersRefreshTimer_currentProgress: number = -1;\nlet foldersRefreshTimer_targetProgress: number = -1;\nlet foldersRefreshTimer_streamStarted: boolean = false;\nlet foldersRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nfunction generateElementOfItem(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_folder_item');\n  element.setAttribute('type', 'stop');\n  element.innerHTML = /*html*/ `<div class=\"css_home_folder_item_icon\"></div><div class=\"css_home_folder_item_context\"></div><div class=\"css_home_folder_item_main\"></div><div class=\"css_home_folder_item_capsule\"><div class=\"css_home_folder_item_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div><div class=\"css_home_folder_item_button\">${getIconHTML('keyboard_arrow_right')}</div><div class=\"css_home_folder_item_capsule_separator\"></div></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction generateElementOfFolder(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_folder');\n  element.innerHTML = /*html*/ `<div class=\"css_home_folder_head\"><div class=\"css_home_folder_icon\"></div><div class=\"css_home_folder_name\"></div></div><div class=\"css_home_folder_content\"></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction updateUpdateTimer(): void {\n  const time = new Date().getTime();\n  foldersRefreshTimer_currentProgress = -1 * Math.min(1, Math.max(0, Math.abs(time - foldersRefreshTimer_lastUpdate) / foldersRefreshTimer_dynamicInterval));\n  HomeUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', foldersRefreshTimer_currentProgress.toString());\n  window.requestAnimationFrame(function () {\n    if (foldersRefreshTimer_streaming && !foldersRefreshTimer_refreshing) {\n      updateUpdateTimer();\n    }\n  });\n}\n\nfunction handleDataReceivingProgressUpdates(event: Event): void {\n  const CustomEvent = event as DataReceivingProgressEvent;\n  if (foldersRefreshTimer_refreshing) {\n    foldersRefreshTimer_currentProgress = -1 + getDataReceivingProgress(foldersRefreshTimer_currentRequestID);\n    HomeUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', foldersRefreshTimer_currentProgress.toString());\n  }\n  if (CustomEvent.detail.stage === 'end') {\n    document.removeEventListener(CustomEvent.detail.target, handleDataReceivingProgressUpdates);\n  }\n  console.log(CustomEvent.detail);\n}\n\nexport function setUpFolderFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const contentLength = Math.floor(FieldHeight / 50 / 3) + 2;\n  const folderQuantity = 3;\n\n  const folders: integratedFolders['folders'] = [];\n  for (let i = 0; i < folderQuantity; i++) {\n    const folder: integratedFolder = {\n      name: '',\n      icon: '',\n      id: '',\n      timestamp: 0,\n      content: [],\n      contentLength: contentLength\n    };\n\n    for (let j = 0; j < contentLength; j++) {\n      const folderContent: integratedFolderContent = {\n        type: 'stop',\n        id: 0,\n        timestamp: 0,\n        name: '',\n        status: {\n          code: 8,\n          text: '',\n          time: -6\n        },\n        direction: 0,\n        route: {\n          name: '',\n          endPoints: {\n            departure: '',\n            destination: ''\n          },\n          id: 0,\n          pathAttributeId: []\n        }\n      };\n      folder.content.push(folderContent);\n    }\n    folders.push(folder);\n  }\n\n  updateFoldersElement(\n    {\n      folders: folders,\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction updateFoldersElement(integration: integratedFolders, skeletonScreen: boolean, animation: boolean): void {\n  function updateItem(thisElement: HTMLElement, thisItem: integratedFolderContent, previousItem: integratedFolderContent | null) {\n    function updateType(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      thisElement.setAttribute('type', thisItem.type);\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const iconElement = elementQuerySelector(thisElement, '.css_home_folder_item_icon');\n      let icon = '' as MaterialSymbols;\n      switch (thisItem.type) {\n        case 'stop':\n          icon = 'location_on';\n          break;\n        case 'route':\n          icon = 'route';\n          break;\n        case 'bus':\n          icon = 'directions_bus';\n          break;\n        case 'empty':\n          icon = 'lightbulb';\n          break;\n        default:\n          icon = '';\n          break;\n      }\n      iconElement.innerHTML = getIconHTML(icon);\n    }\n\n    function updateStatus(thisElement: HTMLElement, thisItem: integratedFolderContent, animation: boolean): void {\n      if (thisItem.type === 'stop') {\n        const thisElementRect = thisElement.getBoundingClientRect();\n        const top = thisElementRect.top;\n        const left = thisElementRect.left;\n        const bottom = thisElementRect.bottom;\n        const right = thisElementRect.right;\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n\n        const thisItemStatusElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_status');\n        const nextSlideElement = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n        const currentSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n\n        nextSlideElement.setAttribute('code', thisItem.status.code.toString());\n        nextSlideElement.innerText = thisItem.status.text;\n\n        if (animation && bottom > 0 && top < windowHeight && right > 0 && left < windowWidth) {\n          currentSlideElement.addEventListener(\n            'animationend',\n            function () {\n              currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n              currentSlideElement.innerText = thisItem.status.text;\n              currentSlideElement.classList.remove('css_slide_fade_out');\n            },\n            { once: true }\n          );\n          currentSlideElement.classList.add('css_slide_fade_out');\n        } else {\n          currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n          currentSlideElement.innerText = thisItem.status.text;\n        }\n      }\n    }\n\n    function updateMain(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let main: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          main = thisItem.name;\n          break;\n        case 'route':\n          main = thisItem.name;\n          break;\n        case 'bus':\n          main = thisItem.busID;\n          break;\n        case 'empty':\n          main = '沒有內容';\n          break;\n        default:\n          main = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_main').innerText = main;\n    }\n\n    function updateContext(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let context: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          context = `${thisItem.route ? thisItem.route.name : ''} - 往${thisItem.route ? [thisItem.route.endPoints.destination, thisItem.route.endPoints.departure, ''][thisItem.direction ? thisItem.direction : 0] : ''}`;\n          break;\n        case 'route':\n          context = `${thisItem.endPoints.departure} \\u2194 ${thisItem.endPoints.destination}`;\n          break;\n        case 'bus':\n          // context = thisItem.currentRoute.name; // TODO: integration\n          break;\n        case 'empty':\n          context = '提示';\n          break;\n        default:\n          context = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_context').innerText = context;\n    }\n\n    function updateButton(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const buttonElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_button');\n      let onclick = '';\n      switch (thisItem.type) {\n        case 'stop':\n          onclick = `bus.route.openRoute(${thisItem.route.id}, [${thisItem.route.pathAttributeId.join(',')}])`;\n          break;\n        case 'route':\n          onclick = `bus.route.openRoute(${thisItem.id}, [${thisItem.pathAttributeId.join(',')}])`;\n          break;\n        case 'bus':\n          break;\n        case 'empty':\n          break;\n        default:\n          break;\n      }\n      buttonElement.setAttribute('onclick', onclick);\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateType(thisElement, thisItem);\n      updateIcon(thisElement, thisItem);\n      updateStatus(thisElement, thisItem, animation);\n      updateMain(thisElement, thisItem);\n      updateContext(thisElement, thisItem);\n      updateButton(thisElement, thisItem);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (!(thisItem.type === previousItem.type)) {\n        updateType(thisElement, thisItem);\n        updateIcon(thisElement, thisItem);\n        updateStatus(thisElement, thisItem, animation);\n        updateMain(thisElement, thisItem);\n        updateContext(thisElement, thisItem);\n        updateButton(thisElement, thisItem);\n        updateAnimation(thisElement, animation);\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      } else {\n        switch (thisItem.type) {\n          case 'stop':\n            if (!compareThings(previousItem.route, thisItem.route)) {\n              updateContext(thisElement, thisItem);\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            if (!(thisItem.status.code === previousItem.status.code) || !compareThings(previousItem.status.text, thisItem.status.text)) {\n              updateStatus(thisElement, thisItem, animation);\n            }\n            break;\n          case 'route':\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.endPoints, thisItem.endPoints)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'bus':\n            if (!compareThings(previousItem.currentRoute, thisItem.currentRoute)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.busID, thisItem.busID)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'empty':\n            if (!(thisItem.type === previousItem.type)) {\n              updateContext(thisElement, thisItem);\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          default:\n            break;\n        }\n        if (!(skeletonScreen === previousSkeletonScreen)) {\n          updateSkeletonScreen(thisElement, skeletonScreen);\n        }\n        if (!(animation === previousAnimation)) {\n          updateAnimation(thisElement, animation);\n        }\n      }\n    }\n  }\n\n  function updateFolder(thisElement: HTMLElement, thisFolder: Folder, previousFolder: Folder | null): void {\n    function updateName(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisNameElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_name');\n      thisNameElememt.innerText = thisFolder.name;\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisIconElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_icon');\n      thisIconElememt.innerHTML = getIconHTML(thisFolder.icon);\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousFolder === null) {\n      updateName(thisElement, thisFolder);\n      updateIcon(thisElement, thisFolder);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (!(thisFolder.name === previousFolder.name)) {\n        updateName(thisElement, thisFolder);\n      }\n      if (!(thisFolder.icon === previousFolder.icon)) {\n        updateIcon(thisElement, thisFolder);\n      }\n      if (!(animation === previousAnimation)) {\n        updateAnimation(thisElement, animation);\n      }\n      if (!(skeletonScreen === previousSkeletonScreen)) {\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      }\n    }\n  }\n\n  const folders = integration.folders;\n  const foldersLength = folders.length;\n\n  const currentFolderSeatQuantity = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder').length;\n  if (!(foldersLength === currentFolderSeatQuantity)) {\n    const capacity = currentFolderSeatQuantity - foldersLength;\n    if (capacity < 0) {\n      const fragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newFolderElement = generateElementOfFolder();\n        fragment.appendChild(newFolderElement.element);\n      }\n      HomeFoldersElement.append(fragment);\n    } else {\n      const FolderElements = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const folderIndex = currentFolderSeatQuantity - 1 - o;\n        FolderElements[folderIndex].remove();\n      }\n    }\n  }\n\n  const FolderElements = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n  for (let i = 0; i < foldersLength; i++) {\n    const thisFolder = folders[i];\n    const thisFolderContent = thisFolder.content;\n    const thisFolderContentLength = thisFolderContent.length;\n    const thisFolderElement = FolderElements[i];\n    const thisFolderContentElement = elementQuerySelector(thisFolderElement, '.css_home_folder_content');\n    const currentItemSeatQuantity = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item').length;\n    if (!(thisFolderContentLength === currentItemSeatQuantity)) {\n      const capacity = currentItemSeatQuantity - thisFolderContentLength;\n      if (capacity < 0) {\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newItemElement = generateElementOfItem();\n          thisFolderContentElement.appendChild(newItemElement.element);\n        }\n      } else {\n        const FolderContentItemElements = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item');\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          FolderContentItemElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  const FolderElements2 = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n  for (let i = 0; i < foldersLength; i++) {\n    const thisFolder = folders[i];\n    const thisFolderContent = thisFolder.content;\n    const thisFolderContentLength = thisFolderContent.length; // the actual length (including 'empty content')\n    const thisFolderElement = FolderElements2[i];\n    const thisFolderContentElement = elementQuerySelector(thisFolderElement, '.css_home_folder_content');\n    if (previousIntegration.hasOwnProperty('folders')) {\n      if (previousIntegration.folders[i]) {\n        const previousFolder = previousIntegration.folders[i];\n        updateFolder(thisFolderElement, thisFolder, previousFolder);\n      } else {\n        updateFolder(thisFolderElement, thisFolder, null);\n      }\n    } else {\n      updateFolder(thisFolderElement, thisFolder, null);\n    }\n\n    const thisFolderItemElements = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item');\n    for (let j = 0; j < thisFolderContentLength; j++) {\n      const thisElement = thisFolderItemElements[j];\n      const thisItem = thisFolderContent[j];\n      if (previousIntegration.hasOwnProperty('folders')) {\n        if (previousIntegration.folders[i]) {\n          if (previousIntegration.folders[i].content[j]) {\n            const previousItem = previousIntegration.folders[i].content[j];\n            updateItem(thisElement, thisItem, previousItem);\n          } else {\n            updateItem(thisElement, thisItem, null);\n          }\n        } else {\n          updateItem(thisElement, thisItem, null);\n        }\n      } else {\n        updateItem(thisElement, thisItem, null);\n      }\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshFolders() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  foldersRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  foldersRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  foldersRefreshTimer_refreshing = true;\n  foldersRefreshTimer_currentRequestID = generateIdentifier('r');\n  HomeUpdateTimerElement.setAttribute('refreshing', 'true');\n  document.addEventListener(foldersRefreshTimer_currentRequestID, handleDataReceivingProgressUpdates);\n  const integration = await integrateFolders(foldersRefreshTimer_currentRequestID);\n  updateFoldersElement(integration, false, playing_animation);\n  let updateRate = 0;\n  if (foldersRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  foldersRefreshTimer_lastUpdate = new Date().getTime();\n  if (foldersRefreshTimer_dynamic) {\n    foldersRefreshTimer_nextUpdate = Math.max(foldersRefreshTimer_lastUpdate + foldersRefreshTimer_minInterval, integration.dataUpdateTime + foldersRefreshTimer_baseInterval / updateRate);\n  } else {\n    foldersRefreshTimer_nextUpdate = foldersRefreshTimer_lastUpdate + foldersRefreshTimer_baseInterval;\n  }\n  foldersRefreshTimer_dynamicInterval = Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - foldersRefreshTimer_lastUpdate);\n  foldersRefreshTimer_refreshing = false;\n  HomeUpdateTimerElement.setAttribute('refreshing', 'false');\n  updateUpdateTimer();\n}\n\nasync function streamFolders() {\n  refreshFolders()\n    .then(function () {\n      if (foldersRefreshTimer_streaming) {\n        foldersRefreshTimer_timer = setTimeout(function () {\n          streamFolders();\n        }, Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (foldersRefreshTimer_streaming) {\n        promptMessage(`資料夾網路連線中斷，將在${foldersRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        foldersRefreshTimer_timer = setTimeout(function () {\n          streamFolders();\n        }, foldersRefreshTimer_retryInterval);\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function initializeFolders(): void {\n  setUpFolderFieldSkeletonScreen();\n  if (!foldersRefreshTimer_streaming) {\n    foldersRefreshTimer_streaming = true;\n    if (!foldersRefreshTimer_streamStarted) {\n      foldersRefreshTimer_streamStarted = true;\n      streamFolders();\n    } else {\n      refreshFolders();\n    }\n    foldersRefreshTimer_currentProgress = -1;\n    foldersRefreshTimer_targetProgress = -1;\n    updateUpdateTimer();\n  }\n}\n","import { MaterialSymbols } from './material-symbols-type';\n\nexport function getIconHTML(identifier: MaterialSymbols): string {\n  return /*html*/ `<span class=\"css_material_symbols_rounded\">${identifier}</span>`;\n}\n","import { getRoute } from '../../data/apis/getRoute/index';\nimport { getLocation } from '../../data/apis/getLocation/index';\nimport { setDataReceivingProgress, getDataReceivingProgress, deleteDataReceivingProgress, deleteDataUpdateTime } from '../../data/apis/loader';\nimport { documentQuerySelector } from '../../tools/query-selector';\nimport { getMaterialSymbols } from '../../data/apis/getMaterialSymbols/index';\nimport { getCarInfo } from '../../data/apis/getCarInfo/index';\n\nconst dataDownloadRequestID = 'downloadData';\nexport let dataDownloadCompleted = false;\nconst progressElement: HTMLElement = documentQuerySelector('.css_home_button_right svg#download-svg path[progress=\"progress\"]');\n\nfunction updateDownloadProgress() {\n  var pixels = (1 - getDataReceivingProgress(dataDownloadRequestID)) * 189;\n  progressElement.style.setProperty('--b-cssvar-stroke-dashoffset', `${pixels}px`);\n  window.requestAnimationFrame(function () {\n    if (dataDownloadCompleted === false) {\n      updateDownloadProgress();\n    }\n  });\n}\n\nfunction setCompleteStatus() {\n  if (dataDownloadCompleted) {\n    progressElement.style.setProperty('--b-cssvar-stroke-dashoffset', `${0}px`);\n    documentQuerySelector('.css_home_button_right').setAttribute('complete', 'true');\n    progressElement.removeEventListener('transitioncancel', setCompleteStatus);\n  }\n}\n\nexport async function downloadData() {\n  /*\n  setDataReceivingProgress(dataDownloadRequestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getRoute_1', 0, false);\n  */\n  // eliminate duplicate downloads in integrateFolders\n  setDataReceivingProgress(dataDownloadRequestID, 'getLocation_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getLocation_1', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getCarInfo_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getCarInfo_1', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getMaterialSymbols', 0, false);\n  updateDownloadProgress();\n  progressElement.addEventListener('transitioncancel', setCompleteStatus);\n  await getRoute(dataDownloadRequestID, true);\n  await getLocation(dataDownloadRequestID, 1);\n  await getCarInfo(dataDownloadRequestID, true);\n  await getMaterialSymbols(dataDownloadRequestID);\n  dataDownloadCompleted = true;\n  setCompleteStatus();\n  deleteDataReceivingProgress(dataDownloadRequestID);\n  deleteDataUpdateTime(dataDownloadRequestID);\n}\n","import { getUpdateRate } from '../../../data/analytics/update-rate/index';\nimport { integratedRecentView, integratedRecentViews, integrateRecentViews } from '../../../data/recent-views/index';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../../tools/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../../tools/query-selector';\nimport { getIconHTML } from '../../icons/index';\nimport { GeneratedElement, querySize } from '../../index';\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeBodyElement = elementQuerySelector(HomeField, '.css_home_body');\nconst RecentViewsField = elementQuerySelector(HomeBodyElement, '.css_home_recent_views');\n\nlet previousIntegration = {};\nlet previousAnimation: boolean = true;\nlet previousSkeletonScreen: boolean = false;\n\nlet recentViewsRefreshTimer_retryInterval: number = 10 * 1000;\nlet recentViewsRefreshTimer_baseInterval: number = 15 * 1000;\nlet recentViewsRefreshTimer_minInterval: number = 5 * 1000;\nlet recentViewsRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet recentViewsRefreshTimer_dynamic: boolean = true;\nlet recentViewsRefreshTimer_streaming: boolean = false;\nlet recentViewsRefreshTimer_lastUpdate: number = 0;\nlet recentViewsRefreshTimer_nextUpdate: number = 0;\nlet recentViewsRefreshTimer_refreshing: boolean = false;\nlet recentViewsRefreshTimer_currentRequestID: string = '';\nlet recentViewsRefreshTimer_streamStarted: boolean = false;\nlet recentViewsRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nfunction generateElementOfRecentViewItem(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_recent_views_item');\n  element.innerHTML = /*html*/ `<div class=\"css_home_recent_views_item_head\"><div class=\"css_home_recent_views_item_icon\"></div><div class=\"css_home_recent_views_item_title\"></div><div class=\"css_home_recent_views_item_time\"></div></div><div class=\"css_home_recent_views_item_name\"></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction updateRecentViewsField(Field: HTMLElement, integration: integratedRecentViews, skeletonScreen: boolean, animation: boolean) {\n  function updateItem(thisElement: HTMLElement, thisItem: integratedRecentView, previousItem: integratedRecentView): void {\n    function updateIcon(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const iconElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_icon');\n      let icon = '';\n      switch (thisItem.type) {\n        case 'route':\n          icon = 'route';\n          break;\n        case 'location':\n          icon = 'location_on';\n          break;\n        case 'bus':\n          icon = 'directions_bus';\n          break;\n        case 'empty':\n          icon = 'lightbulb';\n          break;\n        default:\n          break;\n      }\n      iconElement.innerHTML = getIconHTML(icon);\n    }\n\n    function updateTitle(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const titleElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_title');\n      let title = '';\n      switch (thisItem.type) {\n        case 'route':\n          title = '路線';\n          break;\n        case 'location':\n          title = '地點';\n          break;\n        case 'bus':\n          title = '公車';\n          break;\n        case 'empty':\n          title = '提示';\n          break;\n        default:\n          break;\n      }\n      titleElement.innerText = title;\n    }\n\n    function updateTime(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const timeElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_time');\n      timeElement.innerText = thisItem.time.relative;\n    }\n\n    function updateName(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const nameElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_name');\n      nameElement.innerText = thisItem.name;\n    }\n\n    function updateOnclick(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      let onclickScript = '';\n      switch (thisItem.type) {\n        case 'route':\n          onclickScript = `bus.route.openRoute(${thisItem.id}, [${thisItem.pid.join(',')}])`;\n          break;\n        case 'location':\n          onclickScript = `bus.location.openLocation('${thisItem.hash}')`;\n          break;\n        case 'bus':\n          onclickScript = `bus.bus.openBus(${thisItem.id})`;\n          break;\n        case 'empty':\n          onclickScript = '';\n          break;\n        default:\n          break;\n      }\n      thisElement.setAttribute('onclick', onclickScript);\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateIcon(thisElement, thisItem);\n      updateTitle(thisElement, thisItem);\n      updateTime(thisElement, thisItem);\n      updateName(thisElement, thisItem);\n      updateOnclick(thisElement, thisItem);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (!(thisItem.type === previousItem.type)) {\n        updateIcon(thisElement, thisItem);\n        updateTitle(thisElement, thisItem);\n        updateTime(thisElement, thisItem);\n        updateName(thisElement, thisItem);\n        updateOnclick(thisElement, thisItem);\n        updateAnimation(thisElement, animation);\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      } else {\n        switch (thisItem.type) {\n          case 'location':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (!(previousItem.time === thisItem.time)) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.hash, thisItem.hash)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'route':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (!(previousItem.time === thisItem.time)) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.id, thisItem.id) || !compareThings(previousItem.pid, thisItem.pid)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'bus':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (!(previousItem.time === thisItem.time)) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'empty':\n            if (!(previousItem.time === thisItem.time)) {\n              updateTime(thisElement, thisItem);\n            }\n            break;\n          default:\n            break;\n        }\n        if (!(animation === previousAnimation)) {\n          updateAnimation(thisElement, animation);\n        }\n        if (!(skeletonScreen === previousSkeletonScreen)) {\n          updateSkeletonScreen(thisElement, skeletonScreen);\n        }\n      }\n    }\n  }\n\n  /*\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  */\n\n  const itemQuantity = integration.itemQuantity;\n\n  // Field.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n\n  const currentItemSeatQuantity = elementQuerySelectorAll(Field, `.css_home_recent_views_content .css_home_recent_views_item`).length;\n  if (!(itemQuantity === currentItemSeatQuantity)) {\n    const capacity = currentItemSeatQuantity - itemQuantity;\n    if (capacity < 0) {\n      const RecentViewsContentElement = elementQuerySelector(Field, `.css_home_recent_views_content`);\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const thisRecentViewItemElement = generateElementOfRecentViewItem();\n        RecentViewsContentElement.appendChild(thisRecentViewItemElement.element);\n      }\n    } else {\n      const RecentViewsContentElement = elementQuerySelector(Field, `.css_home_recent_views_content`);\n      const RecentViewsItemElements = elementQuerySelectorAll(RecentViewsContentElement, `.css_home_recent_views_item`);\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const recentViewItemIndex = currentItemSeatQuantity - 1 - o;\n        RecentViewsItemElements[recentViewItemIndex].remove();\n      }\n    }\n  }\n\n  for (let i = 0; i < itemQuantity; i++) {\n    const thisElement = elementQuerySelectorAll(Field, `.css_home_recent_views_content .css_home_recent_views_item`)[i];\n    thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    const thisItem = integration.items[i];\n    if (previousIntegration.hasOwnProperty('items')) {\n      if (previousIntegration.items[i]) {\n        const previousItem = previousIntegration.items[i];\n        updateItem(thisElement, thisItem, previousItem);\n      } else {\n        updateItem(thisElement, thisItem, null);\n      }\n    } else {\n      updateItem(thisElement, thisItem, null);\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nexport function setUpRecentViewsFieldSkeletonScreen(Field: HTMLElement): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const defaultItemQuantity = Math.floor(WindowSize.height / 70 / 3) + 2;\n  const items: Array<integratedRecentView> = [];\n  for (let i = 0; i < defaultItemQuantity; i++) {\n    items.push({\n      type: 'route',\n      id: 0,\n      pid: [],\n      time: {\n        absolute: 0,\n        relative: ''\n      },\n      name: ''\n    });\n  }\n  updateRecentViewsField(\n    Field,\n    {\n      items: items,\n      itemQuantity: items.length,\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nasync function refreshRecentViews() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  recentViewsRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  recentViewsRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  recentViewsRefreshTimer_refreshing = true;\n  recentViewsRefreshTimer_currentRequestID = generateIdentifier('r');\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'true');\n  const integration = await integrateRecentViews(recentViewsRefreshTimer_currentRequestID);\n  updateRecentViewsField(RecentViewsField, integration, false, playing_animation);\n  let updateRate = 0;\n  if (recentViewsRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  recentViewsRefreshTimer_lastUpdate = new Date().getTime();\n  if (recentViewsRefreshTimer_dynamic) {\n    recentViewsRefreshTimer_nextUpdate = Math.max(recentViewsRefreshTimer_lastUpdate + recentViewsRefreshTimer_minInterval, integration.dataUpdateTime + recentViewsRefreshTimer_baseInterval / updateRate);\n  } else {\n    recentViewsRefreshTimer_nextUpdate = recentViewsRefreshTimer_lastUpdate + recentViewsRefreshTimer_baseInterval;\n  }\n  recentViewsRefreshTimer_dynamicInterval = Math.max(recentViewsRefreshTimer_minInterval, recentViewsRefreshTimer_nextUpdate - recentViewsRefreshTimer_lastUpdate);\n  recentViewsRefreshTimer_refreshing = false;\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'false');\n}\n\nasync function streamRecentViews() {\n  refreshRecentViews()\n    .then(function () {\n      if (recentViewsRefreshTimer_streaming) {\n        recentViewsRefreshTimer_timer = setTimeout(function () {\n          streamRecentViews();\n        }, Math.max(recentViewsRefreshTimer_minInterval, recentViewsRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        recentViewsRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (recentViewsRefreshTimer_streaming) {\n        recentViewsRefreshTimer_timer = setTimeout(function () {\n          streamRecentViews();\n        }, recentViewsRefreshTimer_retryInterval);\n      } else {\n        recentViewsRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function initializeRecentViews(): void {\n  setUpRecentViewsFieldSkeletonScreen(RecentViewsField);\n  if (!recentViewsRefreshTimer_streaming) {\n    recentViewsRefreshTimer_streaming = true;\n    if (!recentViewsRefreshTimer_streamStarted) {\n      recentViewsRefreshTimer_streamStarted = true;\n      streamRecentViews();\n    } else {\n      refreshRecentViews();\n    }\n  }\n}\n"],"names":["HomeField","documentQuerySelector","HomeHeadElement","elementQuerySelector","HomeBodyElement","HomeFoldersElement","HomeUpdateTimerElement","previousIntegration","previousSkeletonScreen","previousAnimation","foldersRefreshTimer_baseInterval","foldersRefreshTimer_minInterval","foldersRefreshTimer_dynamicInterval","foldersRefreshTimer_dynamic","foldersRefreshTimer_streaming","foldersRefreshTimer_lastUpdate","foldersRefreshTimer_nextUpdate","foldersRefreshTimer_refreshing","foldersRefreshTimer_currentRequestID","foldersRefreshTimer_currentProgress","foldersRefreshTimer_streamStarted","generateElementOfItem","element","document","createElement","classList","add","setAttribute","innerHTML","getIconHTML","id","updateUpdateTimer","time","Date","getTime","Math","min","max","abs","style","setProperty","toString","window","requestAnimationFrame","handleDataReceivingProgressUpdates","event","CustomEvent","getDataReceivingProgress","detail","stage","removeEventListener","target","console","log","setUpFolderFieldSkeletonScreen","playing_animation","getSettingOptionValue","WindowSize","querySize","FieldHeight","width","height","contentLength","floor","folders","i","folder","name","icon","timestamp","content","j","push","type","status","code","text","direction","route","endPoints","departure","destination","pathAttributeId","updateFoldersElement","dataUpdateTime","integration","skeletonScreen","animation","updateItem","thisElement","thisItem","previousItem","updateType","updateIcon","iconElement","updateStatus","thisElementRect","getBoundingClientRect","top","left","bottom","right","windowWidth","innerWidth","windowHeight","innerHeight","thisItemStatusElement","nextSlideElement","currentSlideElement","innerText","addEventListener","remove","once","updateMain","main","busID","updateContext","context","updateButton","buttonElement","onclick","join","updateAnimation","booleanToString","updateSkeletonScreen","compareThings","currentRoute","updateFolder","thisFolder","previousFolder","updateName","thisHeadElement","foldersLength","length","currentFolderSeatQuantity","elementQuerySelectorAll","capacity","fragment","DocumentFragment","o","newFolderElement","appendChild","append","FolderElements","thisFolderContentLength","thisFolderElement","thisFolderContentElement","currentItemSeatQuantity","newItemElement","FolderContentItemElements","FolderElements2","thisFolderContent","hasOwnProperty","thisFolderItemElements","refreshFolders","_refreshFolders","apply","arguments","_asyncToGenerator","refresh_interval_setting","dynamic","baseInterval","generateIdentifier","integrateFolders","updateRate","getUpdateRate","streamFolders","_streamFolders","then","setTimeout","err","error","promptMessage","initializeFolders","identifier","dataDownloadRequestID","dataDownloadCompleted","progressElement","updateDownloadProgress","pixels","setCompleteStatus","downloadData","_downloadData","setDataReceivingProgress","getRoute","getLocation","getCarInfo","getMaterialSymbols","deleteDataReceivingProgress","deleteDataUpdateTime","RecentViewsField","recentViewsRefreshTimer_baseInterval","recentViewsRefreshTimer_minInterval","recentViewsRefreshTimer_dynamic","recentViewsRefreshTimer_streaming","recentViewsRefreshTimer_lastUpdate","recentViewsRefreshTimer_nextUpdate","recentViewsRefreshTimer_currentRequestID","recentViewsRefreshTimer_streamStarted","updateRecentViewsField","Field","updateTitle","titleElement","title","updateTime","relative","updateOnclick","onclickScript","pid","hash","itemQuantity","RecentViewsContentElement","thisRecentViewItemElement","RecentViewsItemElements","items","setUpRecentViewsFieldSkeletonScreen","defaultItemQuantity","absolute","refreshRecentViews","_refreshRecentViews","integrateRecentViews","streamRecentViews","_streamRecentViews","initializeRecentViews"],"sourceRoot":""}