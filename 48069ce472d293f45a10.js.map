{"version":3,"file":"48069ce472d293f45a10.js","mappings":"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","sources":["webpack://bus/./node_modules/qrcode/lib/core/mask-pattern.js","webpack://bus/./node_modules/qrcode/lib/core/alphanumeric-data.js","webpack://bus/./node_modules/qrcode/lib/core/galois-field.js","webpack://bus/./node_modules/qrcode/lib/core/format-info.js","webpack://bus/./node_modules/qrcode/lib/core/kanji-data.js","webpack://bus/./node_modules/qrcode/lib/core/byte-data.js","webpack://bus/./node_modules/dijkstrajs/dijkstra.js","webpack://bus/./node_modules/qrcode/lib/core/alignment-pattern.js","webpack://bus/./node_modules/qrcode/lib/core/error-correction-code.js","webpack://bus/./node_modules/qrcode/lib/core/finder-pattern.js","webpack://bus/./node_modules/qrcode/lib/core/bit-matrix.js","webpack://bus/./node_modules/qrcode/lib/core/bit-buffer.js","webpack://bus/./node_modules/qrcode/lib/core/error-correction-level.js"],"sourcesContent":["/**\n * Data mask pattern reference\n * @type {Object}\n */\nexports.Patterns = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n}\n\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */\nconst PenaltyScores = {\n  N1: 3,\n  N2: 3,\n  N3: 40,\n  N4: 10\n}\n\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */\nexports.isValid = function isValid (mask) {\n  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7\n}\n\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */\nexports.from = function from (value) {\n  return exports.isValid(value) ? parseInt(value, 10) : undefined\n}\n\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/\nexports.getPenaltyN1 = function getPenaltyN1 (data) {\n  const size = data.size\n  let points = 0\n  let sameCountCol = 0\n  let sameCountRow = 0\n  let lastCol = null\n  let lastRow = null\n\n  for (let row = 0; row < size; row++) {\n    sameCountCol = sameCountRow = 0\n    lastCol = lastRow = null\n\n    for (let col = 0; col < size; col++) {\n      let module = data.get(row, col)\n      if (module === lastCol) {\n        sameCountCol++\n      } else {\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n        lastCol = module\n        sameCountCol = 1\n      }\n\n      module = data.get(col, row)\n      if (module === lastRow) {\n        sameCountRow++\n      } else {\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n        lastRow = module\n        sameCountRow = 1\n      }\n    }\n\n    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n  }\n\n  return points\n}\n\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */\nexports.getPenaltyN2 = function getPenaltyN2 (data) {\n  const size = data.size\n  let points = 0\n\n  for (let row = 0; row < size - 1; row++) {\n    for (let col = 0; col < size - 1; col++) {\n      const last = data.get(row, col) +\n        data.get(row, col + 1) +\n        data.get(row + 1, col) +\n        data.get(row + 1, col + 1)\n\n      if (last === 4 || last === 0) points++\n    }\n  }\n\n  return points * PenaltyScores.N2\n}\n\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */\nexports.getPenaltyN3 = function getPenaltyN3 (data) {\n  const size = data.size\n  let points = 0\n  let bitsCol = 0\n  let bitsRow = 0\n\n  for (let row = 0; row < size; row++) {\n    bitsCol = bitsRow = 0\n    for (let col = 0; col < size; col++) {\n      bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col)\n      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++\n\n      bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row)\n      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++\n    }\n  }\n\n  return points * PenaltyScores.N3\n}\n\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */\nexports.getPenaltyN4 = function getPenaltyN4 (data) {\n  let darkCount = 0\n  const modulesCount = data.data.length\n\n  for (let i = 0; i < modulesCount; i++) darkCount += data.data[i]\n\n  const k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10)\n\n  return k * PenaltyScores.N4\n}\n\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */\nfunction getMaskAt (maskPattern, i, j) {\n  switch (maskPattern) {\n    case exports.Patterns.PATTERN000: return (i + j) % 2 === 0\n    case exports.Patterns.PATTERN001: return i % 2 === 0\n    case exports.Patterns.PATTERN010: return j % 3 === 0\n    case exports.Patterns.PATTERN011: return (i + j) % 3 === 0\n    case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0\n    case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0\n    case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0\n    case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0\n\n    default: throw new Error('bad maskPattern:' + maskPattern)\n  }\n}\n\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */\nexports.applyMask = function applyMask (pattern, data) {\n  const size = data.size\n\n  for (let col = 0; col < size; col++) {\n    for (let row = 0; row < size; row++) {\n      if (data.isReserved(row, col)) continue\n      data.xor(row, col, getMaskAt(pattern, row, col))\n    }\n  }\n}\n\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */\nexports.getBestMask = function getBestMask (data, setupFormatFunc) {\n  const numPatterns = Object.keys(exports.Patterns).length\n  let bestPattern = 0\n  let lowerPenalty = Infinity\n\n  for (let p = 0; p < numPatterns; p++) {\n    setupFormatFunc(p)\n    exports.applyMask(p, data)\n\n    // Calculate penalty\n    const penalty =\n      exports.getPenaltyN1(data) +\n      exports.getPenaltyN2(data) +\n      exports.getPenaltyN3(data) +\n      exports.getPenaltyN4(data)\n\n    // Undo previously applied mask\n    exports.applyMask(p, data)\n\n    if (penalty < lowerPenalty) {\n      lowerPenalty = penalty\n      bestPattern = p\n    }\n  }\n\n  return bestPattern\n}\n","const Mode = require('./mode')\n\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */\nconst ALPHA_NUM_CHARS = [\n  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  ' ', '$', '%', '*', '+', '-', '.', '/', ':'\n]\n\nfunction AlphanumericData (data) {\n  this.mode = Mode.ALPHANUMERIC\n  this.data = data\n}\n\nAlphanumericData.getBitsLength = function getBitsLength (length) {\n  return 11 * Math.floor(length / 2) + 6 * (length % 2)\n}\n\nAlphanumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nAlphanumericData.prototype.getBitsLength = function getBitsLength () {\n  return AlphanumericData.getBitsLength(this.data.length)\n}\n\nAlphanumericData.prototype.write = function write (bitBuffer) {\n  let i\n\n  // Input data characters are divided into groups of two characters\n  // and encoded as 11-bit binary codes.\n  for (i = 0; i + 2 <= this.data.length; i += 2) {\n    // The character value of the first character is multiplied by 45\n    let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45\n\n    // The character value of the second digit is added to the product\n    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1])\n\n    // The sum is then stored as 11-bit binary number\n    bitBuffer.put(value, 11)\n  }\n\n  // If the number of input data characters is not a multiple of two,\n  // the character value of the final character is encoded as a 6-bit binary number.\n  if (this.data.length % 2) {\n    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6)\n  }\n}\n\nmodule.exports = AlphanumericData\n","const EXP_TABLE = new Uint8Array(512)\nconst LOG_TABLE = new Uint8Array(256)\n/**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */\n;(function initTables () {\n  let x = 1\n  for (let i = 0; i < 255; i++) {\n    EXP_TABLE[i] = x\n    LOG_TABLE[x] = i\n\n    x <<= 1 // multiply by 2\n\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n    if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)\n      x ^= 0x11D\n    }\n  }\n\n  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\n  // two GF numbers, no more).\n  // @see {@link mul}\n  for (let i = 255; i < 512; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 255]\n  }\n}())\n\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.log = function log (n) {\n  if (n < 1) throw new Error('log(' + n + ')')\n  return LOG_TABLE[n]\n}\n\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.exp = function exp (n) {\n  return EXP_TABLE[n]\n}\n\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */\nexports.mul = function mul (x, y) {\n  if (x === 0 || y === 0) return 0\n\n  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n  // @see {@link initTables}\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]\n}\n","const Utils = require('./utils')\n\nconst G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)\nconst G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)\nconst G15_BCH = Utils.getBCHDigit(G15)\n\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */\nexports.getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {\n  const data = ((errorCorrectionLevel.bit << 3) | mask)\n  let d = data << 10\n\n  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {\n    d ^= (G15 << (Utils.getBCHDigit(d) - G15_BCH))\n  }\n\n  // xor final data with mask pattern in order to ensure that\n  // no combination of Error Correction Level and data mask pattern\n  // will result in an all-zero data string\n  return ((data << 10) | d) ^ G15_MASK\n}\n","const Mode = require('./mode')\nconst Utils = require('./utils')\n\nfunction KanjiData (data) {\n  this.mode = Mode.KANJI\n  this.data = data\n}\n\nKanjiData.getBitsLength = function getBitsLength (length) {\n  return length * 13\n}\n\nKanjiData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nKanjiData.prototype.getBitsLength = function getBitsLength () {\n  return KanjiData.getBitsLength(this.data.length)\n}\n\nKanjiData.prototype.write = function (bitBuffer) {\n  let i\n\n  // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n  // These byte values are shifted from the JIS X 0208 values.\n  // JIS X 0208 gives details of the shift coded representation.\n  for (i = 0; i < this.data.length; i++) {\n    let value = Utils.toSJIS(this.data[i])\n\n    // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n    if (value >= 0x8140 && value <= 0x9FFC) {\n      // Subtract 0x8140 from Shift JIS value\n      value -= 0x8140\n\n    // For characters with Shift JIS values from 0xE040 to 0xEBBF\n    } else if (value >= 0xE040 && value <= 0xEBBF) {\n      // Subtract 0xC140 from Shift JIS value\n      value -= 0xC140\n    } else {\n      throw new Error(\n        'Invalid SJIS character: ' + this.data[i] + '\\n' +\n        'Make sure your charset is UTF-8')\n    }\n\n    // Multiply most significant byte of result by 0xC0\n    // and add least significant byte to product\n    value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff)\n\n    // Convert result to a 13-bit binary string\n    bitBuffer.put(value, 13)\n  }\n}\n\nmodule.exports = KanjiData\n","const Mode = require('./mode')\n\nfunction ByteData (data) {\n  this.mode = Mode.BYTE\n  if (typeof (data) === 'string') {\n    this.data = new TextEncoder().encode(data)\n  } else {\n    this.data = new Uint8Array(data)\n  }\n}\n\nByteData.getBitsLength = function getBitsLength (length) {\n  return length * 8\n}\n\nByteData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nByteData.prototype.getBitsLength = function getBitsLength () {\n  return ByteData.getBitsLength(this.data.length)\n}\n\nByteData.prototype.write = function (bitBuffer) {\n  for (let i = 0, l = this.data.length; i < l; i++) {\n    bitBuffer.put(this.data[i], 8)\n  }\n}\n\nmodule.exports = ByteData\n","'use strict';\n\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nvar dijkstra = {\n  single_source_shortest_paths: function(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {};\n\n    // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n    var costs = {};\n    costs[s] = 0;\n\n    // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n\n    var closest,\n        u, v,\n        cost_of_s_to_u,\n        adjacent_nodes,\n        cost_of_e,\n        cost_of_s_to_u_plus_cost_of_e,\n        cost_of_s_to_v,\n        first_visit;\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost;\n\n      // Get nodes adjacent to u...\n      adjacent_nodes = graph[u] || {};\n\n      // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v];\n\n          // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n          // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n          cost_of_s_to_v = costs[v];\n          first_visit = (typeof costs[v] === 'undefined');\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n    nodes.reverse();\n    return nodes;\n  },\n\n  find_path: function(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(\n      predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {value: value, cost: cost};\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n};\n\n\n// node.js module exports\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}\n","/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\n\nconst getSymbolSize = require('./utils').getSymbolSize\n\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */\nexports.getRowColCoords = function getRowColCoords (version) {\n  if (version === 1) return []\n\n  const posCount = Math.floor(version / 7) + 2\n  const size = getSymbolSize(version)\n  const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2\n  const positions = [size - 7] // Last coord is always (size - 7)\n\n  for (let i = 1; i < posCount - 1; i++) {\n    positions[i] = positions[i - 1] - intervals\n  }\n\n  positions.push(6) // First coord is always 6\n\n  return positions.reverse()\n}\n\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * let pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  const coords = []\n  const pos = exports.getRowColCoords(version)\n  const posLength = pos.length\n\n  for (let i = 0; i < posLength; i++) {\n    for (let j = 0; j < posLength; j++) {\n      // Skip if position is occupied by finder patterns\n      if ((i === 0 && j === 0) || // top-left\n          (i === 0 && j === posLength - 1) || // bottom-left\n          (i === posLength - 1 && j === 0)) { // top-right\n        continue\n      }\n\n      coords.push([pos[i], pos[j]])\n    }\n  }\n\n  return coords\n}\n","const ECLevel = require('./error-correction-level')\r\n\r\nconst EC_BLOCKS_TABLE = [\r\n// L  M  Q  H\r\n  1, 1, 1, 1,\r\n  1, 1, 1, 1,\r\n  1, 1, 2, 2,\r\n  1, 2, 2, 4,\r\n  1, 2, 4, 4,\r\n  2, 4, 4, 4,\r\n  2, 4, 6, 5,\r\n  2, 4, 6, 6,\r\n  2, 5, 8, 8,\r\n  4, 5, 8, 8,\r\n  4, 5, 8, 11,\r\n  4, 8, 10, 11,\r\n  4, 9, 12, 16,\r\n  4, 9, 16, 16,\r\n  6, 10, 12, 18,\r\n  6, 10, 17, 16,\r\n  6, 11, 16, 19,\r\n  6, 13, 18, 21,\r\n  7, 14, 21, 25,\r\n  8, 16, 20, 25,\r\n  8, 17, 23, 25,\r\n  9, 17, 23, 34,\r\n  9, 18, 25, 30,\r\n  10, 20, 27, 32,\r\n  12, 21, 29, 35,\r\n  12, 23, 34, 37,\r\n  12, 25, 34, 40,\r\n  13, 26, 35, 42,\r\n  14, 28, 38, 45,\r\n  15, 29, 40, 48,\r\n  16, 31, 43, 51,\r\n  17, 33, 45, 54,\r\n  18, 35, 48, 57,\r\n  19, 37, 51, 60,\r\n  19, 38, 53, 63,\r\n  20, 40, 56, 66,\r\n  21, 43, 59, 70,\r\n  22, 45, 62, 74,\r\n  24, 47, 65, 77,\r\n  25, 49, 68, 81\r\n]\r\n\r\nconst EC_CODEWORDS_TABLE = [\r\n// L  M  Q  H\r\n  7, 10, 13, 17,\r\n  10, 16, 22, 28,\r\n  15, 26, 36, 44,\r\n  20, 36, 52, 64,\r\n  26, 48, 72, 88,\r\n  36, 64, 96, 112,\r\n  40, 72, 108, 130,\r\n  48, 88, 132, 156,\r\n  60, 110, 160, 192,\r\n  72, 130, 192, 224,\r\n  80, 150, 224, 264,\r\n  96, 176, 260, 308,\r\n  104, 198, 288, 352,\r\n  120, 216, 320, 384,\r\n  132, 240, 360, 432,\r\n  144, 280, 408, 480,\r\n  168, 308, 448, 532,\r\n  180, 338, 504, 588,\r\n  196, 364, 546, 650,\r\n  224, 416, 600, 700,\r\n  224, 442, 644, 750,\r\n  252, 476, 690, 816,\r\n  270, 504, 750, 900,\r\n  300, 560, 810, 960,\r\n  312, 588, 870, 1050,\r\n  336, 644, 952, 1110,\r\n  360, 700, 1020, 1200,\r\n  390, 728, 1050, 1260,\r\n  420, 784, 1140, 1350,\r\n  450, 812, 1200, 1440,\r\n  480, 868, 1290, 1530,\r\n  510, 924, 1350, 1620,\r\n  540, 980, 1440, 1710,\r\n  570, 1036, 1530, 1800,\r\n  570, 1064, 1590, 1890,\r\n  600, 1120, 1680, 1980,\r\n  630, 1204, 1770, 2100,\r\n  660, 1260, 1860, 2220,\r\n  720, 1316, 1950, 2310,\r\n  750, 1372, 2040, 2430\r\n]\r\n\r\n/**\r\n * Returns the number of error correction block that the QR Code should contain\r\n * for the specified version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction blocks\r\n */\r\nexports.getBlocksCount = function getBlocksCount (version, errorCorrectionLevel) {\r\n  switch (errorCorrectionLevel) {\r\n    case ECLevel.L:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]\r\n    case ECLevel.M:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]\r\n    case ECLevel.Q:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]\r\n    case ECLevel.H:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the number of error correction codewords to use for the specified\r\n * version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction codewords\r\n */\r\nexports.getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel) {\r\n  switch (errorCorrectionLevel) {\r\n    case ECLevel.L:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]\r\n    case ECLevel.M:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]\r\n    case ECLevel.Q:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]\r\n    case ECLevel.H:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n","const getSymbolSize = require('./utils').getSymbolSize\nconst FINDER_PATTERN_SIZE = 7\n\n/**\n * Returns an array containing the positions of each finder pattern.\n * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  const size = getSymbolSize(version)\n\n  return [\n    // top-left\n    [0, 0],\n    // top-right\n    [size - FINDER_PATTERN_SIZE, 0],\n    // bottom-left\n    [0, size - FINDER_PATTERN_SIZE]\n  ]\n}\n","/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */\nfunction BitMatrix (size) {\n  if (!size || size < 1) {\n    throw new Error('BitMatrix size must be defined and greater than 0')\n  }\n\n  this.size = size\n  this.data = new Uint8Array(size * size)\n  this.reservedBit = new Uint8Array(size * size)\n}\n\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */\nBitMatrix.prototype.set = function (row, col, value, reserved) {\n  const index = row * this.size + col\n  this.data[index] = value\n  if (reserved) this.reservedBit[index] = true\n}\n\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */\nBitMatrix.prototype.get = function (row, col) {\n  return this.data[row * this.size + col]\n}\n\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */\nBitMatrix.prototype.xor = function (row, col, value) {\n  this.data[row * this.size + col] ^= value\n}\n\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */\nBitMatrix.prototype.isReserved = function (row, col) {\n  return this.reservedBit[row * this.size + col]\n}\n\nmodule.exports = BitMatrix\n","function BitBuffer () {\n  this.buffer = []\n  this.length = 0\n}\n\nBitBuffer.prototype = {\n\n  get: function (index) {\n    const bufIndex = Math.floor(index / 8)\n    return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1\n  },\n\n  put: function (num, length) {\n    for (let i = 0; i < length; i++) {\n      this.putBit(((num >>> (length - i - 1)) & 1) === 1)\n    }\n  },\n\n  getLengthInBits: function () {\n    return this.length\n  },\n\n  putBit: function (bit) {\n    const bufIndex = Math.floor(this.length / 8)\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0)\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= (0x80 >>> (this.length % 8))\n    }\n\n    this.length++\n  }\n}\n\nmodule.exports = BitBuffer\n","exports.L = { bit: 1 }\nexports.M = { bit: 0 }\nexports.Q = { bit: 3 }\nexports.H = { bit: 2 }\n\nfunction fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string')\n  }\n\n  const lcStr = string.toLowerCase()\n\n  switch (lcStr) {\n    case 'l':\n    case 'low':\n      return exports.L\n\n    case 'm':\n    case 'medium':\n      return exports.M\n\n    case 'q':\n    case 'quartile':\n      return exports.Q\n\n    case 'h':\n    case 'high':\n      return exports.H\n\n    default:\n      throw new Error('Unknown EC Level: ' + string)\n  }\n}\n\nexports.isValid = function isValid (level) {\n  return level && typeof level.bit !== 'undefined' &&\n    level.bit >= 0 && level.bit < 4\n}\n\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value\n  }\n\n  try {\n    return fromString(value)\n  } catch (e) {\n    return defaultValue\n  }\n}\n"],"names":["exports","Patterns","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","PenaltyScores","getMaskAt","maskPattern","i","j","Math","floor","Error","isValid","mask","isNaN","from","value","parseInt","undefined","getPenaltyN1","data","size","points","sameCountCol","sameCountRow","lastCol","lastRow","row","col","module","get","getPenaltyN2","last","getPenaltyN3","bitsCol","bitsRow","getPenaltyN4","darkCount","modulesCount","length","abs","ceil","applyMask","pattern","isReserved","xor","getBestMask","setupFormatFunc","numPatterns","Object","keys","bestPattern","lowerPenalty","Infinity","p","penalty","Mode","ALPHA_NUM_CHARS","AlphanumericData","this","mode","ALPHANUMERIC","getBitsLength","prototype","getLength","write","bitBuffer","indexOf","put","EXP_TABLE","Uint8Array","LOG_TABLE","x","log","n","exp","mul","y","Utils","G15_BCH","getBCHDigit","getEncodedBits","errorCorrectionLevel","bit","d","KanjiData","KANJI","toSJIS","ByteData","BYTE","TextEncoder","encode","l","dijkstra","single_source_shortest_paths","graph","s","predecessors","costs","closest","u","v","cost_of_s_to_u","adjacent_nodes","cost_of_s_to_u_plus_cost_of_e","cost_of_s_to_v","open","PriorityQueue","make","push","empty","pop","cost","hasOwnProperty","msg","join","extract_shortest_path_from_predecessor_list","nodes","reverse","find_path","opts","key","T","t","queue","sorter","default_sorter","a","b","item","sort","shift","getSymbolSize","getRowColCoords","version","posCount","intervals","positions","getPositions","coords","pos","posLength","ECLevel","EC_BLOCKS_TABLE","EC_CODEWORDS_TABLE","getBlocksCount","L","M","Q","H","getTotalCodewordsCount","BitMatrix","reservedBit","set","reserved","index","BitBuffer","buffer","bufIndex","num","putBit","getLengthInBits","level","defaultValue","string","toLowerCase","fromString","e"],"sourceRoot":""}