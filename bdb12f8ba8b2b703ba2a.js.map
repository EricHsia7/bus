{"version":3,"file":"bdb12f8ba8b2b703ba2a.js","mappings":";4GAqBA,SAASA,EAAQC,GACb,IAAKC,OAAOC,cAAcF,IAAMA,EAAI,EAAG,MAAM,IAAIG,MAAM,kCAAoCH,EAC/F,CAKA,SAASI,EAAOC,KAAMC,GAClB,MAJaC,EAIAF,aAHOG,YAAcC,YAAYC,OAAOH,IAA6B,eAAvBA,EAAEI,YAAYC,MAGxD,MAAM,IAAIT,MAAM,uBAJrC,IAAiBI,EAKb,GAAID,EAAQO,OAAS,IAAMP,EAAQQ,SAAST,EAAEQ,QAAS,MAAM,IAAIV,MAAM,iCAAmCG,EAAU,gBAAkBD,EAAEQ,OAC5I,CAMA,SAASE,EAAQC,EAAUC,GAAgB,GACvC,GAAID,EAASE,UAAW,MAAM,IAAIf,MAAM,oCACxC,GAAIc,GAAiBD,EAASG,SAAU,MAAM,IAAIhB,MAAM,wCAC5D,CACA,SAASiB,EAAQC,EAAKL,GAClBZ,EAAOiB,GACP,MAAMC,EAAMN,EAASO,UACrB,GAAIF,EAAIR,OAASS,EACb,MAAM,IAAInB,MAAM,yDAA2DmB,EAEnF,CAQA,MAEME,EAAcC,GAAM,IAAIC,SAASD,EAAIE,OAAQF,EAAIG,WAAYH,EAAII,YAEjEC,EAAO,CAACC,EAAMC,IAAQD,GAAQ,GAAKC,EAAQD,IAASC,EAEpDC,EAAO,CAACF,EAAMC,IAAQD,GAAQC,EAAQD,IAAS,GAAKC,IAAU,EAC9DE,EAAuB,KAEP,KAFY,IAAI1B,WAAW,IAAI2B,YAAY,CACzD,YACDR,QAAQ,GAFc,GAM7B,SAASS,EAAWX,GAChB,IAAI,IAAIY,EAAI,EAAGA,EAAIZ,EAAIZ,OAAQwB,IAC3BZ,EAAIY,IAJMN,EAIQN,EAAIY,KAJG,GAAK,WAAaN,GAAQ,EAAI,SAAWA,IAAS,EAAI,MAASA,IAAS,GAAK,IAA7F,IAACA,CAMlB,CAWI,SAASO,EAAQC,GAGjB,MAFoB,iBAATA,IAAmBA,EAT9B,SAAqBC,GACrB,GAAmB,iBAARA,EAAkB,MAAM,IAAIrC,MAAM,2CAA6CqC,GAC1F,OAAO,IAAIhC,YAAW,IAAIiC,aAAcC,OAAOF,GACnD,CAMyCG,CAAYJ,IACjDnC,EAAOmC,GACAA,CACX,CAEA,MAAMK,EAEF,KAAAC,GACI,OAAOC,KAAKC,YAChB,EAEJ,SAASC,EAAgBC,GACrB,MAAMC,EAASC,GAAMF,IAAWG,OAAOd,EAAQa,IAAME,SAC/CC,EAAML,IAIZ,OAHAC,EAAM3B,UAAY+B,EAAI/B,UACtB2B,EAAMK,SAAWD,EAAIC,SACrBL,EAAMM,OAAS,IAAIP,IACZC,CACX,CAGA,MAAMO,UAAab,EACf,MAAAQ,CAAOM,GAGH,OAFA3C,EAAQ+B,MACRA,KAAKa,MAAMP,OAAOM,GACXZ,IACX,CACA,UAAAc,CAAWvC,GACPN,EAAQ+B,MACR1C,EAAOiB,EAAKyB,KAAKvB,WACjBuB,KAAK3B,UAAW,EAChB2B,KAAKa,MAAMC,WAAWvC,GACtByB,KAAKe,MAAMT,OAAO/B,GAClByB,KAAKe,MAAMD,WAAWvC,GACtByB,KAAKgB,SACT,CACA,MAAAT,GACI,MAAMhC,EAAM,IAAIb,WAAWsC,KAAKe,MAAMtC,WAEtC,OADAuB,KAAKc,WAAWvC,GACTA,CACX,CACA,UAAA0B,CAAWgB,GAEPA,IAAOA,EAAKC,OAAOR,OAAOQ,OAAOC,eAAenB,MAAO,CAAC,IACxD,MAAM,MAAEe,EAAK,MAAEF,EAAK,SAAExC,EAAQ,UAAED,EAAS,SAAEqC,EAAQ,UAAEhC,GAAcuB,KAQnE,OANAiB,EAAG5C,SAAWA,EACd4C,EAAG7C,UAAYA,EACf6C,EAAGR,SAAWA,EACdQ,EAAGxC,UAAYA,EACfwC,EAAGF,MAAQA,EAAMd,WAAWgB,EAAGF,OAC/BE,EAAGJ,MAAQA,EAAMZ,WAAWgB,EAAGJ,OACxBI,CACX,CACA,OAAAD,GACIhB,KAAK5B,WAAY,EACjB4B,KAAKe,MAAMC,UACXhB,KAAKa,MAAMG,SACf,CACA,WAAAnD,CAAYuD,EAAMC,GACdC,QACAtB,KAAK3B,UAAW,EAChB2B,KAAK5B,WAAY,EAlHzB,SAAemD,GACX,GAAiB,mBAANA,GAAwC,mBAAbA,EAAEb,OAAuB,MAAM,IAAIrD,MAAM,mDAC/EJ,EAAQsE,EAAE9C,WACVxB,EAAQsE,EAAEd,SACd,CA+GQe,CAAMJ,GACN,MAAMK,EAAMjC,EAAQ6B,GAEpB,GADArB,KAAKa,MAAQO,EAAKV,SACe,mBAAtBV,KAAKa,MAAMP,OAAuB,MAAM,IAAIjD,MAAM,uDAC7D2C,KAAKS,SAAWT,KAAKa,MAAMJ,SAC3BT,KAAKvB,UAAYuB,KAAKa,MAAMpC,UAC5B,MAAMgC,EAAWT,KAAKS,SAChBiB,EAAM,IAAIhE,WAAW+C,GAE3BiB,EAAIC,IAAIF,EAAI1D,OAAS0C,EAAWW,EAAKV,SAASJ,OAAOmB,GAAKlB,SAAWkB,GACrE,IAAI,IAAIlC,EAAI,EAAGA,EAAImC,EAAI3D,OAAQwB,IAAImC,EAAInC,IAAM,GAC7CS,KAAKa,MAAMP,OAAOoB,GAElB1B,KAAKe,MAAQK,EAAKV,SAElB,IAAI,IAAInB,EAAI,EAAGA,EAAImC,EAAI3D,OAAQwB,IAAImC,EAAInC,IAAM,IAC7CS,KAAKe,MAAMT,OAAOoB,GAClBA,EAAIE,KAAK,EACb,EAWA,MAAMC,EAAO,CAACT,EAAMK,EAAKK,IAAU,IAAInB,EAAKS,EAAMK,GAAKnB,OAAOwB,GAASvB,SAC3EsB,EAAKnB,OAAS,CAACU,EAAMK,IAAM,IAAId,EAAKS,EAAMK,GAiBtC,MAAMM,EAAM,CAACtE,EAAGF,EAAGyE,IAAIvE,EAAIF,GAAKE,EAAIuE,EAG9BC,EAAM,CAACxE,EAAGF,EAAGyE,IAAIvE,EAAIF,EAAIE,EAAIuE,EAAIzE,EAAIyE,EAI3C,MAAME,UAAepC,EACrB,MAAAQ,CAAOb,GACHxB,EAAQ+B,MACR,MAAM,KAAEmC,EAAI,OAAEtD,EAAM,SAAE4B,GAAaT,KAE7BoC,GADN3C,EAAOD,EAAQC,IACE1B,OACjB,IAAI,IAAIsE,EAAM,EAAGA,EAAMD,GAAK,CACxB,MAAME,EAAOC,KAAK/D,IAAIiC,EAAWT,KAAKqC,IAAKD,EAAMC,GAEjD,GAAIC,IAAS7B,EAKb5B,EAAO8C,IAAIlC,EAAK+C,SAASH,EAAKA,EAAMC,GAAOtC,KAAKqC,KAChDrC,KAAKqC,KAAOC,EACZD,GAAOC,EACHtC,KAAKqC,MAAQ5B,IACbT,KAAKyC,QAAQN,EAAM,GACnBnC,KAAKqC,IAAM,OAVf,CACI,MAAMK,EAAWhE,EAAWe,GAC5B,KAAMgB,GAAY2B,EAAMC,EAAKA,GAAO5B,EAAST,KAAKyC,QAAQC,EAAUL,EAExE,CAQJ,CAGA,OAFArC,KAAKjC,QAAU0B,EAAK1B,OACpBiC,KAAK2C,aACE3C,IACX,CACA,UAAAc,CAAWvC,GACPN,EAAQ+B,MACR1B,EAAQC,EAAKyB,MACbA,KAAK3B,UAAW,EAIhB,MAAM,OAAEQ,EAAM,KAAEsD,EAAI,SAAE1B,EAAQ,KAAErB,GAASY,KACzC,IAAI,IAAEqC,GAAQrC,KAEdnB,EAAOwD,KAAS,IAChBrC,KAAKnB,OAAO2D,SAASH,GAAKT,KAAK,GAG3B5B,KAAK4C,UAAYnC,EAAW4B,IAC5BrC,KAAKyC,QAAQN,EAAM,GACnBE,EAAM,GAGV,IAAI,IAAI9C,EAAI8C,EAAK9C,EAAIkB,EAAUlB,IAAIV,EAAOU,GAAK,GAjEnD,SAAsB4C,EAAMrD,EAAY+D,EAAOzD,GAC/C,GAAiC,mBAAtB+C,EAAKW,aAA6B,OAAOX,EAAKW,aAAahE,EAAY+D,EAAOzD,GACzF,MAAM2D,EAAOC,OAAO,IACdC,EAAWD,OAAO,YAClBE,EAAK/F,OAAO0F,GAASE,EAAOE,GAC5BE,EAAKhG,OAAO0F,EAAQI,GACpB1B,EAAInC,EAAO,EAAI,EACfgE,EAAIhE,EAAO,EAAI,EACrB+C,EAAKkB,UAAUvE,EAAayC,EAAG2B,EAAI9D,GACnC+C,EAAKkB,UAAUvE,EAAasE,EAAGD,EAAI/D,EACvC,CA2DQ0D,CAAaX,EAAM1B,EAAW,EAAGuC,OAAqB,EAAdhD,KAAKjC,QAAaqB,GAC1DY,KAAKyC,QAAQN,EAAM,GACnB,MAAMmB,EAAQ5E,EAAWH,GACnB6D,EAAMpC,KAAKvB,UAEjB,GAAI2D,EAAM,EAAG,MAAM,IAAI/E,MAAM,+CAC7B,MAAMkG,EAASnB,EAAM,EACfoB,EAAQxD,KAAKyD,MACnB,GAAIF,EAASC,EAAMzF,OAAQ,MAAM,IAAIV,MAAM,sCAC3C,IAAI,IAAIkC,EAAI,EAAGA,EAAIgE,EAAQhE,IAAI+D,EAAMD,UAAU,EAAI9D,EAAGiE,EAAMjE,GAAIH,EACpE,CACA,MAAAmB,GACI,MAAM,OAAE1B,EAAM,UAAEJ,GAAcuB,KAC9BA,KAAKc,WAAWjC,GAChB,MAAM6E,EAAM7E,EAAO8E,MAAM,EAAGlF,GAE5B,OADAuB,KAAKgB,UACE0C,CACX,CACA,UAAAzD,CAAWgB,GACPA,IAAOA,EAAK,IAAIjB,KAAKnC,aACrBoD,EAAGU,OAAO3B,KAAKyD,OACf,MAAM,SAAEhD,EAAQ,OAAE5B,EAAM,OAAEd,EAAM,SAAEM,EAAQ,UAAED,EAAS,IAAEiE,GAAQrC,KAM/D,OALAiB,EAAGlD,OAASA,EACZkD,EAAGoB,IAAMA,EACTpB,EAAG5C,SAAWA,EACd4C,EAAG7C,UAAYA,EACXL,EAAS0C,GAAUQ,EAAGpC,OAAO8C,IAAI9C,GAC9BoC,CACX,CACA,WAAApD,CAAY4C,EAAUhC,EAAWmE,EAAWxD,GACxCkC,QACAtB,KAAKS,SAAWA,EAChBT,KAAKvB,UAAYA,EACjBuB,KAAK4C,UAAYA,EACjB5C,KAAKZ,KAAOA,EACZY,KAAK3B,UAAW,EAChB2B,KAAKjC,OAAS,EACdiC,KAAKqC,IAAM,EACXrC,KAAK5B,WAAY,EACjB4B,KAAKnB,OAAS,IAAInB,WAAW+C,GAC7BT,KAAKmC,KAAOzD,EAAWsB,KAAKnB,OAChC,EAKJ,MAAM+E,EAA0B,IAAIvE,YAAY,CAC5C,WACA,WACA,WACA,UACA,aAIEwE,EAAyB,IAAIxE,YAAY,IAC/C,MAAMyE,UAAa5B,EACf,GAAAuB,GACI,MAAM,EAAEM,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,GAAMnE,KAC1B,MAAO,CACH+D,EACAC,EACAC,EACAC,EACAC,EAER,CACA,GAAAxC,CAAIoC,EAAGC,EAAGC,EAAGC,EAAGC,GACZnE,KAAK+D,EAAQ,EAAJA,EACT/D,KAAKgE,EAAQ,EAAJA,EACThE,KAAKiE,EAAQ,EAAJA,EACTjE,KAAKkE,EAAQ,EAAJA,EACTlE,KAAKmE,EAAQ,EAAJA,CACb,CACA,OAAA1B,CAAQN,EAAMiC,GACV,IAAI,IAAI7E,EAAI,EAAGA,EAAI,GAAIA,IAAK6E,GAAU,EAAEP,EAAOtE,GAAK4C,EAAKkC,UAAUD,GAAQ,GAC3E,IAAI,IAAI7E,EAAI,GAAIA,EAAI,GAAIA,IAAIsE,EAAOtE,GAAKJ,EAAK0E,EAAOtE,EAAI,GAAKsE,EAAOtE,EAAI,GAAKsE,EAAOtE,EAAI,IAAMsE,EAAOtE,EAAI,IAAK,GAE9G,IAAI,EAAEwE,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,GAAMnE,KACxB,IAAI,IAAIT,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACvB,IAAI+E,EAAGC,EACHhF,EAAI,IACJ+E,EAAIvC,EAAIiC,EAAGC,EAAGC,GACdK,EAAI,YACGhF,EAAI,IACX+E,EAAIN,EAAIC,EAAIC,EACZK,EAAI,YACGhF,EAAI,IACX+E,EAAIrC,EAAI+B,EAAGC,EAAGC,GACdK,EAAI,aAEJD,EAAIN,EAAIC,EAAIC,EACZK,EAAI,YAER,MAAMC,EAAIrF,EAAK4E,EAAG,GAAKO,EAAIH,EAAII,EAAIV,EAAOtE,GAAK,EAC/C4E,EAAID,EACJA,EAAID,EACJA,EAAI9E,EAAK6E,EAAG,IACZA,EAAID,EACJA,EAAIS,CACR,CAEAT,EAAIA,EAAI/D,KAAK+D,EAAI,EACjBC,EAAIA,EAAIhE,KAAKgE,EAAI,EACjBC,EAAIA,EAAIjE,KAAKiE,EAAI,EACjBC,EAAIA,EAAIlE,KAAKkE,EAAI,EACjBC,EAAIA,EAAInE,KAAKmE,EAAI,EACjBnE,KAAK2B,IAAIoC,EAAGC,EAAGC,EAAGC,EAAGC,EACzB,CACA,UAAAxB,GACIkB,EAAOjC,KAAK,EAChB,CACA,OAAAZ,GACIhB,KAAK2B,IAAI,EAAG,EAAG,EAAG,EAAG,GACrB3B,KAAKnB,OAAO+C,KAAK,EACrB,CACA,WAAA/D,GACIyD,MAAM,GAAI,GAAI,GAAG,GACjBtB,KAAK+D,EAAiB,EAAbH,EAAQ,GACjB5D,KAAKgE,EAAiB,EAAbJ,EAAQ,GACjB5D,KAAKiE,EAAiB,EAAbL,EAAQ,GACjB5D,KAAKkE,EAAiB,EAAbN,EAAQ,GACjB5D,KAAKmE,EAAiB,EAAbP,EAAQ,EACrB,EAMA,MAAMa,EAAuBvE,GAAgB,IAAI,IAAI4D,IAOnDY,EAA2B,IAAIrF,YAAY,CAC7C,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,aAKEsF,EAA4B,IAAItF,YAAY,CAC9C,WACA,WACA,WACA,WACA,WACA,WACA,UACA,aAIEuF,EAA2B,IAAIvF,YAAY,IACjD,MAAMwF,UAAe3C,EACjB,GAAAuB,GACI,MAAM,EAAEM,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEG,EAAC,EAAEQ,EAAC,EAAEC,GAAM/E,KACnC,MAAO,CACH+D,EACAC,EACAC,EACAC,EACAC,EACAG,EACAQ,EACAC,EAER,CAEA,GAAApD,CAAIoC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGG,EAAGQ,EAAGC,GACrB/E,KAAK+D,EAAQ,EAAJA,EACT/D,KAAKgE,EAAQ,EAAJA,EACThE,KAAKiE,EAAQ,EAAJA,EACTjE,KAAKkE,EAAQ,EAAJA,EACTlE,KAAKmE,EAAQ,EAAJA,EACTnE,KAAKsE,EAAQ,EAAJA,EACTtE,KAAK8E,EAAQ,EAAJA,EACT9E,KAAK+E,EAAQ,EAAJA,CACb,CACA,OAAAtC,CAAQN,EAAMiC,GAEV,IAAI,IAAI7E,EAAI,EAAGA,EAAI,GAAIA,IAAK6E,GAAU,EAAEQ,EAASrF,GAAK4C,EAAKkC,UAAUD,GAAQ,GAC7E,IAAI,IAAI7E,EAAI,GAAIA,EAAI,GAAIA,IAAI,CACxB,MAAMyF,EAAMJ,EAASrF,EAAI,IACnB0F,EAAKL,EAASrF,EAAI,GAClB2F,EAAKlG,EAAKgG,EAAK,GAAKhG,EAAKgG,EAAK,IAAMA,IAAQ,EAC5CG,EAAKnG,EAAKiG,EAAI,IAAMjG,EAAKiG,EAAI,IAAMA,IAAO,GAChDL,EAASrF,GAAK4F,EAAKP,EAASrF,EAAI,GAAK2F,EAAKN,EAASrF,EAAI,IAAM,CACjE,CAEA,IAAI,EAAEwE,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEG,EAAC,EAAEQ,EAAC,EAAEC,GAAM/E,KACjC,IAAI,IAAIT,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACvB,MACM6F,EAAKL,GADI/F,EAAKmF,EAAG,GAAKnF,EAAKmF,EAAG,IAAMnF,EAAKmF,EAAG,KAC1BpC,EAAIoC,EAAGG,EAAGQ,GAAKJ,EAASnF,GAAKqF,EAASrF,GAAK,EAE7D8F,GADSrG,EAAK+E,EAAG,GAAK/E,EAAK+E,EAAG,IAAM/E,EAAK+E,EAAG,KAC9B9B,EAAI8B,EAAGC,EAAGC,GAAK,EACnCc,EAAID,EACJA,EAAIR,EACJA,EAAIH,EACJA,EAAID,EAAIkB,EAAK,EACblB,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAIqB,EAAKC,EAAK,CAClB,CAEAtB,EAAIA,EAAI/D,KAAK+D,EAAI,EACjBC,EAAIA,EAAIhE,KAAKgE,EAAI,EACjBC,EAAIA,EAAIjE,KAAKiE,EAAI,EACjBC,EAAIA,EAAIlE,KAAKkE,EAAI,EACjBC,EAAIA,EAAInE,KAAKmE,EAAI,EACjBG,EAAIA,EAAItE,KAAKsE,EAAI,EACjBQ,EAAIA,EAAI9E,KAAK8E,EAAI,EACjBC,EAAIA,EAAI/E,KAAK+E,EAAI,EACjB/E,KAAK2B,IAAIoC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGG,EAAGQ,EAAGC,EAClC,CACA,UAAApC,GACIiC,EAAShD,KAAK,EAClB,CACA,OAAAZ,GACIhB,KAAK2B,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9B3B,KAAKnB,OAAO+C,KAAK,EACrB,CACA,WAAA/D,GACIyD,MAAM,GAAI,GAAI,GAAG,GAGjBtB,KAAK+D,EAAmB,EAAfY,EAAU,GACnB3E,KAAKgE,EAAmB,EAAfW,EAAU,GACnB3E,KAAKiE,EAAmB,EAAfU,EAAU,GACnB3E,KAAKkE,EAAmB,EAAfS,EAAU,GACnB3E,KAAKmE,EAAmB,EAAfQ,EAAU,GACnB3E,KAAKsE,EAAmB,EAAfK,EAAU,GACnB3E,KAAK8E,EAAmB,EAAfH,EAAU,GACnB3E,KAAK+E,EAAmB,EAAfJ,EAAU,EACvB,EAGJ,MAAMW,UAAeT,EACjB,WAAAhH,GACIyD,QACAtB,KAAK+D,GAAI,WACT/D,KAAKgE,EAAI,UACThE,KAAKiE,EAAI,UACTjE,KAAKkE,GAAI,UACTlE,KAAKmE,GAAI,QACTnE,KAAKsE,EAAI,WACTtE,KAAK8E,EAAI,WACT9E,KAAK+E,GAAI,WACT/E,KAAKvB,UAAY,EACrB,EAKA,MAAM8G,EAAyBrF,GAAgB,IAAI,IAAI2E,IAGjDW,EAAyBtF,GAAgB,IAAI,IAAIoF,IAErDG,EAA6BzC,OAAO,GAAK,GAAK,GAC9CD,EAAuBC,OAAO,IAGpC,SAAS0C,EAAQxI,EAAGyI,GAAK,GACrB,OAAIA,EAAW,CACXpE,EAAGpE,OAAOD,EAAIuI,GACdrC,EAAGjG,OAAOD,GAAK6F,EAAO0C,IAEnB,CACHlE,EAAoC,EAAjCpE,OAAOD,GAAK6F,EAAO0C,GACtBrC,EAA4B,EAAzBjG,OAAOD,EAAIuI,GAEtB,CACA,SAASG,EAAMC,EAAKF,GAAK,GACrB,IAAIG,EAAK,IAAIzG,YAAYwG,EAAI9H,QACzBgI,EAAK,IAAI1G,YAAYwG,EAAI9H,QAC7B,IAAI,IAAIwB,EAAI,EAAGA,EAAIsG,EAAI9H,OAAQwB,IAAI,CAC/B,MAAM,EAAEgC,EAAC,EAAE6B,GAAMsC,EAAQG,EAAItG,GAAIoG,IAChCG,EAAGvG,GAAIwG,EAAGxG,IAAM,CACbgC,EACA6B,EAER,CACA,MAAO,CACH0C,EACAC,EAER,CACA,MAcMC,EAAS,CAACzE,EAAG6B,EAAG6C,IAAI1E,GAAK0E,EAAI7C,IAAM,GAAK6C,EACxCC,EAAS,CAAC3E,EAAG6B,EAAG6C,IAAI7C,GAAK6C,EAAI1E,IAAM,GAAK0E,EAExCE,EAAS,CAAC5E,EAAG6B,EAAG6C,IAAI7C,GAAK6C,EAAI,GAAK1E,IAAM,GAAK0E,EAC7CG,EAAS,CAAC7E,EAAG6B,EAAG6C,IAAI1E,GAAK0E,EAAI,GAAK7C,IAAM,GAAK6C,EAWnD,MAOMI,EAAM,CACRX,UACAE,QACAU,MAvCU,CAAC/E,EAAG6B,IAAIJ,OAAOzB,IAAM,IAAMwB,EAAOC,OAAOI,IAAM,GAwCzDmD,MAtCU,CAAChF,EAAGiF,EAAIP,IAAI1E,IAAM0E,EAuC5BQ,MAtCU,CAAClF,EAAG6B,EAAG6C,IAAI1E,GAAK,GAAK0E,EAAI7C,IAAM6C,EAuCzCS,OArCW,CAACnF,EAAG6B,EAAG6C,IAAI1E,IAAM0E,EAAI7C,GAAK,GAAK6C,EAsC1CU,OArCW,CAACpF,EAAG6B,EAAG6C,IAAI1E,GAAK,GAAK0E,EAAI7C,IAAM6C,EAsC1CW,OApCW,CAACrF,EAAG6B,EAAG6C,IAAI1E,GAAK,GAAK0E,EAAI7C,IAAM6C,EAAI,GAqC9CY,OApCW,CAACtF,EAAG6B,EAAG6C,IAAI1E,IAAM0E,EAAI,GAAK7C,GAAK,GAAK6C,EAqC/Ca,QAnCY,CAACC,EAAI3D,IAAIA,EAoCrB4D,QAnCY,CAACzF,EAAGiF,IAAKjF,EAoCrByE,SACAE,SACAC,SACAC,SACAa,IA/BJ,SAAanB,EAAIC,EAAImB,EAAIC,GACrB,MAAM/D,GAAK2C,IAAO,IAAMoB,IAAO,GAC/B,MAAO,CACH5F,EAAGuE,EAAKoB,GAAM9D,EAAI,GAAK,GAAK,GAAK,EACjCA,EAAO,EAAJA,EAEX,EA0BIgE,MAxBU,CAACrB,EAAIoB,EAAIE,KAAMtB,IAAO,IAAMoB,IAAO,IAAME,IAAO,GAyB1DC,MAxBU,CAACC,EAAKzB,EAAIoB,EAAIM,IAAK1B,EAAKoB,EAAKM,GAAMD,EAAM,GAAK,GAAK,GAAK,EAyBlEE,MAxBU,CAAC1B,EAAIoB,EAAIE,EAAIK,KAAM3B,IAAO,IAAMoB,IAAO,IAAME,IAAO,IAAMK,IAAO,GAyB3EC,MAxBU,CAACJ,EAAKzB,EAAIoB,EAAIM,EAAII,IAAK9B,EAAKoB,EAAKM,EAAKI,GAAML,EAAM,GAAK,GAAK,GAAK,EAyB3EM,MAvBU,CAACN,EAAKzB,EAAIoB,EAAIM,EAAII,EAAIE,IAAKhC,EAAKoB,EAAKM,EAAKI,EAAKE,GAAMP,EAAM,GAAK,GAAK,GAAK,EAwBpFQ,MAzBU,CAAChC,EAAIoB,EAAIE,EAAIK,EAAIM,KAAMjC,IAAO,IAAMoB,IAAO,IAAME,IAAO,IAAMK,IAAO,IAAMM,IAAO,KA8BzFC,EAAWC,GAA6B,KAAK7B,EAAIT,MAAM,CACtD,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBACFuC,KAAKjL,GAAI8F,OAAO9F,MAjFyB,GAmFzCkL,EAA6B,IAAI/I,YAAY,IAC7CgJ,EAA6B,IAAIhJ,YAAY,IACnD,MAAMiJ,UAAepG,EAEjB,GAAAuB,GACI,MAAM,GAAEqC,EAAE,GAAEC,EAAE,GAAEmB,EAAE,GAAEC,EAAE,GAAEK,EAAE,GAAEH,EAAE,GAAEO,EAAE,GAAEF,EAAE,GAAEI,EAAE,GAAEE,EAAE,GAAEO,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,GAAO5I,KAC3E,MAAO,CACH8F,EACAC,EACAmB,EACAC,EACAK,EACAH,EACAO,EACAF,EACAI,EACAE,EACAO,EACAC,EACAC,EACAC,EACAC,EACAC,EAER,CAEA,GAAAjH,CAAImE,EAAIC,EAAImB,EAAIC,EAAIK,EAAIH,EAAIO,EAAIF,EAAII,EAAIE,EAAIO,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC5D5I,KAAK8F,GAAU,EAALA,EACV9F,KAAK+F,GAAU,EAALA,EACV/F,KAAKkH,GAAU,EAALA,EACVlH,KAAKmH,GAAU,EAALA,EACVnH,KAAKwH,GAAU,EAALA,EACVxH,KAAKqH,GAAU,EAALA,EACVrH,KAAK4H,GAAU,EAALA,EACV5H,KAAK0H,GAAU,EAALA,EACV1H,KAAK8H,GAAU,EAALA,EACV9H,KAAKgI,GAAU,EAALA,EACVhI,KAAKuI,GAAU,EAALA,EACVvI,KAAKwI,GAAU,EAALA,EACVxI,KAAKyI,GAAU,EAALA,EACVzI,KAAK0I,GAAU,EAALA,EACV1I,KAAK2I,GAAU,EAALA,EACV3I,KAAK4I,GAAU,EAALA,CACd,CACA,OAAAnG,CAAQN,EAAMiC,GAEV,IAAI,IAAI7E,EAAI,EAAGA,EAAI,GAAIA,IAAK6E,GAAU,EAClCgE,EAAW7I,GAAK4C,EAAKkC,UAAUD,GAC/BiE,EAAW9I,GAAK4C,EAAKkC,UAAUD,GAAU,GAE7C,IAAI,IAAI7E,EAAI,GAAIA,EAAI,GAAIA,IAAI,CAExB,MAAMsJ,EAA4B,EAArBT,EAAW7I,EAAI,IACtBuJ,EAA4B,EAArBT,EAAW9I,EAAI,IACtBwJ,EAAM1C,EAAIK,OAAOmC,EAAMC,EAAM,GAAKzC,EAAIK,OAAOmC,EAAMC,EAAM,GAAKzC,EAAIE,MAAMsC,EAAMC,EAAM,GACpFE,EAAM3C,EAAIM,OAAOkC,EAAMC,EAAM,GAAKzC,EAAIM,OAAOkC,EAAMC,EAAM,GAAKzC,EAAII,MAAMoC,EAAMC,EAAM,GAEpFG,EAA0B,EAApBb,EAAW7I,EAAI,GACrB2J,EAA0B,EAApBb,EAAW9I,EAAI,GACrB4J,EAAM9C,EAAIK,OAAOuC,EAAKC,EAAK,IAAM7C,EAAIO,OAAOqC,EAAKC,EAAK,IAAM7C,EAAIE,MAAM0C,EAAKC,EAAK,GAChFE,EAAM/C,EAAIM,OAAOsC,EAAKC,EAAK,IAAM7C,EAAIQ,OAAOoC,EAAKC,EAAK,IAAM7C,EAAII,MAAMwC,EAAKC,EAAK,GAEhFG,EAAOhD,EAAIoB,MAAMuB,EAAKI,EAAKf,EAAW9I,EAAI,GAAI8I,EAAW9I,EAAI,KAC7D+J,EAAOjD,EAAIsB,MAAM0B,EAAMN,EAAKI,EAAKf,EAAW7I,EAAI,GAAI6I,EAAW7I,EAAI,KACzE6I,EAAW7I,GAAY,EAAP+J,EAChBjB,EAAW9I,GAAY,EAAP8J,CACpB,CACA,IAAI,GAAEvD,EAAE,GAAEC,EAAE,GAAEmB,EAAE,GAAEC,EAAE,GAAEK,EAAE,GAAEH,EAAE,GAAEO,EAAE,GAAEF,EAAE,GAAEI,EAAE,GAAEE,EAAE,GAAEO,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,GAAO5I,KAEzE,IAAI,IAAIT,EAAI,EAAGA,EAAI,GAAIA,IAAI,CAEvB,MAAMgK,EAAUlD,EAAIK,OAAOoB,EAAIE,EAAI,IAAM3B,EAAIK,OAAOoB,EAAIE,EAAI,IAAM3B,EAAIO,OAAOkB,EAAIE,EAAI,IAC/EwB,EAAUnD,EAAIM,OAAOmB,EAAIE,EAAI,IAAM3B,EAAIM,OAAOmB,EAAIE,EAAI,IAAM3B,EAAIQ,OAAOiB,EAAIE,EAAI,IAE/EyB,EAAO3B,EAAKS,GAAMT,EAAKW,EACvBiB,EAAO1B,EAAKQ,GAAMR,EAAKU,EAGvBiB,EAAOtD,EAAI0B,MAAMa,EAAIY,EAASE,EAAMxB,EAAU3I,GAAI8I,EAAW9I,IAC7DqK,EAAMvD,EAAIwB,MAAM8B,EAAMhB,EAAIY,EAASE,EAAMxB,EAAU1I,GAAI6I,EAAW7I,IAClEsK,EAAa,EAAPF,EAENG,EAAUzD,EAAIK,OAAOZ,EAAIC,EAAI,IAAMM,EAAIO,OAAOd,EAAIC,EAAI,IAAMM,EAAIO,OAAOd,EAAIC,EAAI,IAC/EgE,EAAU1D,EAAIM,OAAOb,EAAIC,EAAI,IAAMM,EAAIQ,OAAOf,EAAIC,EAAI,IAAMM,EAAIQ,OAAOf,EAAIC,EAAI,IAC/EiE,EAAOlE,EAAKoB,EAAKpB,EAAK0B,EAAKN,EAAKM,EAChCyC,EAAOlE,EAAKoB,EAAKpB,EAAKsB,EAAKF,EAAKE,EACtCsB,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALT,EACLU,EAAU,EAALR,IACFzG,EAAGuG,EAAI1E,EAAG4E,GAAO3B,EAAIY,IAAS,EAALW,EAAa,EAALF,EAAc,EAANkC,EAAe,EAANC,IACrDjC,EAAU,EAALJ,EACLE,EAAU,EAALL,EACLG,EAAU,EAALN,EACLG,EAAU,EAALF,EACLD,EAAU,EAALpB,EACLqB,EAAU,EAALpB,EACL,MAAMmE,EAAM7D,EAAIe,MAAMyC,EAAKE,EAASE,GACpCnE,EAAKO,EAAIiB,MAAM4C,EAAKN,EAAKE,EAASE,GAClCjE,EAAW,EAANmE,CACT,GAEG3I,EAAGuE,EAAI1C,EAAG2C,GAAOM,EAAIY,IAAc,EAAVjH,KAAK8F,GAAkB,EAAV9F,KAAK+F,GAAa,EAALD,EAAa,EAALC,MAC3DxE,EAAG2F,EAAI9D,EAAG+D,GAAOd,EAAIY,IAAc,EAAVjH,KAAKkH,GAAkB,EAAVlH,KAAKmH,GAAa,EAALD,EAAa,EAALC,MAC3D5F,EAAO6B,EAAGiE,GAAOhB,EAAIY,IAAc,EAAVjH,KAAKwH,GAAkB,EAAVxH,KAAKqH,GAAa,EAALG,EAAa,EAALH,MAC3D9F,EAAGqG,EAAIxE,GAAUiD,EAAIY,IAAc,EAAVjH,KAAK4H,GAAkB,EAAV5H,KAAK0H,GAAa,EAALE,EAAa,EAALF,MAC3DnG,EAAGuG,EAAI1E,EAAG4E,GAAO3B,EAAIY,IAAc,EAAVjH,KAAK8H,GAAkB,EAAV9H,KAAKgI,GAAa,EAALF,EAAa,EAALE,MAC3DzG,EAAGgH,EAAInF,EAAGoF,GAAOnC,EAAIY,IAAc,EAAVjH,KAAKuI,GAAkB,EAAVvI,KAAKwI,GAAa,EAALD,EAAa,EAALC,MAC3DjH,EAAGkH,EAAIrF,EAAGsF,GAAOrC,EAAIY,IAAc,EAAVjH,KAAKyI,GAAkB,EAAVzI,KAAK0I,GAAa,EAALD,EAAa,EAALC,MAC3DnH,EAAGoH,EAAIvF,EAAGwF,GAAOvC,EAAIY,IAAc,EAAVjH,KAAK2I,GAAkB,EAAV3I,KAAK4I,GAAa,EAALD,EAAa,EAALC,IAC9D5I,KAAK2B,IAAImE,EAAIC,EAAImB,EAAIC,EAAIK,EAAIH,EAAIO,EAAIF,EAAII,EAAIE,EAAIO,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACzE,CACA,UAAAjG,GACIyF,EAAWxG,KAAK,GAChByG,EAAWzG,KAAK,EACpB,CACA,OAAAZ,GACIhB,KAAKnB,OAAO+C,KAAK,GACjB5B,KAAK2B,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC1D,CACA,WAAA9D,GACIyD,MAAM,IAAK,GAAI,IAAI,GAKnBtB,KAAK8F,GAAK,WACV9F,KAAK+F,IAAK,UACV/F,KAAKkH,IAAK,WACVlH,KAAKmH,IAAK,WACVnH,KAAKwH,GAAK,WACVxH,KAAKqH,IAAK,SACVrH,KAAK4H,IAAK,WACV5H,KAAK0H,GAAK,WACV1H,KAAK8H,GAAK,WACV9H,KAAKgI,IAAK,WACVhI,KAAKuI,IAAK,WACVvI,KAAKwI,GAAK,UACVxI,KAAKyI,GAAK,UACVzI,KAAK0I,IAAK,SACV1I,KAAK2I,GAAK,WACV3I,KAAK4I,GAAK,SACd,EAEJ,MAAMuB,UAAe7B,EACjB,WAAAzK,GACIyD,QAEAtB,KAAK8F,IAAK,UACV9F,KAAK+F,IAAK,WACV/F,KAAKkH,GAAK,WACVlH,KAAKmH,GAAK,UACVnH,KAAKwH,IAAK,WACVxH,KAAKqH,GAAK,UACVrH,KAAK4H,GAAK,UACV5H,KAAK0H,IAAK,UACV1H,KAAK8H,GAAK,WACV9H,KAAKgI,IAAK,QACVhI,KAAKuI,IAAK,WACVvI,KAAKwI,GAAK,WACVxI,KAAKyI,IAAK,UACVzI,KAAK0I,GAAK,WACV1I,KAAK2I,GAAK,WACV3I,KAAK4I,IAAK,WACV5I,KAAKvB,UAAY,EACrB,EAEJ,MAAM2L,EAAyBlK,GAAgB,IAAI,IAAIoI,IACjD+B,EAAyBnK,GAAgB,IAAI,IAAIiK,IAKjDG,EAAU,GACVC,EAAY,GACZC,EAAa,GACbC,EAAsBzH,OAAO,GAC7B0H,EAAsB1H,OAAO,GAC7B2H,EAAsB3H,OAAO,GAC7B4H,GAAsB5H,OAAO,GAC7B6H,GAAwB7H,OAAO,KAC/B8H,GAAyB9H,OAAO,KACtC,IAAI,IAAI+H,EAAQ,EAAGC,EAAIN,EAAKO,EAAI,EAAGC,EAAI,EAAGH,EAAQ,GAAIA,IAAQ,EAEzDE,EAAGC,GAAK,CACLA,GACC,EAAID,EAAI,EAAIC,GAAK,GAEtBZ,EAAQa,KAAK,GAAK,EAAID,EAAID,IAE1BV,EAAUY,MAAMJ,EAAQ,IAAMA,EAAQ,GAAK,EAAI,IAE/C,IAAIK,EAAIX,EACR,IAAI,IAAIY,EAAI,EAAGA,EAAI,EAAGA,IAClBL,GAAKA,GAAKN,GAAOM,GAAKJ,IAAOE,IAAUD,GACnCG,EAAIL,IAAKS,GAAKV,IAAQA,GAAuB1H,OAAOqI,IAAMX,GAElEF,EAAWW,KAAKC,EACpB,CACA,MAAOE,GAAaC,IAA+B3F,EAAM4E,GAAY,GAE/DgB,GAAQ,CAACjK,EAAG6B,EAAG6C,IAAIA,EAAI,GAAKE,EAAO5E,EAAG6B,EAAG6C,GAAKD,EAAOzE,EAAG6B,EAAG6C,GAC3DwF,GAAQ,CAAClK,EAAG6B,EAAG6C,IAAIA,EAAI,GAAKG,EAAO7E,EAAG6B,EAAG6C,GAAKC,EAAO3E,EAAG6B,EAAG6C,GA4CjE,MAAMyF,WAAe5L,EACjB,MAAA6L,GACSvM,GAAME,EAAWU,KAAK4L,SA5CnC,SAAiB3F,EAAG4F,EAAS,IACzB,MAAM7H,EAAI,IAAI3E,YAAY,IAE1B,IAAI,IAAI0L,EAAQ,GAAKc,EAAQd,EAAQ,GAAIA,IAAQ,CAE7C,IAAI,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IAAIjH,EAAEiH,GAAKhF,EAAEgF,GAAKhF,EAAEgF,EAAI,IAAMhF,EAAEgF,EAAI,IAAMhF,EAAEgF,EAAI,IAAMhF,EAAEgF,EAAI,IACnF,IAAI,IAAIA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAE,CAC1B,MAAMa,GAAQb,EAAI,GAAK,GACjBc,GAAQd,EAAI,GAAK,GACjBe,EAAKhI,EAAE+H,GACPE,EAAKjI,EAAE+H,EAAO,GACdG,EAAKV,GAAMQ,EAAIC,EAAI,GAAKjI,EAAE8H,GAC1BK,EAAKV,GAAMO,EAAIC,EAAI,GAAKjI,EAAE8H,EAAO,GACvC,IAAI,IAAIZ,EAAI,EAAGA,EAAI,GAAIA,GAAK,GACxBjF,EAAEgF,EAAIC,IAAMgB,EACZjG,EAAEgF,EAAIC,EAAI,IAAMiB,CAExB,CAEA,IAAIC,EAAOnG,EAAE,GACToG,EAAOpG,EAAE,GACb,IAAI,IAAImF,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACvB,MAAMlM,EAAQqL,EAAUa,GAClBc,EAAKV,GAAMY,EAAMC,EAAMnN,GACvBiN,EAAKV,GAAMW,EAAMC,EAAMnN,GACvBoN,EAAKhC,EAAQc,GACnBgB,EAAOnG,EAAEqG,GACTD,EAAOpG,EAAEqG,EAAK,GACdrG,EAAEqG,GAAMJ,EACRjG,EAAEqG,EAAK,GAAKH,CAChB,CAEA,IAAI,IAAIjB,EAAI,EAAGA,EAAI,GAAIA,GAAK,GAAG,CAC3B,IAAI,IAAID,EAAI,EAAGA,EAAI,GAAIA,IAAIjH,EAAEiH,GAAKhF,EAAEiF,EAAID,GACxC,IAAI,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAAIhF,EAAEiF,EAAID,KAAOjH,GAAGiH,EAAI,GAAK,IAAMjH,GAAGiH,EAAI,GAAK,GAC1E,CAEAhF,EAAE,IAAMqF,GAAYP,GACpB9E,EAAE,IAAMsF,GAAYR,EACxB,CACA/G,EAAEpC,KAAK,EACX,CAIQ2K,CAAQvM,KAAK4L,QAAS5L,KAAK6L,QACtBzM,GAAME,EAAWU,KAAK4L,SAC3B5L,KAAKwM,OAAS,EACdxM,KAAKqC,IAAM,CACf,CACA,MAAA/B,CAAOb,GACHxB,EAAQ+B,MACR,MAAM,SAAES,EAAQ,MAAE+C,GAAUxD,KAEtBoC,GADN3C,EAAOD,EAAQC,IACE1B,OACjB,IAAI,IAAIsE,EAAM,EAAGA,EAAMD,GAAK,CACxB,MAAME,EAAOC,KAAK/D,IAAIiC,EAAWT,KAAKqC,IAAKD,EAAMC,GACjD,IAAI,IAAI9C,EAAI,EAAGA,EAAI+C,EAAM/C,IAAIiE,EAAMxD,KAAKqC,QAAU5C,EAAK4C,KACnDrC,KAAKqC,MAAQ5B,GAAUT,KAAK2L,QACpC,CACA,OAAO3L,IACX,CACA,MAAAyM,GACI,GAAIzM,KAAK3B,SAAU,OACnB2B,KAAK3B,UAAW,EAChB,MAAM,MAAEmF,EAAK,OAAEkJ,EAAM,IAAErK,EAAG,SAAE5B,GAAaT,KAEzCwD,EAAMnB,IAAQqK,EACA,IAATA,GAAwBrK,IAAQ5B,EAAW,GAAGT,KAAK2L,SACxDnI,EAAM/C,EAAW,IAAM,IACvBT,KAAK2L,QACT,CACA,SAAAgB,CAAUpO,GACNN,EAAQ+B,MAAM,GACd1C,EAAOiB,GACPyB,KAAKyM,SACL,MAAMG,EAAY5M,KAAKwD,OACjB,SAAE/C,GAAaT,KACrB,IAAI,IAAIqC,EAAM,EAAGD,EAAM7D,EAAIR,OAAQsE,EAAMD,GAAK,CACtCpC,KAAKwM,QAAU/L,GAAUT,KAAK2L,SAClC,MAAMrJ,EAAOC,KAAK/D,IAAIiC,EAAWT,KAAKwM,OAAQpK,EAAMC,GACpD9D,EAAIoD,IAAIiL,EAAUpK,SAASxC,KAAKwM,OAAQxM,KAAKwM,OAASlK,GAAOD,GAC7DrC,KAAKwM,QAAUlK,EACfD,GAAOC,CACX,CACA,OAAO/D,CACX,CACA,OAAAsO,CAAQtO,GAEJ,IAAKyB,KAAK8M,UAAW,MAAM,IAAIzP,MAAM,yCACrC,OAAO2C,KAAK2M,UAAUpO,EAC1B,CACA,GAAAwO,CAAIC,GAEA,OADA/P,EAAQ+P,GACDhN,KAAK6M,QAAQ,IAAInP,WAAWsP,GACvC,CACA,UAAAlM,CAAWvC,GAEP,GADAD,EAAQC,EAAKyB,MACTA,KAAK3B,SAAU,MAAM,IAAIhB,MAAM,+BAGnC,OAFA2C,KAAK2M,UAAUpO,GACfyB,KAAKgB,UACEzC,CACX,CACA,MAAAgC,GACI,OAAOP,KAAKc,WAAW,IAAIpD,WAAWsC,KAAKvB,WAC/C,CACA,OAAAuC,GACIhB,KAAK5B,WAAY,EACjB4B,KAAKwD,MAAM5B,KAAK,EACpB,CACA,UAAA3B,CAAWgB,GACP,MAAM,SAAER,EAAQ,OAAEiM,EAAM,UAAEjO,EAAS,OAAEoN,EAAM,UAAEiB,GAAc9M,KAY3D,OAXAiB,IAAOA,EAAK,IAAIyK,GAAOjL,EAAUiM,EAAQjO,EAAWqO,EAAWjB,IAC/D5K,EAAG2K,QAAQjK,IAAI3B,KAAK4L,SACpB3K,EAAGoB,IAAMrC,KAAKqC,IACdpB,EAAGuL,OAASxM,KAAKwM,OACjBvL,EAAG5C,SAAW2B,KAAK3B,SACnB4C,EAAG4K,OAASA,EAEZ5K,EAAGyL,OAASA,EACZzL,EAAGxC,UAAYA,EACfwC,EAAG6L,UAAYA,EACf7L,EAAG7C,UAAY4B,KAAK5B,UACb6C,CACX,CAEA,WAAApD,CAAY4C,EAAUiM,EAAQjO,EAAWqO,GAAY,EAAOjB,EAAS,IAcjE,GAbAvK,QACAtB,KAAKS,SAAWA,EAChBT,KAAK0M,OAASA,EACd1M,KAAKvB,UAAYA,EACjBuB,KAAK8M,UAAYA,EACjB9M,KAAK6L,OAASA,EACd7L,KAAKqC,IAAM,EACXrC,KAAKwM,OAAS,EACdxM,KAAK3B,UAAW,EAChB2B,KAAK5B,WAAY,EAEjBnB,EAAQwB,GAEJ,GAAKuB,KAAKS,UAAYT,KAAKS,UAAY,IAAK,MAAM,IAAIpD,MAAM,4CAhhC5D,IAACsB,EAihCLqB,KAAKwD,MAAQ,IAAI9F,WAAW,KAC5BsC,KAAK4L,SAlhCAjN,EAkhCcqB,KAAKwD,MAlhCb,IAAInE,YAAYV,EAAIE,OAAQF,EAAIG,WAAYyD,KAAK0K,MAAMtO,EAAII,WAAa,IAmhCvF,EAEJ,MAAMmO,GAAM,CAACR,EAAQjM,EAAUhC,IAAYyB,GAAgB,IAAI,IAAIwL,GAAOjL,EAAUiM,EAAQjO,KACtF0O,GAA2BD,GAAI,EAAM,IAAK,IAItCE,GAA2BF,GAAI,EAAM,IAAK,IAC9CG,GAA2BH,GAAI,EAAM,IAAK,IAC1CI,GAA2BJ,GAAI,EAAM,GAAI,IAMrCK,GAAc,MACpB,GAA0B,iBAAfC,WAAyB,OAAOA,WAEvCtM,OAAOuM,eAAevM,OAAOwM,UAAW,iBAAkB,CACtD,GAAAjK,GACI,OAAOzD,IACX,EACA2N,cAAc,IAElB,IAGI,GAA8B,oBAAnBC,eAAgC,OAAOA,cACtD,CAAE,eAES1M,OAAOwM,UAAUE,cAC5B,CAGJ,MAAoB,oBAATC,KAA6BA,KACb,oBAAXC,OAA+BA,OACpB,oBAAXC,OAA+BA,YAA1C,CAER,EAvBuB,GA4BdC,GAAc,CACpBlK,KAAMW,EACNa,OAAQE,EACRX,OAAQU,EACR4E,OAAQE,EACR/B,OAAQ8B,EACR,WAAY+C,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,IAMNW,GAAyBC,IAC/B,QAAO,GACH,IAAK,0BAA0BC,KAAKD,GAChC,MAAO,OACX,IAAK,oBAAoBC,KAAKD,GAC1B,MAAO,SACX,IAAK,oBAAoBC,KAAKD,GAC1B,MAAO,SACX,IAAK,oBAAoBC,KAAKD,GAC1B,MAAO,SACX,IAAK,oBAAoBC,KAAKD,GAC1B,MAAO,SACX,IAAK,cAAcC,KAAKD,GACpB,MAAO,WACX,IAAK,cAAcC,KAAKD,GACpB,MAAO,WACX,IAAK,cAAcC,KAAKD,GACpB,MAAO,WACX,IAAK,cAAcC,KAAKD,GACpB,MAAO,WACX,QACI,MAAM,IAAIE,UAAU,2BAA2BF,KACvD,EAoBMG,GAAW,mCAMXC,GAAgB5O,IAItB,IAAI6O,GAFJ7O,EAAMA,EAAI8O,QAAQ,KAAM,KAEVzQ,OACd,KAAuB,MAAjB2B,EAAI6O,EAAM,MAAaA,EAC7B7O,GAAO6O,EAAM7O,EAAI3B,OAAS2B,EAAI+O,UAAU,EAAGF,GAAO7O,GAAKgP,cACvD,MAAM9N,EAAM,IAAIjD,YAAyB,EAAb+B,EAAI3B,OAAa,EAAI,GAC3CY,EAAM,IAAIjB,WAAWkD,GAC3B,IAAI+N,EAAO,EACP9L,EAAQ,EACR+L,EAAQ,EACZ,IAAI,IAAIrP,EAAI,EAAGA,EAAIG,EAAI3B,OAAQwB,IAAI,CAC/B,MAAMsP,EAAMR,GAASS,QAAQpP,EAAIH,IACjC,IAAa,IAATsP,EAAY,MAAM,IAAIT,UAAU,4BAA4B1O,EAAIH,MACpEsD,EAAQA,GAAS,EAAIgM,EACrBF,GAAQ,EACJA,GAAQ,IACRA,GAAQ,EACRhQ,EAAIiQ,KAAW/L,IAAU8L,EAEjC,CACA,OAAOhQ,CAAG,EAOJoQ,GAAgBpQ,IACtB,IAAIgQ,EAAO,EACP9L,EAAQ,EACRnD,EAAM,GACV,IAAI,IAAIH,EAAI,EAAGA,EAAIZ,EAAIZ,OAAQwB,IAG3B,IAFAsD,EAAQA,GAAS,EAAIlE,EAAIY,GACzBoP,GAAQ,EACFA,GAAQ,GACVjP,GAAO2O,GAASxL,IAAU8L,EAAO,EAAI,IACrCA,GAAQ,EAMhB,OAHIA,EAAO,IACPjP,GAAO2O,GAASxL,GAAS,EAAI8L,EAAO,KAEjCjP,CAAG,EAOJsP,GAAatP,IAEnBA,EAAMA,EAAI8O,QAAQ,KAAM,IACxB,MAAM5N,EAAM,IAAIjD,YAAY+B,EAAI3B,OAAS,GACnCY,EAAM,IAAIjB,WAAWkD,GAC3B,IAAI,IAAIrB,EAAI,EAAGA,EAAIG,EAAI3B,OAAQwB,GAAK,EAChCZ,EAAIY,EAAI,GAAK0P,SAASvP,EAAI+O,UAAUlP,EAAGA,EAAI,GAAI,IAEnD,OAAOZ,CAAG,EAMJuQ,GAAavQ,IACnB,IAAIe,EAAM,GACV,IAAI,IAAIH,EAAI,EAAGA,EAAIZ,EAAIZ,OAAQwB,IAAI,CAC/B,MAAM4P,EAAMxQ,EAAIY,GAAG6P,SAAS,IACT,IAAfD,EAAIpR,SAAc2B,GAAO,KAC7BA,GAAOyP,CACX,CACA,OAAOzP,EAAIgP,aAAa,EAOlBW,GAAgB3P,IACtB,MAAMkB,EAAM,IAAIjD,YAAY+B,EAAI3B,QAC1BY,EAAM,IAAIjB,WAAWkD,GAC3B,IAAI,IAAIrB,EAAI,EAAGA,EAAIG,EAAI3B,OAAQwB,IAC3BZ,EAAIY,GAAyB,IAApBG,EAAI4P,WAAW/P,GAE5B,OAAOZ,CAAG,EAMJ4Q,GAAgB5Q,IACtB,IAAIe,EAAM,GACV,IAAI,IAAIH,EAAI,EAAGA,EAAIZ,EAAIZ,OAAQwB,IAC3BG,GAAO8P,OAAOC,aAAa9Q,EAAIY,IAEnC,OAAOG,CAAG,EAMJgQ,GAAUnC,GAAY5N,YAAc,IAAI4N,GAAY5N,YAAgB,KAIpEgQ,GAAUpC,GAAYqC,YAAc,IAAIrC,GAAYqC,YAAgB,KAKpEC,GAAcnQ,IACpB,IAAKgQ,GACD,MAAM,IAAIrS,MAAM,8BAEpB,OAAOqS,GAAQ9P,OAAOF,EAAI,EAMpBoQ,GAAcnR,IACpB,IAAKgR,GACD,MAAM,IAAItS,MAAM,8BAEpB,OAAOsS,GAAQI,OAAOpR,EAAI,EAiB1B,MAAMqR,GAKJ,iBAAOC,CAAWvQ,GAChB,OAAO,IAAIsQ,GAAO,CACdnR,OAAQwQ,GAAa3P,GAAKb,QAElC,CAKE,eAAOqR,CAASxQ,GACd,OAAO,IAAIsQ,GAAO,CACdnR,OAAQgR,GAAWnQ,GAAKb,QAEhC,CAKE,iBAAOsR,CAAWzQ,GAChB,OAAO,IAAIsQ,GAAO,CACdnR,OAAQyP,GAAa5O,GAAKb,QAElC,CAKE,cAAOuR,CAAQ1Q,GACb,OAAO,IAAIsQ,GAAO,CACdnR,OAAQmQ,GAAUtP,GAAKb,QAE/B,CAKE,UAAIA,GACF,OAAOmB,KAAKgN,MAAMnO,MACtB,CAIE,UAAIwR,GAOF,OANAnP,OAAOuM,eAAezN,KAAM,SAAU,CAClCsQ,YAAY,EACZC,UAAU,EACV5C,cAAc,EACd9K,MAAO0M,GAAavP,KAAKgN,SAEtBhN,KAAKqQ,MAChB,CAIE,QAAIG,GAOF,OANAtP,OAAOuM,eAAezN,KAAM,OAAQ,CAChCsQ,YAAY,EACZC,UAAU,EACV5C,cAAc,EACd9K,MAAOiN,GAAW9P,KAAKgN,SAEpBhN,KAAKwQ,IAChB,CAIE,UAAIC,GAOF,OANAvP,OAAOuM,eAAezN,KAAM,SAAU,CAClCsQ,YAAY,EACZC,UAAU,EACV5C,cAAc,EACd9K,MAAOkM,GAAa/O,KAAKgN,SAEtBhN,KAAKyQ,MAChB,CAIE,OAAItB,GAOF,OANAjO,OAAOuM,eAAezN,KAAM,MAAO,CAC/BsQ,YAAY,EACZC,UAAU,EACV5C,cAAc,EACd9K,MAAOqM,GAAUlP,KAAKgN,SAEnBhN,KAAKmP,GAChB,CAME,WAAAtR,EAAY,OAAEgB,EAAM,KAAE6R,EAAO,IAAO,CAAC,GAKnC1Q,KAAKgN,WAA0B,IAAXnO,EAhHJ,CAAC6R,IACrB,GAAInD,GAAYoD,QAAQC,gBACpB,OAAOrD,GAAYoD,OAAOC,gBAAgB,IAAIlT,WAAWgT,IAEzD,MAAM,IAAIrT,MAAM,iCACpB,EA2GiDwT,CAAYH,GAAQ,IAAIhT,WAAWmB,GAEhFqC,OAAOuM,eAAezN,KAAM,QAAS,CACjCsQ,YAAY,EACZC,UAAU,EACV5C,cAAc,EACd9K,MAAO7C,KAAKgN,OAEpB,EAyBA,MAAM8D,GAYJ,mBAAWC,GACT,MAAO,CACHC,OAAQ,GACRC,MAAO,UACPC,eAAe,EACfhD,UAAW,OACXiD,OAAQ,EACRC,QAAS,EACTtD,OAAQ,EAEhB,CASE,eAAOuD,EAAS,OAAEC,EAAM,UAAEpD,EAAY4C,GAAKC,SAAS7C,UAAS,OAAEiD,EAASL,GAAKC,SAASI,OAAM,QAAEC,EAAUN,GAAKC,SAASK,UACpH,MAAM7Q,EAvUS,EAAC2N,EAAWzM,EAAKK,KACpC,GAAID,EAAM,CACN,MAAMT,EAAO4M,GAAYE,IAAcF,GAAYC,GAAsBC,IACzE,OAAOrM,EAAKT,EAAMK,EAAKK,EAC3B,CACI,MAAM,IAAIzE,MAAM,wBACpB,EAiUmBkU,CAAWrD,EAAWoD,EAAOtE,MAj+C7B,CAACwE,IACpB,MAAM5Q,EAAM,IAAIjD,YAAY,GACtBgB,EAAM,IAAIjB,WAAWkD,GAC3B,IAAI6Q,EAAMD,EACV,IAAI,IAAIjS,EAAI,EAAGA,GAAK,GACJ,IAARkS,EADelS,IAEnBZ,EAAIY,GAAW,IAANkS,EACTA,GAAO9S,EAAIY,GACXkS,GAAO,IAEX,OAAO9S,CAAG,EAu9C6C+S,CAAWN,IACxDhN,EAAyC,GAAhC7D,EAAOA,EAAOxB,WAAa,GAE1C,SAD+B,IAAjBwB,EAAO6D,KAAkB,IAA2B,IAArB7D,EAAO6D,EAAS,KAAa,IAA2B,IAArB7D,EAAO6D,EAAS,KAAa,EAAyB,IAArB7D,EAAO6D,EAAS,IAAY,IAAM+M,GACxI/B,WAAWuC,SAASR,EAAQ,IAC3C,CAME,QAAAE,EAAS,QAAED,EAAUpR,KAAKoR,WAAc,CAAC,GACvC,OAAON,GAAKO,SAAS,CACjBC,OAAQtR,KAAKsR,OACbpD,UAAWlO,KAAKkO,UAChBiD,OAAQnR,KAAKmR,OACbC,WAER,CAWE,eAAOQ,EAAS,MAAEC,EAAK,OAAEP,EAAM,UAAEpD,EAAS,OAAEiD,EAASL,GAAKC,SAASI,OAAM,QAAEC,EAAUN,GAAKC,SAASK,QAAO,OAAEtD,EAASgD,GAAKC,SAASjD,SAEjI,GAAI+D,EAAM9T,SAAWoT,EAAQ,OAAO,KACpC,IAAIW,EAAQ,KACZ,MAAMC,EAA+BxS,IACjC,MAAMyS,EAAiBlB,GAAKO,SAAS,CACjCC,SACApD,YACAiD,SACAC,QAAS7R,IAtFG,EAAC9B,EAAGF,KAC5B,CACI,GAAIE,EAAEM,SAAWR,EAAEQ,OACf,MAAM,IAAIqQ,UAAU,2CAExB,IAAI7O,GAAK,EACLhB,EAAM,EACV,OAAQgB,EAAI9B,EAAEM,QACVQ,GAAOd,EAAE6R,WAAW/P,GAAKhC,EAAE+R,WAAW/P,GAE1C,OAAe,IAARhB,CACX,GA6EY0T,CAAgBJ,EAAOG,KACvBF,EAAQvS,EAAI6R,EAChB,EAEJW,EAAMX,GACN,IAAI,IAAI7R,EAAI,EAAGA,GAAKuO,GAAoB,OAAVgE,IAC1BC,EAAMX,EAAU7R,GACF,OAAVuS,KACJC,EAAMX,EAAU7R,GACF,OAAVuS,KAJwCvS,GAMhD,OAAOuS,CACX,CAQE,QAAAF,EAAS,MAAEC,EAAK,QAAET,EAAUpR,KAAKoR,QAAO,OAAEtD,IACxC,OAAOgD,GAAKc,SAAS,CACjBC,QACAP,OAAQtR,KAAKsR,OACbpD,UAAWlO,KAAKkO,UAChBiD,OAAQnR,KAAKmR,OACbC,UACAtD,UAER,CAIE,QAAAsB,GACE,MAAM8C,EAAIC,mBACV,MAAO,mBAAuBnS,KAAKgR,OAAOjT,OAAS,EAAIiC,KAAKkR,cAAgB,GAAGgB,EAAElS,KAAKgR,WAAWkB,EAAElS,KAAKiR,iBAAiBiB,EAAElS,KAAKgR,WAAa,GAAGkB,EAAElS,KAAKiR,iBAAiBiB,EAAElS,KAAKgR,WAAa,GAAGkB,EAAElS,KAAKiR,WAAc,UAAUiB,EAAElS,KAAKsR,OAAOb,WAAa,aAAayB,EAAElS,KAAKkO,cAAgB,UAAUgE,EAAElS,KAAKmR,WAAa,WAAWe,EAAElS,KAAKoR,UACjV,CAWE,WAAAvT,EAAY,OAAEmT,EAASF,GAAKC,SAASC,OAAM,MAAEC,EAAQH,GAAKC,SAASE,MAAK,cAAEC,EAAgBJ,GAAKC,SAASG,cAAa,OAAEI,EAAS,IAAItB,GAAQ,UAAE9B,EAAY4C,GAAKC,SAAS7C,UAAS,OAAEiD,EAASL,GAAKC,SAASI,OAAM,QAAEC,EAAUN,GAAKC,SAASK,SAAY,CAAC,GAIrPpR,KAAKgR,OAASA,EAIdhR,KAAKiR,MAAQA,EAIbjR,KAAKkR,cAAgBA,EAIrBlR,KAAKsR,OAA2B,iBAAXA,EAAsBtB,GAAOG,WAAWmB,GAAUA,EAIvEtR,KAAKkO,UAAYD,GAAsBC,GAIvClO,KAAKmR,OAASA,EAIdnR,KAAKoR,QAAUA,CACnB,EAMA,MAAMgB,GAYJ,mBAAWrB,GACT,MAAO,CACHC,OAAQ,GACRC,MAAO,UACPC,eAAe,EACfhD,UAAW,OACXiD,OAAQ,EACRkB,OAAQ,GACRvE,OAAQ,EAEhB,CAUE,eAAOuD,EAAS,OAAEC,EAAM,UAAEpD,EAAS,OAAEiD,EAAM,OAAEkB,EAASD,GAAKrB,SAASsB,OAAM,UAAEC,EAAYC,KAAKC,QAC3F,OAAO1B,GAAKO,SAAS,CACjBC,SACApD,YACAiD,SACAC,QAAS7O,KAAK0K,MAAMqF,EAAY,IAAOD,IAE/C,CAME,QAAAhB,EAAS,UAAEiB,EAAYC,KAAKC,OAAU,CAAC,GACrC,OAAOJ,GAAKf,SAAS,CACjBC,OAAQtR,KAAKsR,OACbpD,UAAWlO,KAAKkO,UAChBiD,OAAQnR,KAAKmR,OACbkB,OAAQrS,KAAKqS,OACbC,aAER,CAYE,eAAOV,EAAS,MAAEC,EAAK,OAAEP,EAAM,UAAEpD,EAAS,OAAEiD,EAAM,OAAEkB,EAASD,GAAKrB,SAASsB,OAAM,UAAEC,EAAYC,KAAKC,MAAK,OAAE1E,IACzG,OAAOgD,GAAKc,SAAS,CACjBC,QACAP,SACApD,YACAiD,SACAC,QAAS7O,KAAK0K,MAAMqF,EAAY,IAAOD,GACvCvE,UAER,CAQE,QAAA8D,EAAS,MAAEC,EAAK,UAAES,EAAS,OAAExE,IAC3B,OAAOsE,GAAKR,SAAS,CACjBC,QACAP,OAAQtR,KAAKsR,OACbpD,UAAWlO,KAAKkO,UAChBiD,OAAQnR,KAAKmR,OACbkB,OAAQrS,KAAKqS,OACbC,YACAxE,UAER,CAIE,QAAAsB,GACE,MAAM8C,EAAIC,mBACV,MAAO,mBAAuBnS,KAAKgR,OAAOjT,OAAS,EAAIiC,KAAKkR,cAAgB,GAAGgB,EAAElS,KAAKgR,WAAWkB,EAAElS,KAAKiR,iBAAiBiB,EAAElS,KAAKgR,WAAa,GAAGkB,EAAElS,KAAKiR,iBAAiBiB,EAAElS,KAAKgR,WAAa,GAAGkB,EAAElS,KAAKiR,WAAc,UAAUiB,EAAElS,KAAKsR,OAAOb,WAAa,aAAayB,EAAElS,KAAKkO,cAAgB,UAAUgE,EAAElS,KAAKmR,WAAa,UAAUe,EAAElS,KAAKqS,SAChV,CAWE,WAAAxU,EAAY,OAAEmT,EAASoB,GAAKrB,SAASC,OAAM,MAAEC,EAAQmB,GAAKrB,SAASE,MAAK,cAAEC,EAAgBkB,GAAKrB,SAASG,cAAa,OAAEI,EAAS,IAAItB,GAAQ,UAAE9B,EAAYkE,GAAKrB,SAAS7C,UAAS,OAAEiD,EAASiB,GAAKrB,SAASI,OAAM,OAAEkB,EAASD,GAAKrB,SAASsB,QAAW,CAAC,GAInPrS,KAAKgR,OAASA,EAIdhR,KAAKiR,MAAQA,EAIbjR,KAAKkR,cAAgBA,EAIrBlR,KAAKsR,OAA2B,iBAAXA,EAAsBtB,GAAOG,WAAWmB,GAAUA,EAIvEtR,KAAKkO,UAAYD,GAAsBC,GAIvClO,KAAKmR,OAASA,EAIdnR,KAAKqS,OAASA,CAClB","sources":["webpack://bus/./node_modules/otpauth/dist/otpauth.esm.js"],"sourcesContent":["//! otpauth 9.3.6 | (c) Héctor Molinero Fernández | MIT | https://github.com/hectorm/otpauth\n//! noble-hashes 1.6.1 | (c) Paul Miller | MIT | https://github.com/paulmillr/noble-hashes\n/// <reference types=\"./otpauth.d.ts\" />\n// @ts-nocheck\n/**\n * Converts an integer to an Uint8Array.\n * @param {number} num Integer.\n * @returns {Uint8Array} Uint8Array.\n */ const uintDecode = (num)=>{\n    const buf = new ArrayBuffer(8);\n    const arr = new Uint8Array(buf);\n    let acc = num;\n    for(let i = 7; i >= 0; i--){\n        if (acc === 0) break;\n        arr[i] = acc & 255;\n        acc -= arr[i];\n        acc /= 256;\n    }\n    return arr;\n};\n\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n// copied from utils\nfunction isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n}\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b)) throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift)=>word << 32 - shift | word >>> shift;\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift)=>word << shift | word >>> 32 - shift >>> 0;\nconst isLE = /* @__PURE__ */ (()=>new Uint8Array(new Uint32Array([\n        0x11223344\n    ]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nconst byteSwap = (word)=>word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for(let i = 0; i < arr.length; i++){\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === 'string') data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\n\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n    constructor(hash, _key){\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key)=>new HMAC(hash, key);\n\n/**\n * Polyfill for Safari 14\n */ function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number(value >> _32n & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/**\n * Choice: a ? b : c\n */ const Chi = (a, b, c)=>a & b ^ ~a & c;\n/**\n * Majority function, true if any two inputs is true\n */ const Maj = (a, b, c)=>a & b ^ a & c ^ b & c;\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */ class HashMD extends Hash {\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for(let i = pos; i < blockLen; i++)buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen) to.buffer.set(buffer);\n        return to;\n    }\n    constructor(blockLen, outputLen, padOffset, isLE){\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n}\n\n// SHA1 (RFC 3174). It was cryptographically broken: prefer newer algorithms.\n// Initial state\nconst SHA1_IV = /* @__PURE__ */ new Uint32Array([\n    0x67452301,\n    0xefcdab89,\n    0x98badcfe,\n    0x10325476,\n    0xc3d2e1f0\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\nclass SHA1 extends HashMD {\n    get() {\n        const { A, B, C, D, E } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E\n        ];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for(let i = 0; i < 16; i++, offset += 4)SHA1_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 80; i++)SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for(let i = 0; i < 80; i++){\n            let F, K;\n            if (i < 20) {\n                F = Chi(B, C, D);\n                K = 0x5a827999;\n            } else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            } else if (i < 60) {\n                F = Maj(B, C, D);\n                K = 0x8f1bbcdc;\n            } else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = rotl(A, 5) + F + E + K + SHA1_W[i] | 0;\n            E = D;\n            D = C;\n            C = rotl(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        SHA1_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n    constructor(){\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n}\n/**\n * SHA1 (RFC 3174) hash function.\n * It was cryptographically broken: prefer newer algorithms.\n * @param message - data that would be hashed\n */ const sha1 = /* @__PURE__ */ wrapConstructor(()=>new SHA1());\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per late 2024.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E,\n            F,\n            G,\n            H\n        ];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 64; i++){\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for(let i = 0; i < 64; i++){\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = sigma0 + Maj(A, B, C) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = D + T1 | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = T1 + T2 | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        F = F + this.F | 0;\n        G = G + this.G | 0;\n        H = H + this.H | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n    constructor(){\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor(){\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */ const sha256 = /* @__PURE__ */ wrapConstructor(()=>new SHA256());\n/**\n * SHA2-224 hash function\n */ const sha224 = /* @__PURE__ */ wrapConstructor(()=>new SHA224());\n\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.\n// TODO: re-check https://issues.chromium.org/issues/42212588\nfunction fromBig(n, le = false) {\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for(let i = 0; i < lst.length; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\nconst toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s)=>h >>> s;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l)=>l;\nconst rotr32L = (h, _l)=>h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig,\n    split,\n    toBig,\n    shrSH,\n    shrSL,\n    rotrSH,\n    rotrSL,\n    rotrBH,\n    rotrBL,\n    rotr32H,\n    rotr32L,\n    rotlSH,\n    rotlSL,\n    rotlBH,\n    rotlBL,\n    add,\n    add3L,\n    add3H,\n    add4L,\n    add4H,\n    add5H,\n    add5L\n};\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (()=>u64.split([\n        '0x428a2f98d728ae22',\n        '0x7137449123ef65cd',\n        '0xb5c0fbcfec4d3b2f',\n        '0xe9b5dba58189dbbc',\n        '0x3956c25bf348b538',\n        '0x59f111f1b605d019',\n        '0x923f82a4af194f9b',\n        '0xab1c5ed5da6d8118',\n        '0xd807aa98a3030242',\n        '0x12835b0145706fbe',\n        '0x243185be4ee4b28c',\n        '0x550c7dc3d5ffb4e2',\n        '0x72be5d74f27b896f',\n        '0x80deb1fe3b1696b1',\n        '0x9bdc06a725c71235',\n        '0xc19bf174cf692694',\n        '0xe49b69c19ef14ad2',\n        '0xefbe4786384f25e3',\n        '0x0fc19dc68b8cd5b5',\n        '0x240ca1cc77ac9c65',\n        '0x2de92c6f592b0275',\n        '0x4a7484aa6ea6e483',\n        '0x5cb0a9dcbd41fbd4',\n        '0x76f988da831153b5',\n        '0x983e5152ee66dfab',\n        '0xa831c66d2db43210',\n        '0xb00327c898fb213f',\n        '0xbf597fc7beef0ee4',\n        '0xc6e00bf33da88fc2',\n        '0xd5a79147930aa725',\n        '0x06ca6351e003826f',\n        '0x142929670a0e6e70',\n        '0x27b70a8546d22ffc',\n        '0x2e1b21385c26c926',\n        '0x4d2c6dfc5ac42aed',\n        '0x53380d139d95b3df',\n        '0x650a73548baf63de',\n        '0x766a0abb3c77b2a8',\n        '0x81c2c92e47edaee6',\n        '0x92722c851482353b',\n        '0xa2bfe8a14cf10364',\n        '0xa81a664bbc423001',\n        '0xc24b8b70d0f89791',\n        '0xc76c51a30654be30',\n        '0xd192e819d6ef5218',\n        '0xd69906245565a910',\n        '0xf40e35855771202a',\n        '0x106aa07032bbd1b8',\n        '0x19a4c116b8d2d0c8',\n        '0x1e376c085141ab53',\n        '0x2748774cdf8eeb99',\n        '0x34b0bcb5e19b48a8',\n        '0x391c0cb3c5c95a63',\n        '0x4ed8aa4ae3418acb',\n        '0x5b9cca4f7763e373',\n        '0x682e6ff3d6b2b8a3',\n        '0x748f82ee5defb2fc',\n        '0x78a5636f43172f60',\n        '0x84c87814a1f0ab72',\n        '0x8cc702081a6439ec',\n        '0x90befffa23631e28',\n        '0xa4506cebde82bde9',\n        '0xbef9a3f7b2c67915',\n        '0xc67178f2e372532b',\n        '0xca273eceea26619c',\n        '0xd186b8c721c0c207',\n        '0xeada7dd6cde0eb1e',\n        '0xf57d4f7fee6ed178',\n        '0x06f067aa72176fba',\n        '0x0a637dc5a2c898a6',\n        '0x113f9804bef90dae',\n        '0x1b710b35131c471b',\n        '0x28db77f523047d84',\n        '0x32caab7b40c72493',\n        '0x3c9ebe0a15c9bebc',\n        '0x431d67c49c100d4c',\n        '0x4cc5d4becb3e42b6',\n        '0x597f299cfc657e2a',\n        '0x5fcb6fab3ad6faec',\n        '0x6c44198c4a475817'\n    ].map((n)=>BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends HashMD {\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [\n            Ah,\n            Al,\n            Bh,\n            Bl,\n            Ch,\n            Cl,\n            Dh,\n            Dl,\n            Eh,\n            El,\n            Fh,\n            Fl,\n            Gh,\n            Gl,\n            Hh,\n            Hl\n        ];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4){\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32(offset += 4);\n        }\n        for(let i = 16; i < 80; i++){\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for(let i = 0; i < 80; i++){\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = Eh & Fh ^ ~Eh & Gh;\n            const CHIl = El & Fl ^ ~El & Gl;\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n    constructor(){\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nconst sha512 = /* @__PURE__ */ wrapConstructor(()=>new SHA512());\nconst sha384 = /* @__PURE__ */ wrapConstructor(()=>new SHA384());\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){\n    // Pi\n    [x, y] = [\n        y,\n        (2 * x + 3 * y) % 5\n    ];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    // Iota\n    let t = _0n;\n    for(let j = 0; j < 7; j++){\n        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n        if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s)=>s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\nconst rotlL = (h, l, s)=>s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for(let round = 24 - rounds; round < 24; round++){\n        // Theta θ\n        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for(let x = 0; x < 10; x += 2){\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for(let y = 0; y < 50; y += 10){\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for(let t = 0; t < 24; t++){\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for(let y = 0; y < 50; y += 10){\n            for(let x = 0; x < 10; x++)B[x] = s[y + x];\n            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nclass Keccak extends Hash {\n    keccak() {\n        if (!isLE) byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE) byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen) this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished) throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n}\nconst gen = (suffix, blockLen, outputLen)=>wrapConstructor(()=>new Keccak(blockLen, suffix, outputLen));\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */ const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\n\n/**\n * \"globalThis\" ponyfill.\n * @see [A horrifying globalThis polyfill in universal JavaScript](https://mathiasbynens.be/notes/globalthis)\n * @type {Object.<string, *>}\n */ const globalScope = (()=>{\n    if (typeof globalThis === \"object\") return globalThis;\n    else {\n        Object.defineProperty(Object.prototype, \"__GLOBALTHIS__\", {\n            get () {\n                return this;\n            },\n            configurable: true\n        });\n        try {\n            // @ts-expect-error\n            // eslint-disable-next-line no-undef\n            if (typeof __GLOBALTHIS__ !== \"undefined\") return __GLOBALTHIS__;\n        } finally{\n            // @ts-expect-error\n            delete Object.prototype.__GLOBALTHIS__;\n        }\n    }\n    // Still unable to determine \"globalThis\", fall back to a naive method.\n    if (typeof self !== \"undefined\") return self;\n    else if (typeof window !== \"undefined\") return window;\n    else if (typeof global !== \"undefined\") return global;\n    return undefined;\n})();\n\n/**\n * @noble/hashes hash functions.\n * @type {Object.<string, sha1|sha224|sha256|sha384|sha512|sha3_224|sha3_256|sha3_384|sha3_512>}\n */ const nobleHashes = {\n    SHA1: sha1,\n    SHA224: sha224,\n    SHA256: sha256,\n    SHA384: sha384,\n    SHA512: sha512,\n    \"SHA3-224\": sha3_224,\n    \"SHA3-256\": sha3_256,\n    \"SHA3-384\": sha3_384,\n    \"SHA3-512\": sha3_512\n};\n/**\n * Canonicalizes a hash algorithm name.\n * @param {string} algorithm Hash algorithm name.\n * @returns {\"SHA1\"|\"SHA224\"|\"SHA256\"|\"SHA384\"|\"SHA512\"|\"SHA3-224\"|\"SHA3-256\"|\"SHA3-384\"|\"SHA3-512\"} Canonicalized hash algorithm name.\n */ const canonicalizeAlgorithm = (algorithm)=>{\n    switch(true){\n        case /^(?:SHA-?1|SSL3-SHA1)$/i.test(algorithm):\n            return \"SHA1\";\n        case /^SHA(?:2?-)?224$/i.test(algorithm):\n            return \"SHA224\";\n        case /^SHA(?:2?-)?256$/i.test(algorithm):\n            return \"SHA256\";\n        case /^SHA(?:2?-)?384$/i.test(algorithm):\n            return \"SHA384\";\n        case /^SHA(?:2?-)?512$/i.test(algorithm):\n            return \"SHA512\";\n        case /^SHA3-224$/i.test(algorithm):\n            return \"SHA3-224\";\n        case /^SHA3-256$/i.test(algorithm):\n            return \"SHA3-256\";\n        case /^SHA3-384$/i.test(algorithm):\n            return \"SHA3-384\";\n        case /^SHA3-512$/i.test(algorithm):\n            return \"SHA3-512\";\n        default:\n            throw new TypeError(`Unknown hash algorithm: ${algorithm}`);\n    }\n};\n/**\n * Calculates an HMAC digest.\n * @param {string} algorithm Algorithm.\n * @param {Uint8Array} key Key.\n * @param {Uint8Array} message Message.\n * @returns {Uint8Array} Digest.\n */ const hmacDigest = (algorithm, key, message)=>{\n    if (hmac) {\n        const hash = nobleHashes[algorithm] ?? nobleHashes[canonicalizeAlgorithm(algorithm)];\n        return hmac(hash, key, message);\n    } else {\n        throw new Error(\"Missing HMAC function\");\n    }\n};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */ const ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n/**\n * Converts a base32 string to an Uint8Array (RFC 4648).\n * @see [LinusU/base32-decode](https://github.com/LinusU/base32-decode)\n * @param {string} str Base32 string.\n * @returns {Uint8Array} Uint8Array.\n */ const base32Decode = (str)=>{\n    // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n    str = str.replace(/ /g, \"\");\n    // Canonicalize to all upper case and remove padding if it exists.\n    let end = str.length;\n    while(str[end - 1] === \"=\")--end;\n    str = (end < str.length ? str.substring(0, end) : str).toUpperCase();\n    const buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n    const arr = new Uint8Array(buf);\n    let bits = 0;\n    let value = 0;\n    let index = 0;\n    for(let i = 0; i < str.length; i++){\n        const idx = ALPHABET.indexOf(str[i]);\n        if (idx === -1) throw new TypeError(`Invalid character found: ${str[i]}`);\n        value = value << 5 | idx;\n        bits += 5;\n        if (bits >= 8) {\n            bits -= 8;\n            arr[index++] = value >>> bits;\n        }\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a base32 string (RFC 4648).\n * @see [LinusU/base32-encode](https://github.com/LinusU/base32-encode)\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Base32 string.\n */ const base32Encode = (arr)=>{\n    let bits = 0;\n    let value = 0;\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        value = value << 8 | arr[i];\n        bits += 8;\n        while(bits >= 5){\n            str += ALPHABET[value >>> bits - 5 & 31];\n            bits -= 5;\n        }\n    }\n    if (bits > 0) {\n        str += ALPHABET[value << 5 - bits & 31];\n    }\n    return str;\n};\n\n/**\n * Converts a hexadecimal string to an Uint8Array.\n * @param {string} str Hexadecimal string.\n * @returns {Uint8Array} Uint8Array.\n */ const hexDecode = (str)=>{\n    // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n    str = str.replace(/ /g, \"\");\n    const buf = new ArrayBuffer(str.length / 2);\n    const arr = new Uint8Array(buf);\n    for(let i = 0; i < str.length; i += 2){\n        arr[i / 2] = parseInt(str.substring(i, i + 2), 16);\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a hexadecimal string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Hexadecimal string.\n */ const hexEncode = (arr)=>{\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        const hex = arr[i].toString(16);\n        if (hex.length === 1) str += \"0\";\n        str += hex;\n    }\n    return str.toUpperCase();\n};\n\n/**\n * Converts a Latin-1 string to an Uint8Array.\n * @param {string} str Latin-1 string.\n * @returns {Uint8Array} Uint8Array.\n */ const latin1Decode = (str)=>{\n    const buf = new ArrayBuffer(str.length);\n    const arr = new Uint8Array(buf);\n    for(let i = 0; i < str.length; i++){\n        arr[i] = str.charCodeAt(i) & 0xff;\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a Latin-1 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Latin-1 string.\n */ const latin1Encode = (arr)=>{\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        str += String.fromCharCode(arr[i]);\n    }\n    return str;\n};\n\n/**\n * TextEncoder instance.\n * @type {TextEncoder|null}\n */ const ENCODER = globalScope.TextEncoder ? new globalScope.TextEncoder() : null;\n/**\n * TextDecoder instance.\n * @type {TextDecoder|null}\n */ const DECODER = globalScope.TextDecoder ? new globalScope.TextDecoder() : null;\n/**\n * Converts an UTF-8 string to an Uint8Array.\n * @param {string} str String.\n * @returns {Uint8Array} Uint8Array.\n */ const utf8Decode = (str)=>{\n    if (!ENCODER) {\n        throw new Error(\"Encoding API not available\");\n    }\n    return ENCODER.encode(str);\n};\n/**\n * Converts an Uint8Array to an UTF-8 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} String.\n */ const utf8Encode = (arr)=>{\n    if (!DECODER) {\n        throw new Error(\"Encoding API not available\");\n    }\n    return DECODER.decode(arr);\n};\n\n/**\n * Returns random bytes.\n * @param {number} size Size.\n * @returns {Uint8Array} Random bytes.\n */ const randomBytes = (size)=>{\n    if (globalScope.crypto?.getRandomValues) {\n        return globalScope.crypto.getRandomValues(new Uint8Array(size));\n    } else {\n        throw new Error(\"Cryptography API not available\");\n    }\n};\n\n/**\n * OTP secret key.\n */ class Secret {\n    /**\n   * Converts a Latin-1 string to a Secret object.\n   * @param {string} str Latin-1 string.\n   * @returns {Secret} Secret object.\n   */ static fromLatin1(str) {\n        return new Secret({\n            buffer: latin1Decode(str).buffer\n        });\n    }\n    /**\n   * Converts an UTF-8 string to a Secret object.\n   * @param {string} str UTF-8 string.\n   * @returns {Secret} Secret object.\n   */ static fromUTF8(str) {\n        return new Secret({\n            buffer: utf8Decode(str).buffer\n        });\n    }\n    /**\n   * Converts a base32 string to a Secret object.\n   * @param {string} str Base32 string.\n   * @returns {Secret} Secret object.\n   */ static fromBase32(str) {\n        return new Secret({\n            buffer: base32Decode(str).buffer\n        });\n    }\n    /**\n   * Converts a hexadecimal string to a Secret object.\n   * @param {string} str Hexadecimal string.\n   * @returns {Secret} Secret object.\n   */ static fromHex(str) {\n        return new Secret({\n            buffer: hexDecode(str).buffer\n        });\n    }\n    /**\n   * Secret key buffer.\n   * @deprecated For backward compatibility, the \"bytes\" property should be used instead.\n   * @type {ArrayBufferLike}\n   */ get buffer() {\n        return this.bytes.buffer;\n    }\n    /**\n   * Latin-1 string representation of secret key.\n   * @type {string}\n   */ get latin1() {\n        Object.defineProperty(this, \"latin1\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: latin1Encode(this.bytes)\n        });\n        return this.latin1;\n    }\n    /**\n   * UTF-8 string representation of secret key.\n   * @type {string}\n   */ get utf8() {\n        Object.defineProperty(this, \"utf8\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: utf8Encode(this.bytes)\n        });\n        return this.utf8;\n    }\n    /**\n   * Base32 string representation of secret key.\n   * @type {string}\n   */ get base32() {\n        Object.defineProperty(this, \"base32\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: base32Encode(this.bytes)\n        });\n        return this.base32;\n    }\n    /**\n   * Hexadecimal string representation of secret key.\n   * @type {string}\n   */ get hex() {\n        Object.defineProperty(this, \"hex\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: hexEncode(this.bytes)\n        });\n        return this.hex;\n    }\n    /**\n   * Creates a secret key object.\n   * @param {Object} [config] Configuration options.\n   * @param {ArrayBufferLike} [config.buffer] Secret key buffer.\n   * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n   */ constructor({ buffer, size = 20 } = {}){\n        /**\n     * Secret key.\n     * @type {Uint8Array}\n     * @readonly\n     */ this.bytes = typeof buffer === \"undefined\" ? randomBytes(size) : new Uint8Array(buffer);\n        // Prevent the \"bytes\" property from being modified.\n        Object.defineProperty(this, \"bytes\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: this.bytes\n        });\n    }\n}\n\n/**\n * Returns true if a is equal to b, without leaking timing information that would allow an attacker to guess one of the values.\n * @param {string} a String a.\n * @param {string} b String b.\n * @returns {boolean} Equality result.\n */ const timingSafeEqual = (a, b)=>{\n    {\n        if (a.length !== b.length) {\n            throw new TypeError(\"Input strings must have the same length\");\n        }\n        let i = -1;\n        let out = 0;\n        while(++i < a.length){\n            out |= a.charCodeAt(i) ^ b.charCodeAt(i);\n        }\n        return out === 0;\n    }\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm.\n * @see [RFC 4226](https://datatracker.ietf.org/doc/html/rfc4226)\n */ class HOTP {\n    /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   counter: number\n   *   window: number\n   * }}\n   */ static get defaults() {\n        return {\n            issuer: \"\",\n            label: \"OTPAuth\",\n            issuerInLabel: true,\n            algorithm: \"SHA1\",\n            digits: 6,\n            counter: 0,\n            window: 1\n        };\n    }\n    /**\n   * Generates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @returns {string} Token.\n   */ static generate({ secret, algorithm = HOTP.defaults.algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter }) {\n        const digest = hmacDigest(algorithm, secret.bytes, uintDecode(counter));\n        const offset = digest[digest.byteLength - 1] & 15;\n        const otp = ((digest[offset] & 127) << 24 | (digest[offset + 1] & 255) << 16 | (digest[offset + 2] & 255) << 8 | digest[offset + 3] & 255) % 10 ** digits;\n        return otp.toString().padStart(digits, \"0\");\n    }\n    /**\n   * Generates an HOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.counter=this.counter++] Counter value.\n   * @returns {string} Token.\n   */ generate({ counter = this.counter++ } = {}) {\n        return HOTP.generate({\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            counter\n        });\n    }\n    /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ static validate({ token, secret, algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter, window = HOTP.defaults.window }) {\n        // Return early if the token length does not match the digit number.\n        if (token.length !== digits) return null;\n        let delta = null;\n        const check = (/** @type {number} */ i)=>{\n            const generatedToken = HOTP.generate({\n                secret,\n                algorithm,\n                digits,\n                counter: i\n            });\n            if (timingSafeEqual(token, generatedToken)) {\n                delta = i - counter;\n            }\n        };\n        check(counter);\n        for(let i = 1; i <= window && delta === null; ++i){\n            check(counter - i);\n            if (delta !== null) break;\n            check(counter + i);\n            if (delta !== null) break;\n        }\n        return delta;\n    }\n    /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.counter=this.counter] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ validate({ token, counter = this.counter, window }) {\n        return HOTP.validate({\n            token,\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            counter,\n            window\n        });\n    }\n    /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */ toString() {\n        const e = encodeURIComponent;\n        return \"otpauth://hotp/\" + `${this.issuer.length > 0 ? this.issuerInLabel ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?`}` + `secret=${e(this.secret.base32)}&` + `algorithm=${e(this.algorithm)}&` + `digits=${e(this.digits)}&` + `counter=${e(this.counter)}`;\n    }\n    /**\n   * Creates an HOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Initial counter value.\n   */ constructor({ issuer = HOTP.defaults.issuer, label = HOTP.defaults.label, issuerInLabel = HOTP.defaults.issuerInLabel, secret = new Secret(), algorithm = HOTP.defaults.algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter } = {}){\n        /**\n     * Account provider.\n     * @type {string}\n     */ this.issuer = issuer;\n        /**\n     * Account label.\n     * @type {string}\n     */ this.label = label;\n        /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */ this.issuerInLabel = issuerInLabel;\n        /**\n     * Secret key.\n     * @type {Secret}\n     */ this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n        /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */ this.algorithm = canonicalizeAlgorithm(algorithm);\n        /**\n     * Token length.\n     * @type {number}\n     */ this.digits = digits;\n        /**\n     * Initial counter value.\n     * @type {number}\n     */ this.counter = counter;\n    }\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm.\n * @see [RFC 6238](https://datatracker.ietf.org/doc/html/rfc6238)\n */ class TOTP {\n    /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   period: number\n   *   window: number\n   * }}\n   */ static get defaults() {\n        return {\n            issuer: \"\",\n            label: \"OTPAuth\",\n            issuerInLabel: true,\n            algorithm: \"SHA1\",\n            digits: 6,\n            period: 30,\n            window: 1\n        };\n    }\n    /**\n   * Generates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */ static generate({ secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now() }) {\n        return HOTP.generate({\n            secret,\n            algorithm,\n            digits,\n            counter: Math.floor(timestamp / 1000 / period)\n        });\n    }\n    /**\n   * Generates a TOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */ generate({ timestamp = Date.now() } = {}) {\n        return TOTP.generate({\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            period: this.period,\n            timestamp\n        });\n    }\n    /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ static validate({ token, secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now(), window }) {\n        return HOTP.validate({\n            token,\n            secret,\n            algorithm,\n            digits,\n            counter: Math.floor(timestamp / 1000 / period),\n            window\n        });\n    }\n    /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ validate({ token, timestamp, window }) {\n        return TOTP.validate({\n            token,\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            period: this.period,\n            timestamp,\n            window\n        });\n    }\n    /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */ toString() {\n        const e = encodeURIComponent;\n        return \"otpauth://totp/\" + `${this.issuer.length > 0 ? this.issuerInLabel ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?`}` + `secret=${e(this.secret.base32)}&` + `algorithm=${e(this.algorithm)}&` + `digits=${e(this.digits)}&` + `period=${e(this.period)}`;\n    }\n    /**\n   * Creates a TOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   */ constructor({ issuer = TOTP.defaults.issuer, label = TOTP.defaults.label, issuerInLabel = TOTP.defaults.issuerInLabel, secret = new Secret(), algorithm = TOTP.defaults.algorithm, digits = TOTP.defaults.digits, period = TOTP.defaults.period } = {}){\n        /**\n     * Account provider.\n     * @type {string}\n     */ this.issuer = issuer;\n        /**\n     * Account label.\n     * @type {string}\n     */ this.label = label;\n        /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */ this.issuerInLabel = issuerInLabel;\n        /**\n     * Secret key.\n     * @type {Secret}\n     */ this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n        /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */ this.algorithm = canonicalizeAlgorithm(algorithm);\n        /**\n     * Token length.\n     * @type {number}\n     */ this.digits = digits;\n        /**\n     * Token time-step duration.\n     * @type {number}\n     */ this.period = period;\n    }\n}\n\n/**\n * Key URI regex (otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS).\n * @type {RegExp}\n */ const OTPURI_REGEX = /^otpauth:\\/\\/([ht]otp)\\/(.+)\\?([A-Z0-9.~_-]+=[^?&]*(?:&[A-Z0-9.~_-]+=[^?&]*)*)$/i;\n/**\n * RFC 4648 base32 alphabet with pad.\n * @type {RegExp}\n */ const SECRET_REGEX = /^[2-7A-Z]+=*$/i;\n/**\n * Regex for supported algorithms.\n * @type {RegExp}\n */ const ALGORITHM_REGEX = /^SHA(?:1|224|256|384|512|3-224|3-256|3-384|3-512)$/i;\n/**\n * Integer regex.\n * @type {RegExp}\n */ const INTEGER_REGEX = /^[+-]?\\d+$/;\n/**\n * Positive integer regex.\n * @type {RegExp}\n */ const POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n/**\n * HOTP/TOTP object/string conversion.\n * @see [Key URI Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format)\n */ class URI {\n    /**\n   * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n   * @param {string} uri Google Authenticator Key URI.\n   * @returns {HOTP|TOTP} HOTP/TOTP object.\n   */ static parse(uri) {\n        let uriGroups;\n        try {\n            uriGroups = uri.match(OTPURI_REGEX);\n        // eslint-disable-next-line no-unused-vars\n        } catch (_) {\n        /* Handled below */ }\n        if (!Array.isArray(uriGroups)) {\n            throw new URIError(\"Invalid URI format\");\n        }\n        // Extract URI groups.\n        const uriType = uriGroups[1].toLowerCase();\n        const uriLabel = uriGroups[2].split(/(?::|%3A) *(.+)/i, 2).map(decodeURIComponent);\n        /** @type {Object.<string, string>} */ const uriParams = uriGroups[3].split(\"&\").reduce((acc, cur)=>{\n            const pairArr = cur.split(/=(.*)/, 2).map(decodeURIComponent);\n            const pairKey = pairArr[0].toLowerCase();\n            const pairVal = pairArr[1];\n            /** @type {Object.<string, string>} */ const pairAcc = acc;\n            pairAcc[pairKey] = pairVal;\n            return pairAcc;\n        }, {});\n        // 'OTP' will be instantiated with 'config' argument.\n        let OTP;\n        const config = {};\n        if (uriType === \"hotp\") {\n            OTP = HOTP;\n            // Counter: required\n            if (typeof uriParams.counter !== \"undefined\" && INTEGER_REGEX.test(uriParams.counter)) {\n                config.counter = parseInt(uriParams.counter, 10);\n            } else {\n                throw new TypeError(\"Missing or invalid 'counter' parameter\");\n            }\n        } else if (uriType === \"totp\") {\n            OTP = TOTP;\n            // Period: optional\n            if (typeof uriParams.period !== \"undefined\") {\n                if (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n                    config.period = parseInt(uriParams.period, 10);\n                } else {\n                    throw new TypeError(\"Invalid 'period' parameter\");\n                }\n            }\n        } else {\n            throw new TypeError(\"Unknown OTP type\");\n        }\n        // Label: required\n        // Issuer: optional\n        if (typeof uriParams.issuer !== \"undefined\") {\n            config.issuer = uriParams.issuer;\n        }\n        if (uriLabel.length === 2) {\n            config.label = uriLabel[1];\n            if (typeof config.issuer === \"undefined\" || config.issuer === \"\") {\n                config.issuer = uriLabel[0];\n            } else if (uriLabel[0] === \"\") {\n                config.issuerInLabel = false;\n            }\n        } else {\n            config.label = uriLabel[0];\n            if (typeof config.issuer !== \"undefined\" && config.issuer !== \"\") {\n                config.issuerInLabel = false;\n            }\n        }\n        // Secret: required\n        if (typeof uriParams.secret !== \"undefined\" && SECRET_REGEX.test(uriParams.secret)) {\n            config.secret = uriParams.secret;\n        } else {\n            throw new TypeError(\"Missing or invalid 'secret' parameter\");\n        }\n        // Algorithm: optional\n        if (typeof uriParams.algorithm !== \"undefined\") {\n            if (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n                config.algorithm = uriParams.algorithm;\n            } else {\n                throw new TypeError(\"Invalid 'algorithm' parameter\");\n            }\n        }\n        // Digits: optional\n        if (typeof uriParams.digits !== \"undefined\") {\n            if (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n                config.digits = parseInt(uriParams.digits, 10);\n            } else {\n                throw new TypeError(\"Invalid 'digits' parameter\");\n            }\n        }\n        return new OTP(config);\n    }\n    /**\n   * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n   * @param {HOTP|TOTP} otp HOTP/TOTP object.\n   * @returns {string} Google Authenticator Key URI.\n   */ static stringify(otp) {\n        if (otp instanceof HOTP || otp instanceof TOTP) {\n            return otp.toString();\n        }\n        throw new TypeError(\"Invalid 'HOTP/TOTP' object\");\n    }\n}\n\n/**\n * Library version.\n * @type {string}\n */ const version = \"9.3.6\";\n\nexport { HOTP, Secret, TOTP, URI, version };\n"],"names":["anumber","n","Number","isSafeInteger","Error","abytes","b","lengths","a","Uint8Array","ArrayBuffer","isView","constructor","name","length","includes","aexists","instance","checkFinished","destroyed","finished","aoutput","out","min","outputLen","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","rotl","isLE","Uint32Array","byteSwap32","i","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","blockLen","create","HMAC","buf","iHash","digestInto","oHash","destroy","to","Object","getPrototypeOf","hash","_key","super","h","ahash","key","pad","set","fill","hmac","message","Chi","c","Maj","HashMD","view","len","pos","take","Math","subarray","process","dataView","roundClean","padOffset","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","res","slice","SHA1_IV","SHA1_W","SHA1","A","B","C","D","E","offset","getUint32","F","K","T","sha1","SHA256_K","SHA256_IV","SHA256_W","SHA256","G","H","W15","W2","s0","s1","T1","T2","SHA224","sha256","sha224","U32_MASK64","fromBig","le","split","lst","Ah","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","u64","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA384","sha512","sha384","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","keccak","state32","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","posOut","finish","suffix","writeInto","bufferOut","xofInto","enableXOF","xof","bytes","floor","gen","sha3_224","sha3_256","sha3_384","sha3_512","globalScope","globalThis","defineProperty","prototype","configurable","__GLOBALTHIS__","self","window","global","nobleHashes","canonicalizeAlgorithm","algorithm","test","TypeError","ALPHABET","base32Decode","end","replace","substring","toUpperCase","bits","index","idx","indexOf","base32Encode","hexDecode","parseInt","hexEncode","hex","toString","latin1Decode","charCodeAt","latin1Encode","String","fromCharCode","ENCODER","DECODER","TextDecoder","utf8Decode","utf8Encode","decode","Secret","fromLatin1","fromUTF8","fromBase32","fromHex","latin1","enumerable","writable","utf8","base32","size","crypto","getRandomValues","randomBytes","HOTP","defaults","issuer","label","issuerInLabel","digits","counter","generate","secret","hmacDigest","num","acc","uintDecode","padStart","validate","token","delta","check","generatedToken","timingSafeEqual","e","encodeURIComponent","TOTP","period","timestamp","Date","now"],"sourceRoot":""}