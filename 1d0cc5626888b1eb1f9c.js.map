{"version":3,"file":"1d0cc5626888b1eb1f9c.js","mappings":"2EAAA,MAAMA,EAAQ,EAAQ,MAChBC,EAAU,EAAQ,MAClBC,EAAY,EAAQ,MACpBC,EAAY,EAAQ,MACpBC,EAAmB,EAAQ,MAC3BC,EAAgB,EAAQ,MACxBC,EAAc,EAAQ,MACtBC,EAAS,EAAQ,MACjBC,EAAqB,EAAQ,MAC7BC,EAAU,EAAQ,MAClBC,EAAa,EAAQ,MACrBC,EAAO,EAAQ,KACfC,EAAW,EAAQ,MAqIzB,SAASC,EAAiBC,EAAQC,EAAsBC,GACtD,MAAMC,EAAOH,EAAOG,KACdC,EAAOR,EAAWS,eAAeJ,EAAsBC,GAC7D,IAAII,EAAGC,EAEP,IAAKD,EAAI,EAAGA,EAAI,GAAIA,IAClBC,EAA4B,IAApBH,GAAQE,EAAK,GAGjBA,EAAI,EACNN,EAAOQ,IAAIF,EAAG,EAAGC,GAAK,GACbD,EAAI,EACbN,EAAOQ,IAAIF,EAAI,EAAG,EAAGC,GAAK,GAE1BP,EAAOQ,IAAIL,EAAO,GAAKG,EAAG,EAAGC,GAAK,GAIhCD,EAAI,EACNN,EAAOQ,IAAI,EAAGL,EAAOG,EAAI,EAAGC,GAAK,GACxBD,EAAI,EACbN,EAAOQ,IAAI,EAAG,GAAKF,EAAI,EAAI,EAAGC,GAAK,GAEnCP,EAAOQ,IAAI,EAAG,GAAKF,EAAI,EAAGC,GAAK,GAKnCP,EAAOQ,IAAIL,EAAO,EAAG,EAAG,GAAG,EAC7B,CAwDA,SAASM,EAAYC,EAAST,EAAsBU,GAElD,MAAMC,EAAS,IAAIxB,EAEnBuB,EAASE,SAAQ,SAAUC,GAEzBF,EAAOG,IAAID,EAAKE,KAAKC,IAAK,GAS1BL,EAAOG,IAAID,EAAKI,YAAarB,EAAKsB,sBAAsBL,EAAKE,KAAMN,IAGnEI,EAAKM,MAAMR,EACb,IAGA,MAEMS,EAA+D,GAF9CnC,EAAMoC,wBAAwBZ,GAC5BjB,EAAO8B,uBAAuBb,EAAST,IAiBhE,IATIW,EAAOY,kBAAoB,GAAKH,GAClCT,EAAOG,IAAI,EAAG,GAQTH,EAAOY,kBAAoB,GAAM,GACtCZ,EAAOa,OAAO,GAOhB,MAAMC,GAAiBL,EAAyBT,EAAOY,mBAAqB,EAC5E,IAAK,IAAIlB,EAAI,EAAGA,EAAIoB,EAAepB,IACjCM,EAAOG,IAAIT,EAAI,EAAI,GAAO,IAAM,GAGlC,OAYF,SAA0BqB,EAAWjB,EAAST,GAE5C,MAAM2B,EAAiB1C,EAAMoC,wBAAwBZ,GAG/CmB,EAAmBpC,EAAO8B,uBAAuBb,EAAST,GAG1D6B,EAAqBF,EAAiBC,EAGtCE,EAAgBtC,EAAOuC,eAAetB,EAAST,GAG/CgC,EAAiBL,EAAiBG,EAClCG,EAAiBH,EAAgBE,EAEjCE,EAAyBC,KAAKC,MAAMT,EAAiBG,GAErDO,EAAwBF,KAAKC,MAAMP,EAAqBC,GACxDQ,EAAwBD,EAAwB,EAGhDE,EAAUL,EAAyBG,EAGnCG,EAAK,IAAI/C,EAAmB8C,GAElC,IAAIE,EAAS,EACb,MAAMC,EAAS,IAAIC,MAAMb,GACnBc,EAAS,IAAID,MAAMb,GACzB,IAAIe,EAAc,EAClB,MAAMlC,EAAS,IAAImC,WAAWpB,EAAUf,QAGxC,IAAK,IAAIoC,EAAI,EAAGA,EAAIjB,EAAeiB,IAAK,CACtC,MAAMC,EAAWD,EAAId,EAAiBI,EAAwBC,EAG9DI,EAAOK,GAAKpC,EAAOsC,MAAMR,EAAQA,EAASO,GAG1CJ,EAAOG,GAAKP,EAAGU,OAAOR,EAAOK,IAE7BN,GAAUO,EACVH,EAAcV,KAAKgB,IAAIN,EAAaG,EACtC,CAIA,MAAMnC,EAAO,IAAIiC,WAAWnB,GAC5B,IACItB,EAAG+C,EADHC,EAAQ,EAIZ,IAAKhD,EAAI,EAAGA,EAAIwC,EAAaxC,IAC3B,IAAK+C,EAAI,EAAGA,EAAItB,EAAesB,IACzB/C,EAAIqC,EAAOU,GAAGE,SAChBzC,EAAKwC,KAAWX,EAAOU,GAAG/C,IAMhC,IAAKA,EAAI,EAAGA,EAAIkC,EAASlC,IACvB,IAAK+C,EAAI,EAAGA,EAAItB,EAAesB,IAC7BvC,EAAKwC,KAAWT,EAAOQ,GAAG/C,GAI9B,OAAOQ,CACT,CAnFS0C,CAAgB5C,EAAQF,EAAST,EAC1C,CA6FA,SAASwD,EAAc3C,EAAMJ,EAAST,EAAsBC,GAC1D,IAAIS,EAEJ,GAAIiC,MAAMc,QAAQ5C,GAChBH,EAAWb,EAAS6D,UAAU7C,OACzB,IAAoB,iBAATA,EAchB,MAAM,IAAI8C,MAAM,gBAdmB,CACnC,IAAIC,EAAmBnD,EAEvB,IAAKmD,EAAkB,CACrB,MAAMC,EAAchE,EAASiE,SAASjD,GAGtC+C,EAAmBlE,EAAQqE,sBAAsBF,EAAa7D,EAChE,CAIAU,EAAWb,EAASmE,WAAWnD,EAAM+C,GAAoB,GAC3D,CAEA,CAGA,MAAMK,EAAcvE,EAAQqE,sBAAsBrD,EAAUV,GAG5D,IAAKiE,EACH,MAAM,IAAIN,MAAM,2DAIlB,GAAKlD,GAIE,GAAIA,EAAUwD,EACnB,MAAM,IAAIN,MAAM,wHAE0CM,EAAc,YANxExD,EAAUwD,EAUZ,MAAMC,EAAW1D,EAAWC,EAAST,EAAsBU,GAGrDyD,EAAclF,EAAMmF,cAAc3D,GAClC4D,EAAU,IAAIjF,EAAU+E,GAgC9B,OAzZF,SAA6BpE,EAAQU,GACnC,MAAMP,EAAOH,EAAOG,KACdoE,EAAMhF,EAAciF,aAAa9D,GAEvC,IAAK,IAAIJ,EAAI,EAAGA,EAAIiE,EAAIhB,OAAQjD,IAAK,CACnC,MAAMmE,EAAMF,EAAIjE,GAAG,GACboE,EAAMH,EAAIjE,GAAG,GAEnB,IAAK,IAAI+C,GAAK,EAAGA,GAAK,EAAGA,IACvB,KAAIoB,EAAMpB,IAAM,GAAKlD,GAAQsE,EAAMpB,GAEnC,IAAK,IAAIsB,GAAK,EAAGA,GAAK,EAAGA,IACnBD,EAAMC,IAAM,GAAKxE,GAAQuE,EAAMC,IAE9BtB,GAAK,GAAKA,GAAK,IAAY,IAANsB,GAAiB,IAANA,IAClCA,GAAK,GAAKA,GAAK,IAAY,IAANtB,GAAiB,IAANA,IAChCA,GAAK,GAAKA,GAAK,GAAKsB,GAAK,GAAKA,GAAK,EACpC3E,EAAOQ,IAAIiE,EAAMpB,EAAGqB,EAAMC,GAAG,GAAM,GAEnC3E,EAAOQ,IAAIiE,EAAMpB,EAAGqB,EAAMC,GAAG,GAAO,GAI5C,CACF,CAoWEC,CAAmBN,EAAS5D,GA3V9B,SAA6BV,GAC3B,MAAMG,EAAOH,EAAOG,KAEpB,IAAK,IAAIkD,EAAI,EAAGA,EAAIlD,EAAO,EAAGkD,IAAK,CACjC,MAAMwB,EAAQxB,EAAI,GAAM,EACxBrD,EAAOQ,IAAI6C,EAAG,EAAGwB,GAAO,GACxB7E,EAAOQ,IAAI,EAAG6C,EAAGwB,GAAO,EAC1B,CACF,CAoVEC,CAAmBR,GA1UrB,SAAgCtE,EAAQU,GACtC,MAAM6D,EAAMjF,EAAiBkF,aAAa9D,GAE1C,IAAK,IAAIJ,EAAI,EAAGA,EAAIiE,EAAIhB,OAAQjD,IAAK,CACnC,MAAMmE,EAAMF,EAAIjE,GAAG,GACboE,EAAMH,EAAIjE,GAAG,GAEnB,IAAK,IAAI+C,GAAK,EAAGA,GAAK,EAAGA,IACvB,IAAK,IAAIsB,GAAK,EAAGA,GAAK,EAAGA,KACZ,IAAPtB,GAAkB,IAANA,IAAkB,IAAPsB,GAAkB,IAANA,GAC9B,IAANtB,GAAiB,IAANsB,EACZ3E,EAAOQ,IAAIiE,EAAMpB,EAAGqB,EAAMC,GAAG,GAAM,GAEnC3E,EAAOQ,IAAIiE,EAAMpB,EAAGqB,EAAMC,GAAG,GAAO,EAI5C,CACF,CAyTEI,CAAsBT,EAAS5D,GAM/BX,EAAgBuE,EAASrE,EAAsB,GAE3CS,GAAW,GAzTjB,SAA2BV,EAAQU,GACjC,MAAMP,EAAOH,EAAOG,KACdC,EAAOT,EAAQU,eAAeK,GACpC,IAAI+D,EAAKC,EAAKnE,EAEd,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IACtBmE,EAAMrC,KAAKC,MAAM/B,EAAI,GACrBoE,EAAMpE,EAAI,EAAIH,EAAO,EAAI,EACzBI,EAA4B,IAApBH,GAAQE,EAAK,GAErBN,EAAOQ,IAAIiE,EAAKC,EAAKnE,GAAK,GAC1BP,EAAOQ,IAAIkE,EAAKD,EAAKlE,GAAK,EAE9B,CA6SIyE,CAAiBV,EAAS5D,GA/P9B,SAAoBV,EAAQc,GAC1B,MAAMX,EAAOH,EAAOG,KACpB,IAAI8E,GAAO,EACPR,EAAMtE,EAAO,EACb+E,EAAW,EACXC,EAAY,EAEhB,IAAK,IAAIT,EAAMvE,EAAO,EAAGuE,EAAM,EAAGA,GAAO,EAGvC,IAFY,IAARA,GAAWA,MAEF,CACX,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK3E,EAAOoF,WAAWX,EAAKC,EAAMC,GAAI,CACpC,IAAIU,GAAO,EAEPF,EAAYrE,EAAKyC,SACnB8B,EAAiD,IAAvCvE,EAAKqE,KAAeD,EAAY,IAG5ClF,EAAOQ,IAAIiE,EAAKC,EAAMC,EAAGU,GACzBH,KAEkB,IAAdA,IACFC,IACAD,EAAW,EAEf,CAKF,GAFAT,GAAOQ,EAEHR,EAAM,GAAKtE,GAAQsE,EAAK,CAC1BA,GAAOQ,EACPA,GAAOA,EACP,KACF,CACF,CAEJ,CA6NEK,CAAUhB,EAASH,GAEfoB,MAAMrF,KAERA,EAAcV,EAAYgG,YAAYlB,EACpCvE,EAAgB0F,KAAK,KAAMnB,EAASrE,KAIxCT,EAAYkG,UAAUxF,EAAaoE,GAGnCvE,EAAgBuE,EAASrE,EAAsBC,GAExC,CACLoE,QAASA,EACT5D,QAASA,EACTT,qBAAsBA,EACtBC,YAAaA,EACbS,SAAUA,EAEd,CAWAgF,EAAQC,OAAS,SAAiB9E,EAAM+E,GACtC,QAAoB,IAAT/E,GAAiC,KAATA,EACjC,MAAM,IAAI8C,MAAM,iBAGlB,IACIlD,EACAoF,EAFA7F,EAAuBd,EAAQ4G,EAenC,YAXuB,IAAZF,IAET5F,EAAuBd,EAAQ6G,KAAKH,EAAQ5F,qBAAsBd,EAAQ4G,GAC1ErF,EAAUf,EAAQqG,KAAKH,EAAQnF,SAC/BoF,EAAOtG,EAAYwG,KAAKH,EAAQ3F,aAE5B2F,EAAQI,YACV/G,EAAMgH,kBAAkBL,EAAQI,aAI7BxC,EAAa3C,EAAMJ,EAAST,EAAsB6F,EAC3D,C,gBC9eA,MAAMK,EAAe,EAAQ,MACvBC,EAAQ,EAAQ,MAStBT,EAAQU,QAAU,CAChBC,GAAI,UACJrF,IAAK,EACLsF,OAAQ,CAAC,GAAI,GAAI,KAYnBZ,EAAQa,aAAe,CACrBF,GAAI,eACJrF,IAAK,EACLsF,OAAQ,CAAC,EAAG,GAAI,KAQlBZ,EAAQc,KAAO,CACbH,GAAI,OACJrF,IAAK,EACLsF,OAAQ,CAAC,EAAG,GAAI,KAYlBZ,EAAQe,MAAQ,CACdJ,GAAI,QACJrF,IAAK,EACLsF,OAAQ,CAAC,EAAG,GAAI,KASlBZ,EAAQgB,MAAQ,CACd1F,KAAM,GAWR0E,EAAQxE,sBAAwB,SAAgCH,EAAMN,GACpE,IAAKM,EAAKuF,OAAQ,MAAM,IAAI3C,MAAM,iBAAmB5C,GAErD,IAAKmF,EAAaS,QAAQlG,GACxB,MAAM,IAAIkD,MAAM,oBAAsBlD,GAGxC,OAAIA,GAAW,GAAKA,EAAU,GAAWM,EAAKuF,OAAO,GAC5C7F,EAAU,GAAWM,EAAKuF,OAAO,GACnCvF,EAAKuF,OAAO,EACrB,EAQAZ,EAAQkB,mBAAqB,SAA6BC,GACxD,OAAIV,EAAMW,YAAYD,GAAiBnB,EAAQU,QACtCD,EAAMY,iBAAiBF,GAAiBnB,EAAQa,aAChDJ,EAAMa,UAAUH,GAAiBnB,EAAQe,MACtCf,EAAQc,IACtB,EAQAd,EAAQuB,SAAW,SAAmBlG,GACpC,GAAIA,GAAQA,EAAKsF,GAAI,OAAOtF,EAAKsF,GACjC,MAAM,IAAI1C,MAAM,eAClB,EAQA+B,EAAQiB,QAAU,SAAkB5F,GAClC,OAAOA,GAAQA,EAAKC,KAAOD,EAAKuF,MAClC,EAqCAZ,EAAQK,KAAO,SAAenB,EAAOsC,GACnC,GAAIxB,EAAQiB,QAAQ/B,GAClB,OAAOA,EAGT,IACE,OAnCJ,SAAqBuC,GACnB,GAAsB,iBAAXA,EACT,MAAM,IAAIxD,MAAM,yBAKlB,OAFcwD,EAAOC,eAGnB,IAAK,UACH,OAAO1B,EAAQU,QACjB,IAAK,eACH,OAAOV,EAAQa,aACjB,IAAK,QACH,OAAOb,EAAQe,MACjB,IAAK,OACH,OAAOf,EAAQc,KACjB,QACE,MAAM,IAAI7C,MAAM,iBAAmBwD,GAEzC,CAgBWnD,CAAWY,EACpB,CAAE,MAAOyC,GACP,OAAOH,CACT,CACF,C,iBCtKA,MAAMjI,EAAQ,EAAQ,MAChBO,EAAS,EAAQ,MACjBN,EAAU,EAAQ,MAClBU,EAAO,EAAQ,KACfsG,EAAe,EAAQ,MAIvBoB,EAAUrI,EAAMsI,YADV,MAaZ,SAASC,EAAsBzG,EAAMN,GAEnC,OAAOb,EAAKsB,sBAAsBH,EAAMN,GAAW,CACrD,CAEA,SAASgH,EAA2B/G,EAAUD,GAC5C,IAAIiH,EAAY,EAOhB,OALAhH,EAASE,SAAQ,SAAUC,GACzB,MAAM8G,EAAeH,EAAqB3G,EAAKE,KAAMN,GACrDiH,GAAaC,EAAe9G,EAAK+G,eACnC,IAEOF,CACT,CAqBAhC,EAAQK,KAAO,SAAenB,EAAOsC,GACnC,OAAIhB,EAAaS,QAAQ/B,GAChBiD,SAASjD,EAAO,IAGlBsC,CACT,EAWAxB,EAAQoC,YAAc,SAAsBrH,EAAST,EAAsBe,GACzE,IAAKmF,EAAaS,QAAQlG,GACxB,MAAM,IAAIkD,MAAM,gCAIE,IAAT5C,IAAsBA,EAAOnB,EAAK4G,MAG7C,MAMMpF,EAA+D,GAN9CnC,EAAMoC,wBAAwBZ,GAG5BjB,EAAO8B,uBAAuBb,EAAST,IAKhE,GAAIe,IAASnB,EAAK8G,MAAO,OAAOtF,EAEhC,MAAM2G,EAAa3G,EAAyBoG,EAAqBzG,EAAMN,GAGvE,OAAQM,GACN,KAAKnB,EAAKwG,QACR,OAAOjE,KAAKC,MAAO2F,EAAa,GAAM,GAExC,KAAKnI,EAAK2G,aACR,OAAOpE,KAAKC,MAAO2F,EAAa,GAAM,GAExC,KAAKnI,EAAK6G,MACR,OAAOtE,KAAKC,MAAM2F,EAAa,IAEjC,KAAKnI,EAAK4G,KACV,QACE,OAAOrE,KAAKC,MAAM2F,EAAa,GAErC,EAUArC,EAAQ3B,sBAAwB,SAAgClD,EAAMb,GACpE,IAAIgI,EAEJ,MAAMC,EAAM/I,EAAQ6G,KAAK/F,EAAsBd,EAAQ4G,GAEvD,GAAInD,MAAMc,QAAQ5C,GAAO,CACvB,GAAIA,EAAKyC,OAAS,EAChB,OAzFN,SAAqC5C,EAAUV,GAC7C,IAAK,IAAIkI,EAAiB,EAAGA,GAAkB,GAAIA,IAEjD,GADeT,EAA0B/G,EAAUwH,IACrCxC,EAAQoC,YAAYI,EAAgBlI,EAAsBJ,EAAK8G,OAC3E,OAAOwB,CAKb,CAgFaC,CAA2BtH,EAAMoH,GAG1C,GAAoB,IAAhBpH,EAAKyC,OACP,OAAO,EAGT0E,EAAMnH,EAAK,EACb,MACEmH,EAAMnH,EAGR,OA/HF,SAAsCE,EAAMuC,EAAQtD,GAClD,IAAK,IAAIkI,EAAiB,EAAGA,GAAkB,GAAIA,IACjD,GAAI5E,GAAUoC,EAAQoC,YAAYI,EAAgBlI,EAAsBe,GACtE,OAAOmH,CAKb,CAuHSE,CAA4BJ,EAAIjH,KAAMiH,EAAI/G,YAAagH,EAChE,EAYAvC,EAAQtF,eAAiB,SAAyBK,GAChD,IAAKyF,EAAaS,QAAQlG,IAAYA,EAAU,EAC9C,MAAM,IAAIkD,MAAM,2BAGlB,IAAI0E,EAAI5H,GAAW,GAEnB,KAAOxB,EAAMsI,YAAYc,GAAKf,GAAW,GACvCe,GAvJQ,MAuJMpJ,EAAMsI,YAAYc,GAAKf,EAGvC,OAAQ7G,GAAW,GAAM4H,CAC3B,C,eC5JA3C,EAAQiB,QAAU,SAAkBlG,GAClC,OAAQ6E,MAAM7E,IAAYA,GAAW,GAAKA,GAAW,EACvD,C,iBCRA,MAAMb,EAAO,EAAQ,KAErB,SAAS0I,EAAazH,GACpB0H,KAAKxH,KAAOnB,EAAKwG,QACjBmC,KAAK1H,KAAOA,EAAKoG,UACnB,CAEAqB,EAAYV,cAAgB,SAAwBtE,GAClD,OAAO,GAAKnB,KAAKC,MAAMkB,EAAS,IAAOA,EAAS,EAAOA,EAAS,EAAK,EAAI,EAAK,EAChF,EAEAgF,EAAYE,UAAUvH,UAAY,WAChC,OAAOsH,KAAK1H,KAAKyC,MACnB,EAEAgF,EAAYE,UAAUZ,cAAgB,WACpC,OAAOU,EAAYV,cAAcW,KAAK1H,KAAKyC,OAC7C,EAEAgF,EAAYE,UAAUrH,MAAQ,SAAgBO,GAC5C,IAAIrB,EAAGoI,EAAO7D,EAId,IAAKvE,EAAI,EAAGA,EAAI,GAAKkI,KAAK1H,KAAKyC,OAAQjD,GAAK,EAC1CoI,EAAQF,KAAK1H,KAAK6H,OAAOrI,EAAG,GAC5BuE,EAAQiD,SAASY,EAAO,IAExB/G,EAAUZ,IAAI8D,EAAO,IAKvB,MAAM+D,EAAeJ,KAAK1H,KAAKyC,OAASjD,EACpCsI,EAAe,IACjBF,EAAQF,KAAK1H,KAAK6H,OAAOrI,GACzBuE,EAAQiD,SAASY,EAAO,IAExB/G,EAAUZ,IAAI8D,EAAsB,EAAf+D,EAAmB,GAE5C,EAEAC,EAAOlD,QAAU4C,C,iBC1CjB,MAAMO,EAAK,EAAQ,MASnBnD,EAAQoD,IAAM,SAAcC,EAAIC,GAC9B,MAAMC,EAAQ,IAAInG,WAAWiG,EAAGzF,OAAS0F,EAAG1F,OAAS,GAErD,IAAK,IAAIjD,EAAI,EAAGA,EAAI0I,EAAGzF,OAAQjD,IAC7B,IAAK,IAAI6I,EAAI,EAAGA,EAAIF,EAAG1F,OAAQ4F,IAC7BD,EAAM5I,EAAI6I,IAAML,EAAGC,IAAIC,EAAG1I,GAAI2I,EAAGE,IAIrC,OAAOD,CACT,EASAvD,EAAQpF,IAAM,SAAc6I,EAAUC,GACpC,IAAIC,EAAS,IAAIvG,WAAWqG,GAE5B,KAAQE,EAAO/F,OAAS8F,EAAQ9F,QAAW,GAAG,CAC5C,MAAM2F,EAAQI,EAAO,GAErB,IAAK,IAAIhJ,EAAI,EAAGA,EAAI+I,EAAQ9F,OAAQjD,IAClCgJ,EAAOhJ,IAAMwI,EAAGC,IAAIM,EAAQ/I,GAAI4I,GAIlC,IAAIxG,EAAS,EACb,KAAOA,EAAS4G,EAAO/F,QAA6B,IAAnB+F,EAAO5G,IAAeA,IACvD4G,EAASA,EAAOpG,MAAMR,EACxB,CAEA,OAAO4G,CACT,EASA3D,EAAQ4D,qBAAuB,SAA+BC,GAC5D,IAAIC,EAAO,IAAI1G,WAAW,CAAC,IAC3B,IAAK,IAAIzC,EAAI,EAAGA,EAAIkJ,EAAQlJ,IAC1BmJ,EAAO9D,EAAQoD,IAAIU,EAAM,IAAI1G,WAAW,CAAC,EAAG+F,EAAGY,IAAIpJ,MAGrD,OAAOmJ,CACT,C,iBC7DA,MAAME,EAAa,EAAQ,MAE3B,SAASjK,EAAoB8J,GAC3BhB,KAAKoB,aAAUC,EACfrB,KAAKgB,OAASA,EAEVhB,KAAKgB,QAAQhB,KAAKsB,WAAWtB,KAAKgB,OACxC,CAQA9J,EAAmB+I,UAAUqB,WAAa,SAAqBN,GAE7DhB,KAAKgB,OAASA,EACdhB,KAAKoB,QAAUD,EAAWJ,qBAAqBf,KAAKgB,OACtD,EAQA9J,EAAmB+I,UAAUtF,OAAS,SAAiBrC,GACrD,IAAK0H,KAAKoB,QACR,MAAM,IAAIhG,MAAM,2BAKlB,MAAMmG,EAAa,IAAIhH,WAAWjC,EAAKyC,OAASiF,KAAKgB,QACrDO,EAAWvJ,IAAIM,GAIf,MAAMkJ,EAAYL,EAAWpJ,IAAIwJ,EAAYvB,KAAKoB,SAK5CK,EAAQzB,KAAKgB,OAASQ,EAAUzG,OACtC,GAAI0G,EAAQ,EAAG,CACb,MAAMC,EAAO,IAAInH,WAAWyF,KAAKgB,QAGjC,OAFAU,EAAK1J,IAAIwJ,EAAWC,GAEbC,CACT,CAEA,OAAOF,CACT,EAEAnB,EAAOlD,QAAUjG,C,eCvDjB,IAAIyK,EACJ,MAAMC,EAAkB,CACtB,EACA,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MASxDzE,EAAQtB,cAAgB,SAAwB3D,GAC9C,IAAKA,EAAS,MAAM,IAAIkD,MAAM,yCAC9B,GAAIlD,EAAU,GAAKA,EAAU,GAAI,MAAM,IAAIkD,MAAM,6CACjD,OAAiB,EAAVlD,EAAc,EACvB,EAQAiF,EAAQrE,wBAA0B,SAAkCZ,GAClE,OAAO0J,EAAgB1J,EACzB,EAQAiF,EAAQ6B,YAAc,SAAU1G,GAC9B,IAAIuJ,EAAQ,EAEZ,KAAgB,IAATvJ,GACLuJ,IACAvJ,KAAU,EAGZ,OAAOuJ,CACT,EAEA1E,EAAQO,kBAAoB,SAA4BoE,GACtD,GAAiB,mBAANA,EACT,MAAM,IAAI1G,MAAM,yCAGlBuG,EAAiBG,CACnB,EAEA3E,EAAQ4E,mBAAqB,WAC3B,YAAiC,IAAnBJ,CAChB,EAEAxE,EAAQ6E,OAAS,SAAiBC,GAChC,OAAON,EAAeM,EACxB,C,eC9DA,MAAMC,EAAU,SAEhB,IAAID,EAAQ,mNAIZA,EAAQA,EAAME,QAAQ,KAAM,OAE5B,MAAMC,EAAO,6BAA+BH,EAAQ,kBAEpD9E,EAAQe,MAAQ,IAAImE,OAAOJ,EAAO,KAClC9E,EAAQmF,WAAa,IAAID,OAAO,wBAAyB,KACzDlF,EAAQc,KAAO,IAAIoE,OAAOD,EAAM,KAChCjF,EAAQU,QAAU,IAAIwE,OAAOH,EAAS,KACtC/E,EAAQa,aAAe,IAAIqE,OAbN,oBAa2B,KAEhD,MAAME,EAAa,IAAIF,OAAO,IAAMJ,EAAQ,KACtCO,EAAe,IAAIH,OAAO,IAAMH,EAAU,KAC1CO,EAAoB,IAAIJ,OAAO,0BAErClF,EAAQsB,UAAY,SAAoBiE,GACtC,OAAOH,EAAWI,KAAKD,EACzB,EAEAvF,EAAQoB,YAAc,SAAsBmE,GAC1C,OAAOF,EAAaG,KAAKD,EAC3B,EAEAvF,EAAQqB,iBAAmB,SAA2BkE,GACpD,OAAOD,EAAkBE,KAAKD,EAChC,C,iBC9BA,MAAMrL,EAAO,EAAQ,KACf0I,EAAc,EAAQ,MACtB6C,EAAmB,EAAQ,MAC3BC,EAAW,EAAQ,MACnBC,EAAY,EAAQ,MACpBlF,EAAQ,EAAQ,MAChBlH,EAAQ,EAAQ,MAChBqM,EAAW,EAAQ,MAQzB,SAASC,EAAqBN,GAC5B,OAAOO,SAASC,mBAAmBR,IAAM3H,MAC3C,CAUA,SAASoI,EAAaC,EAAO5K,EAAMkK,GACjC,MAAMvK,EAAW,GACjB,IAAI2I,EAEJ,KAAsC,QAA9BA,EAASsC,EAAMC,KAAKX,KAC1BvK,EAASmL,KAAK,CACZhL,KAAMwI,EAAO,GACbhG,MAAOgG,EAAOhG,MACdtC,KAAMA,EACNuC,OAAQ+F,EAAO,GAAG/F,SAItB,OAAO5C,CACT,CASA,SAASoL,EAAuBjF,GAC9B,MAAMkF,EAAUL,EAAYvF,EAAMC,QAASxG,EAAKwG,QAASS,GACnDmF,EAAeN,EAAYvF,EAAMI,aAAc3G,EAAK2G,aAAcM,GACxE,IAAIoF,EACAC,EAEAjN,EAAMqL,sBACR2B,EAAWP,EAAYvF,EAAMK,KAAM5G,EAAK4G,KAAMK,GAC9CqF,EAAYR,EAAYvF,EAAMM,MAAO7G,EAAK6G,MAAOI,KAEjDoF,EAAWP,EAAYvF,EAAM0E,WAAYjL,EAAK4G,KAAMK,GACpDqF,EAAY,IAKd,OAFaH,EAAQI,OAAOH,EAAcC,EAAUC,GAGjDE,MAAK,SAAUC,EAAIC,GAClB,OAAOD,EAAGhJ,MAAQiJ,EAAGjJ,KACvB,IACCkJ,KAAI,SAAUC,GACb,MAAO,CACL3L,KAAM2L,EAAI3L,KACVE,KAAMyL,EAAIzL,KACVuC,OAAQkJ,EAAIlJ,OAEhB,GACJ,CAUA,SAASmJ,EAAsBnJ,EAAQvC,GACrC,OAAQA,GACN,KAAKnB,EAAKwG,QACR,OAAOkC,EAAYV,cAActE,GACnC,KAAK1D,EAAK2G,aACR,OAAO4E,EAAiBvD,cAActE,GACxC,KAAK1D,EAAK6G,MACR,OAAO4E,EAAUzD,cAActE,GACjC,KAAK1D,EAAK4G,KACR,OAAO4E,EAASxD,cAActE,GAEpC,CAsIA,SAASoJ,EAAoB7L,EAAM8L,GACjC,IAAI5L,EACJ,MAAM6L,EAAWhN,EAAKgH,mBAAmB/F,GAKzC,GAHAE,EAAOnB,EAAKmG,KAAK4G,EAAWC,GAGxB7L,IAASnB,EAAK4G,MAAQzF,EAAKC,IAAM4L,EAAS5L,IAC5C,MAAM,IAAI2C,MAAM,IAAM9C,EAAN,iCACoBjB,EAAKqH,SAASlG,GAChD,0BAA4BnB,EAAKqH,SAAS2F,IAQ9C,OAJI7L,IAASnB,EAAK6G,OAAUxH,EAAMqL,uBAChCvJ,EAAOnB,EAAK4G,MAGNzF,GACN,KAAKnB,EAAKwG,QACR,OAAO,IAAIkC,EAAYzH,GAEzB,KAAKjB,EAAK2G,aACR,OAAO,IAAI4E,EAAiBtK,GAE9B,KAAKjB,EAAK6G,MACR,OAAO,IAAI4E,EAAUxK,GAEvB,KAAKjB,EAAK4G,KACR,OAAO,IAAI4E,EAASvK,GAE1B,CAiBA6E,EAAQhC,UAAY,SAAoBmJ,GACtC,OAAOA,EAAMC,QAAO,SAAUC,EAAK/E,GAOjC,MANmB,iBAARA,EACT+E,EAAIlB,KAAKa,EAAmB1E,EAAK,OACxBA,EAAInH,MACbkM,EAAIlB,KAAKa,EAAmB1E,EAAInH,KAAMmH,EAAIjH,OAGrCgM,CACT,GAAG,GACL,EAUArH,EAAQ1B,WAAa,SAAqBnD,EAAMJ,GAC9C,MAEMuM,EAxKR,SAAqBC,GACnB,MAAMD,EAAQ,GACd,IAAK,IAAI3M,EAAI,EAAGA,EAAI4M,EAAK3J,OAAQjD,IAAK,CACpC,MAAM2H,EAAMiF,EAAK5M,GAEjB,OAAQ2H,EAAIjH,MACV,KAAKnB,EAAKwG,QACR4G,EAAMnB,KAAK,CAAC7D,EACV,CAAEnH,KAAMmH,EAAInH,KAAME,KAAMnB,EAAK2G,aAAcjD,OAAQ0E,EAAI1E,QACvD,CAAEzC,KAAMmH,EAAInH,KAAME,KAAMnB,EAAK4G,KAAMlD,OAAQ0E,EAAI1E,UAEjD,MACF,KAAK1D,EAAK2G,aACRyG,EAAMnB,KAAK,CAAC7D,EACV,CAAEnH,KAAMmH,EAAInH,KAAME,KAAMnB,EAAK4G,KAAMlD,OAAQ0E,EAAI1E,UAEjD,MACF,KAAK1D,EAAK6G,MACRuG,EAAMnB,KAAK,CAAC7D,EACV,CAAEnH,KAAMmH,EAAInH,KAAME,KAAMnB,EAAK4G,KAAMlD,OAAQiI,EAAoBvD,EAAInH,SAErE,MACF,KAAKjB,EAAK4G,KACRwG,EAAMnB,KAAK,CACT,CAAEhL,KAAMmH,EAAInH,KAAME,KAAMnB,EAAK4G,KAAMlD,OAAQiI,EAAoBvD,EAAInH,SAG3E,CAEA,OAAOmM,CACT,CA0IgBE,CAFDpB,EAAsBjL,EAAM5B,EAAMqL,uBAGzC6C,EA7HR,SAAqBH,EAAOvM,GAC1B,MAAM2M,EAAQ,CAAC,EACTD,EAAQ,CAAEnD,MAAO,CAAC,GACxB,IAAIqD,EAAc,CAAC,SAEnB,IAAK,IAAIhN,EAAI,EAAGA,EAAI2M,EAAM1J,OAAQjD,IAAK,CACrC,MAAMiN,EAAYN,EAAM3M,GAClBkN,EAAiB,GAEvB,IAAK,IAAIrE,EAAI,EAAGA,EAAIoE,EAAUhK,OAAQ4F,IAAK,CACzC,MAAMsE,EAAOF,EAAUpE,GACjBuE,EAAM,GAAKpN,EAAI6I,EAErBqE,EAAe1B,KAAK4B,GACpBL,EAAMK,GAAO,CAAED,KAAMA,EAAME,UAAW,GACtCP,EAAMM,GAAO,CAAC,EAEd,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAY/J,OAAQqK,IAAK,CAC3C,MAAMC,EAAaP,EAAYM,GAE3BP,EAAMQ,IAAeR,EAAMQ,GAAYJ,KAAKzM,OAASyM,EAAKzM,MAC5DoM,EAAMS,GAAYH,GAChBhB,EAAqBW,EAAMQ,GAAYF,UAAYF,EAAKlK,OAAQkK,EAAKzM,MACrE0L,EAAqBW,EAAMQ,GAAYF,UAAWF,EAAKzM,MAEzDqM,EAAMQ,GAAYF,WAAaF,EAAKlK,SAEhC8J,EAAMQ,KAAaR,EAAMQ,GAAYF,UAAYF,EAAKlK,QAE1D6J,EAAMS,GAAYH,GAAOhB,EAAqBe,EAAKlK,OAAQkK,EAAKzM,MAC9D,EAAInB,EAAKsB,sBAAsBsM,EAAKzM,KAAMN,GAEhD,CACF,CAEA4M,EAAcE,CAChB,CAEA,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAY/J,OAAQqK,IACtCR,EAAME,EAAYM,IAAIE,IAAM,EAG9B,MAAO,CAAEtB,IAAKY,EAAOC,MAAOA,EAC9B,CAkFgBU,CAAWd,EAAOvM,GAC1BsN,EAAOzC,EAAS0C,UAAUb,EAAMZ,IAAK,QAAS,OAE9C0B,EAAgB,GACtB,IAAK,IAAI5N,EAAI,EAAGA,EAAI0N,EAAKzK,OAAS,EAAGjD,IACnC4N,EAAcpC,KAAKsB,EAAMC,MAAMW,EAAK1N,IAAImN,MAG1C,OAAO9H,EAAQhC,UA9MjB,SAAwBuJ,GACtB,OAAOA,EAAKH,QAAO,SAAUC,EAAKmB,GAChC,MAAMC,EAAUpB,EAAIzJ,OAAS,GAAK,EAAIyJ,EAAIA,EAAIzJ,OAAS,GAAK,KAC5D,OAAI6K,GAAWA,EAAQpN,OAASmN,EAAKnN,MACnCgM,EAAIA,EAAIzJ,OAAS,GAAGzC,MAAQqN,EAAKrN,KAC1BkM,IAGTA,EAAIlB,KAAKqC,GACFnB,EACT,GAAG,GACL,CAmM2BqB,CAAcH,GACzC,EAYAvI,EAAQ5B,SAAW,SAAmBjD,GACpC,OAAO6E,EAAQhC,UACboI,EAAsBjL,EAAM5B,EAAMqL,sBAEtC,C","sources":["webpack://bus/./node_modules/qrcode/lib/core/qrcode.js","webpack://bus/./node_modules/qrcode/lib/core/mode.js","webpack://bus/./node_modules/qrcode/lib/core/version.js","webpack://bus/./node_modules/qrcode/lib/core/version-check.js","webpack://bus/./node_modules/qrcode/lib/core/numeric-data.js","webpack://bus/./node_modules/qrcode/lib/core/polynomial.js","webpack://bus/./node_modules/qrcode/lib/core/reed-solomon-encoder.js","webpack://bus/./node_modules/qrcode/lib/core/utils.js","webpack://bus/./node_modules/qrcode/lib/core/regex.js","webpack://bus/./node_modules/qrcode/lib/core/segments.js"],"sourcesContent":["const Utils = require('./utils')\nconst ECLevel = require('./error-correction-level')\nconst BitBuffer = require('./bit-buffer')\nconst BitMatrix = require('./bit-matrix')\nconst AlignmentPattern = require('./alignment-pattern')\nconst FinderPattern = require('./finder-pattern')\nconst MaskPattern = require('./mask-pattern')\nconst ECCode = require('./error-correction-code')\nconst ReedSolomonEncoder = require('./reed-solomon-encoder')\nconst Version = require('./version')\nconst FormatInfo = require('./format-info')\nconst Mode = require('./mode')\nconst Segments = require('./segments')\n\n/**\n * QRCode for JavaScript\n *\n * modified by Ryan Day for nodejs support\n * Copyright (c) 2011 Ryan Day\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n//---------------------------------------------------------------------\n// QRCode for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//   http://www.opensource.org/licenses/mit-license.php\n//\n// The word \"QR Code\" is registered trademark of\n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n*/\n\n/**\n * Add finder patterns bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupFinderPattern (matrix, version) {\n  const size = matrix.size\n  const pos = FinderPattern.getPositions(version)\n\n  for (let i = 0; i < pos.length; i++) {\n    const row = pos[i][0]\n    const col = pos[i][1]\n\n    for (let r = -1; r <= 7; r++) {\n      if (row + r <= -1 || size <= row + r) continue\n\n      for (let c = -1; c <= 7; c++) {\n        if (col + c <= -1 || size <= col + c) continue\n\n        if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||\n          (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||\n          (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {\n          matrix.set(row + r, col + c, true, true)\n        } else {\n          matrix.set(row + r, col + c, false, true)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Add timing pattern bits to matrix\n *\n * Note: this function must be called before {@link setupAlignmentPattern}\n *\n * @param  {BitMatrix} matrix Modules matrix\n */\nfunction setupTimingPattern (matrix) {\n  const size = matrix.size\n\n  for (let r = 8; r < size - 8; r++) {\n    const value = r % 2 === 0\n    matrix.set(r, 6, value, true)\n    matrix.set(6, r, value, true)\n  }\n}\n\n/**\n * Add alignment patterns bits to matrix\n *\n * Note: this function must be called after {@link setupTimingPattern}\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupAlignmentPattern (matrix, version) {\n  const pos = AlignmentPattern.getPositions(version)\n\n  for (let i = 0; i < pos.length; i++) {\n    const row = pos[i][0]\n    const col = pos[i][1]\n\n    for (let r = -2; r <= 2; r++) {\n      for (let c = -2; c <= 2; c++) {\n        if (r === -2 || r === 2 || c === -2 || c === 2 ||\n          (r === 0 && c === 0)) {\n          matrix.set(row + r, col + c, true, true)\n        } else {\n          matrix.set(row + r, col + c, false, true)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Add version info bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupVersionInfo (matrix, version) {\n  const size = matrix.size\n  const bits = Version.getEncodedBits(version)\n  let row, col, mod\n\n  for (let i = 0; i < 18; i++) {\n    row = Math.floor(i / 3)\n    col = i % 3 + size - 8 - 3\n    mod = ((bits >> i) & 1) === 1\n\n    matrix.set(row, col, mod, true)\n    matrix.set(col, row, mod, true)\n  }\n}\n\n/**\n * Add format info bits to matrix\n *\n * @param  {BitMatrix} matrix               Modules matrix\n * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n * @param  {Number}    maskPattern          Mask pattern reference value\n */\nfunction setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {\n  const size = matrix.size\n  const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern)\n  let i, mod\n\n  for (i = 0; i < 15; i++) {\n    mod = ((bits >> i) & 1) === 1\n\n    // vertical\n    if (i < 6) {\n      matrix.set(i, 8, mod, true)\n    } else if (i < 8) {\n      matrix.set(i + 1, 8, mod, true)\n    } else {\n      matrix.set(size - 15 + i, 8, mod, true)\n    }\n\n    // horizontal\n    if (i < 8) {\n      matrix.set(8, size - i - 1, mod, true)\n    } else if (i < 9) {\n      matrix.set(8, 15 - i - 1 + 1, mod, true)\n    } else {\n      matrix.set(8, 15 - i - 1, mod, true)\n    }\n  }\n\n  // fixed module\n  matrix.set(size - 8, 8, 1, true)\n}\n\n/**\n * Add encoded data bits to matrix\n *\n * @param  {BitMatrix}  matrix Modules matrix\n * @param  {Uint8Array} data   Data codewords\n */\nfunction setupData (matrix, data) {\n  const size = matrix.size\n  let inc = -1\n  let row = size - 1\n  let bitIndex = 7\n  let byteIndex = 0\n\n  for (let col = size - 1; col > 0; col -= 2) {\n    if (col === 6) col--\n\n    while (true) {\n      for (let c = 0; c < 2; c++) {\n        if (!matrix.isReserved(row, col - c)) {\n          let dark = false\n\n          if (byteIndex < data.length) {\n            dark = (((data[byteIndex] >>> bitIndex) & 1) === 1)\n          }\n\n          matrix.set(row, col - c, dark)\n          bitIndex--\n\n          if (bitIndex === -1) {\n            byteIndex++\n            bitIndex = 7\n          }\n        }\n      }\n\n      row += inc\n\n      if (row < 0 || size <= row) {\n        row -= inc\n        inc = -inc\n        break\n      }\n    }\n  }\n}\n\n/**\n * Create encoded codewords from data input\n *\n * @param  {Number}   version              QR Code version\n * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n * @param  {ByteData} data                 Data input\n * @return {Uint8Array}                    Buffer containing encoded codewords\n */\nfunction createData (version, errorCorrectionLevel, segments) {\n  // Prepare data buffer\n  const buffer = new BitBuffer()\n\n  segments.forEach(function (data) {\n    // prefix data with mode indicator (4 bits)\n    buffer.put(data.mode.bit, 4)\n\n    // Prefix data with character count indicator.\n    // The character count indicator is a string of bits that represents the\n    // number of characters that are being encoded.\n    // The character count indicator must be placed after the mode indicator\n    // and must be a certain number of bits long, depending on the QR version\n    // and data mode\n    // @see {@link Mode.getCharCountIndicator}.\n    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version))\n\n    // add binary data sequence to buffer\n    data.write(buffer)\n  })\n\n  // Calculate required number of bits\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n  const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  // Add a terminator.\n  // If the bit string is shorter than the total number of required bits,\n  // a terminator of up to four 0s must be added to the right side of the string.\n  // If the bit string is more than four bits shorter than the required number of bits,\n  // add four 0s to the end.\n  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n    buffer.put(0, 4)\n  }\n\n  // If the bit string is fewer than four bits shorter, add only the number of 0s that\n  // are needed to reach the required number of bits.\n\n  // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n  // pad the string on the right with 0s to make the string's length a multiple of 8.\n  while (buffer.getLengthInBits() % 8 !== 0) {\n    buffer.putBit(0)\n  }\n\n  // Add pad bytes if the string is still shorter than the total number of required bits.\n  // Extend the buffer to fill the data capacity of the symbol corresponding to\n  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n  // and 00010001 (0x11) alternately.\n  const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8\n  for (let i = 0; i < remainingByte; i++) {\n    buffer.put(i % 2 ? 0x11 : 0xEC, 8)\n  }\n\n  return createCodewords(buffer, version, errorCorrectionLevel)\n}\n\n/**\n * Encode input data with Reed-Solomon and return codewords with\n * relative error correction bits\n *\n * @param  {BitBuffer} bitBuffer            Data to encode\n * @param  {Number}    version              QR Code version\n * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n * @return {Uint8Array}                     Buffer containing encoded codewords\n */\nfunction createCodewords (bitBuffer, version, errorCorrectionLevel) {\n  // Total codewords for this QR code version (Data + Error correction)\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  const dataTotalCodewords = totalCodewords - ecTotalCodewords\n\n  // Total number of blocks\n  const ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel)\n\n  // Calculate how many blocks each group should contain\n  const blocksInGroup2 = totalCodewords % ecTotalBlocks\n  const blocksInGroup1 = ecTotalBlocks - blocksInGroup2\n\n  const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks)\n\n  const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks)\n  const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1\n\n  // Number of EC codewords is the same for both groups\n  const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1\n\n  // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n  const rs = new ReedSolomonEncoder(ecCount)\n\n  let offset = 0\n  const dcData = new Array(ecTotalBlocks)\n  const ecData = new Array(ecTotalBlocks)\n  let maxDataSize = 0\n  const buffer = new Uint8Array(bitBuffer.buffer)\n\n  // Divide the buffer into the required number of blocks\n  for (let b = 0; b < ecTotalBlocks; b++) {\n    const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2\n\n    // extract a block of data from buffer\n    dcData[b] = buffer.slice(offset, offset + dataSize)\n\n    // Calculate EC codewords for this data block\n    ecData[b] = rs.encode(dcData[b])\n\n    offset += dataSize\n    maxDataSize = Math.max(maxDataSize, dataSize)\n  }\n\n  // Create final data\n  // Interleave the data and error correction codewords from each block\n  const data = new Uint8Array(totalCodewords)\n  let index = 0\n  let i, r\n\n  // Add data codewords\n  for (i = 0; i < maxDataSize; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      if (i < dcData[r].length) {\n        data[index++] = dcData[r][i]\n      }\n    }\n  }\n\n  // Apped EC codewords\n  for (i = 0; i < ecCount; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      data[index++] = ecData[r][i]\n    }\n  }\n\n  return data\n}\n\n/**\n * Build QR Code symbol\n *\n * @param  {String} data                 Input string\n * @param  {Number} version              QR Code version\n * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n * @param  {MaskPattern} maskPattern     Mask pattern\n * @return {Object}                      Object containing symbol data\n */\nfunction createSymbol (data, version, errorCorrectionLevel, maskPattern) {\n  let segments\n\n  if (Array.isArray(data)) {\n    segments = Segments.fromArray(data)\n  } else if (typeof data === 'string') {\n    let estimatedVersion = version\n\n    if (!estimatedVersion) {\n      const rawSegments = Segments.rawSplit(data)\n\n      // Estimate best version that can contain raw splitted segments\n      estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel)\n    }\n\n    // Build optimized segments\n    // If estimated version is undefined, try with the highest version\n    segments = Segments.fromString(data, estimatedVersion || 40)\n  } else {\n    throw new Error('Invalid data')\n  }\n\n  // Get the min version that can contain data\n  const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel)\n\n  // If no version is found, data cannot be stored\n  if (!bestVersion) {\n    throw new Error('The amount of data is too big to be stored in a QR Code')\n  }\n\n  // If not specified, use min version as default\n  if (!version) {\n    version = bestVersion\n\n  // Check if the specified version can contain the data\n  } else if (version < bestVersion) {\n    throw new Error('\\n' +\n      'The chosen QR Code version cannot contain this amount of data.\\n' +\n      'Minimum version required to store current data is: ' + bestVersion + '.\\n'\n    )\n  }\n\n  const dataBits = createData(version, errorCorrectionLevel, segments)\n\n  // Allocate matrix buffer\n  const moduleCount = Utils.getSymbolSize(version)\n  const modules = new BitMatrix(moduleCount)\n\n  // Add function modules\n  setupFinderPattern(modules, version)\n  setupTimingPattern(modules)\n  setupAlignmentPattern(modules, version)\n\n  // Add temporary dummy bits for format info just to set them as reserved.\n  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n  // since the masking operation must be performed only on the encoding region.\n  // These blocks will be replaced with correct values later in code.\n  setupFormatInfo(modules, errorCorrectionLevel, 0)\n\n  if (version >= 7) {\n    setupVersionInfo(modules, version)\n  }\n\n  // Add data codewords\n  setupData(modules, dataBits)\n\n  if (isNaN(maskPattern)) {\n    // Find best mask pattern\n    maskPattern = MaskPattern.getBestMask(modules,\n      setupFormatInfo.bind(null, modules, errorCorrectionLevel))\n  }\n\n  // Apply mask pattern\n  MaskPattern.applyMask(maskPattern, modules)\n\n  // Replace format info bits with correct values\n  setupFormatInfo(modules, errorCorrectionLevel, maskPattern)\n\n  return {\n    modules: modules,\n    version: version,\n    errorCorrectionLevel: errorCorrectionLevel,\n    maskPattern: maskPattern,\n    segments: segments\n  }\n}\n\n/**\n * QR Code\n *\n * @param {String | Array} data                 Input data\n * @param {Object} options                      Optional configurations\n * @param {Number} options.version              QR Code version\n * @param {String} options.errorCorrectionLevel Error correction level\n * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n */\nexports.create = function create (data, options) {\n  if (typeof data === 'undefined' || data === '') {\n    throw new Error('No input text')\n  }\n\n  let errorCorrectionLevel = ECLevel.M\n  let version\n  let mask\n\n  if (typeof options !== 'undefined') {\n    // Use higher error correction level as default\n    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M)\n    version = Version.from(options.version)\n    mask = MaskPattern.from(options.maskPattern)\n\n    if (options.toSJISFunc) {\n      Utils.setToSJISFunction(options.toSJISFunc)\n    }\n  }\n\n  return createSymbol(data, version, errorCorrectionLevel, mask)\n}\n","const VersionCheck = require('./version-check')\nconst Regex = require('./regex')\n\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */\nexports.NUMERIC = {\n  id: 'Numeric',\n  bit: 1 << 0,\n  ccBits: [10, 12, 14]\n}\n\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */\nexports.ALPHANUMERIC = {\n  id: 'Alphanumeric',\n  bit: 1 << 1,\n  ccBits: [9, 11, 13]\n}\n\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */\nexports.BYTE = {\n  id: 'Byte',\n  bit: 1 << 2,\n  ccBits: [8, 16, 16]\n}\n\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */\nexports.KANJI = {\n  id: 'Kanji',\n  bit: 1 << 3,\n  ccBits: [8, 10, 12]\n}\n\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */\nexports.MIXED = {\n  bit: -1\n}\n\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */\nexports.getCharCountIndicator = function getCharCountIndicator (mode, version) {\n  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)\n\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid version: ' + version)\n  }\n\n  if (version >= 1 && version < 10) return mode.ccBits[0]\n  else if (version < 27) return mode.ccBits[1]\n  return mode.ccBits[2]\n}\n\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */\nexports.getBestModeForData = function getBestModeForData (dataStr) {\n  if (Regex.testNumeric(dataStr)) return exports.NUMERIC\n  else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC\n  else if (Regex.testKanji(dataStr)) return exports.KANJI\n  else return exports.BYTE\n}\n\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */\nexports.toString = function toString (mode) {\n  if (mode && mode.id) return mode.id\n  throw new Error('Invalid mode')\n}\n\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */\nexports.isValid = function isValid (mode) {\n  return mode && mode.bit && mode.ccBits\n}\n\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */\nfunction fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string')\n  }\n\n  const lcStr = string.toLowerCase()\n\n  switch (lcStr) {\n    case 'numeric':\n      return exports.NUMERIC\n    case 'alphanumeric':\n      return exports.ALPHANUMERIC\n    case 'kanji':\n      return exports.KANJI\n    case 'byte':\n      return exports.BYTE\n    default:\n      throw new Error('Unknown mode: ' + string)\n  }\n}\n\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value\n  }\n\n  try {\n    return fromString(value)\n  } catch (e) {\n    return defaultValue\n  }\n}\n","const Utils = require('./utils')\nconst ECCode = require('./error-correction-code')\nconst ECLevel = require('./error-correction-level')\nconst Mode = require('./mode')\nconst VersionCheck = require('./version-check')\n\n// Generator polynomial used to encode version information\nconst G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)\nconst G18_BCH = Utils.getBCHDigit(G18)\n\nfunction getBestVersionForDataLength (mode, length, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\nfunction getReservedBitsCount (mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4\n}\n\nfunction getTotalBitsFromDataArray (segments, version) {\n  let totalBits = 0\n\n  segments.forEach(function (data) {\n    const reservedBits = getReservedBitsCount(data.mode, version)\n    totalBits += reservedBits + data.getBitsLength()\n  })\n\n  return totalBits\n}\n\nfunction getBestVersionForMixedData (segments, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    const length = getTotalBitsFromDataArray(segments, currentVersion)\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from (value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10)\n  }\n\n  return defaultValue\n}\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE\n\n  // Total codewords for this QR code version (Data + Error correction)\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits\n\n  const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor((usableBits / 10) * 3)\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor((usableBits / 11) * 2)\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13)\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8)\n  }\n}\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {\n  let seg\n\n  const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)\n\n  if (Array.isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl)\n    }\n\n    if (data.length === 0) {\n      return 1\n    }\n\n    seg = data[0]\n  } else {\n    seg = data\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)\n}\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits (version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  let d = version << 12\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))\n  }\n\n  return (version << 12) | d\n}\n","/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */\nexports.isValid = function isValid (version) {\n  return !isNaN(version) && version >= 1 && version <= 40\n}\n","const Mode = require('./mode')\n\nfunction NumericData (data) {\n  this.mode = Mode.NUMERIC\n  this.data = data.toString()\n}\n\nNumericData.getBitsLength = function getBitsLength (length) {\n  return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)\n}\n\nNumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nNumericData.prototype.getBitsLength = function getBitsLength () {\n  return NumericData.getBitsLength(this.data.length)\n}\n\nNumericData.prototype.write = function write (bitBuffer) {\n  let i, group, value\n\n  // The input data string is divided into groups of three digits,\n  // and each group is converted to its 10-bit binary equivalent.\n  for (i = 0; i + 3 <= this.data.length; i += 3) {\n    group = this.data.substr(i, 3)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, 10)\n  }\n\n  // If the number of input digits is not an exact multiple of three,\n  // the final one or two digits are converted to 4 or 7 bits respectively.\n  const remainingNum = this.data.length - i\n  if (remainingNum > 0) {\n    group = this.data.substr(i)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, remainingNum * 3 + 1)\n  }\n}\n\nmodule.exports = NumericData\n","const GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Uint8Array} p1 Polynomial\n * @param  {Uint8Array} p2 Polynomial\n * @return {Uint8Array}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  const coeff = new Uint8Array(p1.length + p2.length - 1)\n\n  for (let i = 0; i < p1.length; i++) {\n    for (let j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Uint8Array} divident Polynomial\n * @param  {Uint8Array} divisor  Polynomial\n * @return {Uint8Array}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  let result = new Uint8Array(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    const coeff = result[0]\n\n    for (let i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    let offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Uint8Array}    Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  let poly = new Uint8Array([1])\n  for (let i = 0; i < degree; i++) {\n    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]))\n  }\n\n  return poly\n}\n","const Polynomial = require('./polynomial')\n\nfunction ReedSolomonEncoder (degree) {\n  this.genPoly = undefined\n  this.degree = degree\n\n  if (this.degree) this.initialize(this.degree)\n}\n\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\nReedSolomonEncoder.prototype.initialize = function initialize (degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree\n  this.genPoly = Polynomial.generateECPolynomial(this.degree)\n}\n\n/**\n * Encodes a chunk of data\n *\n * @param  {Uint8Array} data Buffer containing input data\n * @return {Uint8Array}      Buffer containing encoded data\n */\nReedSolomonEncoder.prototype.encode = function encode (data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized')\n  }\n\n  // Calculate EC for this data block\n  // extends data size to data+genPoly size\n  const paddedData = new Uint8Array(data.length + this.degree)\n  paddedData.set(data)\n\n  // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n  const remainder = Polynomial.mod(paddedData, this.genPoly)\n\n  // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n  const start = this.degree - remainder.length\n  if (start > 0) {\n    const buff = new Uint8Array(this.degree)\n    buff.set(remainder, start)\n\n    return buff\n  }\n\n  return remainder\n}\n\nmodule.exports = ReedSolomonEncoder\n","let toSJISFunction\nconst CODEWORDS_COUNT = [\n  0, // Not used\n  26, 44, 70, 100, 134, 172, 196, 242, 292, 346,\n  404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,\n  1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,\n  2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706\n]\n\n/**\n * Returns the QR Code size for the specified version\n *\n * @param  {Number} version QR Code version\n * @return {Number}         size of QR code\n */\nexports.getSymbolSize = function getSymbolSize (version) {\n  if (!version) throw new Error('\"version\" cannot be null or undefined')\n  if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40')\n  return version * 4 + 17\n}\n\n/**\n * Returns the total number of codewords used to store data and EC information.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Data length in bits\n */\nexports.getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {\n  return CODEWORDS_COUNT[version]\n}\n\n/**\n * Encode data with Bose-Chaudhuri-Hocquenghem\n *\n * @param  {Number} data Value to encode\n * @return {Number}      Encoded value\n */\nexports.getBCHDigit = function (data) {\n  let digit = 0\n\n  while (data !== 0) {\n    digit++\n    data >>>= 1\n  }\n\n  return digit\n}\n\nexports.setToSJISFunction = function setToSJISFunction (f) {\n  if (typeof f !== 'function') {\n    throw new Error('\"toSJISFunc\" is not a valid function.')\n  }\n\n  toSJISFunction = f\n}\n\nexports.isKanjiModeEnabled = function () {\n  return typeof toSJISFunction !== 'undefined'\n}\n\nexports.toSJIS = function toSJIS (kanji) {\n  return toSJISFunction(kanji)\n}\n","const numeric = '[0-9]+'\nconst alphanumeric = '[A-Z $%*+\\\\-./:]+'\nlet kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +\n  '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +\n  '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +\n  '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+'\nkanji = kanji.replace(/u/g, '\\\\u')\n\nconst byte = '(?:(?![A-Z0-9 $%*+\\\\-./:]|' + kanji + ')(?:.|[\\r\\n]))+'\n\nexports.KANJI = new RegExp(kanji, 'g')\nexports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\\\-./:]+', 'g')\nexports.BYTE = new RegExp(byte, 'g')\nexports.NUMERIC = new RegExp(numeric, 'g')\nexports.ALPHANUMERIC = new RegExp(alphanumeric, 'g')\n\nconst TEST_KANJI = new RegExp('^' + kanji + '$')\nconst TEST_NUMERIC = new RegExp('^' + numeric + '$')\nconst TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\\\-./:]+$')\n\nexports.testKanji = function testKanji (str) {\n  return TEST_KANJI.test(str)\n}\n\nexports.testNumeric = function testNumeric (str) {\n  return TEST_NUMERIC.test(str)\n}\n\nexports.testAlphanumeric = function testAlphanumeric (str) {\n  return TEST_ALPHANUMERIC.test(str)\n}\n","const Mode = require('./mode')\nconst NumericData = require('./numeric-data')\nconst AlphanumericData = require('./alphanumeric-data')\nconst ByteData = require('./byte-data')\nconst KanjiData = require('./kanji-data')\nconst Regex = require('./regex')\nconst Utils = require('./utils')\nconst dijkstra = require('dijkstrajs')\n\n/**\n * Returns UTF8 byte length\n *\n * @param  {String} str Input string\n * @return {Number}     Number of byte\n */\nfunction getStringByteLength (str) {\n  return unescape(encodeURIComponent(str)).length\n}\n\n/**\n * Get a list of segments of the specified mode\n * from a string\n *\n * @param  {Mode}   mode Segment mode\n * @param  {String} str  String to process\n * @return {Array}       Array of object with segments data\n */\nfunction getSegments (regex, mode, str) {\n  const segments = []\n  let result\n\n  while ((result = regex.exec(str)) !== null) {\n    segments.push({\n      data: result[0],\n      index: result.index,\n      mode: mode,\n      length: result[0].length\n    })\n  }\n\n  return segments\n}\n\n/**\n * Extracts a series of segments with the appropriate\n * modes from a string\n *\n * @param  {String} dataStr Input string\n * @return {Array}          Array of object with segments data\n */\nfunction getSegmentsFromString (dataStr) {\n  const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr)\n  const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr)\n  let byteSegs\n  let kanjiSegs\n\n  if (Utils.isKanjiModeEnabled()) {\n    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr)\n    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr)\n  } else {\n    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr)\n    kanjiSegs = []\n  }\n\n  const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs)\n\n  return segs\n    .sort(function (s1, s2) {\n      return s1.index - s2.index\n    })\n    .map(function (obj) {\n      return {\n        data: obj.data,\n        mode: obj.mode,\n        length: obj.length\n      }\n    })\n}\n\n/**\n * Returns how many bits are needed to encode a string of\n * specified length with the specified mode\n *\n * @param  {Number} length String length\n * @param  {Mode} mode     Segment mode\n * @return {Number}        Bit length\n */\nfunction getSegmentBitsLength (length, mode) {\n  switch (mode) {\n    case Mode.NUMERIC:\n      return NumericData.getBitsLength(length)\n    case Mode.ALPHANUMERIC:\n      return AlphanumericData.getBitsLength(length)\n    case Mode.KANJI:\n      return KanjiData.getBitsLength(length)\n    case Mode.BYTE:\n      return ByteData.getBitsLength(length)\n  }\n}\n\n/**\n * Merges adjacent segments which have the same mode\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\nfunction mergeSegments (segs) {\n  return segs.reduce(function (acc, curr) {\n    const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null\n    if (prevSeg && prevSeg.mode === curr.mode) {\n      acc[acc.length - 1].data += curr.data\n      return acc\n    }\n\n    acc.push(curr)\n    return acc\n  }, [])\n}\n\n/**\n * Generates a list of all possible nodes combination which\n * will be used to build a segments graph.\n *\n * Nodes are divided by groups. Each group will contain a list of all the modes\n * in which is possible to encode the given text.\n *\n * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n * The group for '12345' will contain then 3 objects, one for each\n * possible encoding mode.\n *\n * Each node represents a possible segment.\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\nfunction buildNodes (segs) {\n  const nodes = []\n  for (let i = 0; i < segs.length; i++) {\n    const seg = segs[i]\n\n    switch (seg.mode) {\n      case Mode.NUMERIC:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },\n          { data: seg.data, mode: Mode.BYTE, length: seg.length }\n        ])\n        break\n      case Mode.ALPHANUMERIC:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.BYTE, length: seg.length }\n        ])\n        break\n      case Mode.KANJI:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }\n        ])\n        break\n      case Mode.BYTE:\n        nodes.push([\n          { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }\n        ])\n    }\n  }\n\n  return nodes\n}\n\n/**\n * Builds a graph from a list of nodes.\n * All segments in each node group will be connected with all the segments of\n * the next group and so on.\n *\n * At each connection will be assigned a weight depending on the\n * segment's byte length.\n *\n * @param  {Array} nodes    Array of object with segments data\n * @param  {Number} version QR Code version\n * @return {Object}         Graph of all possible segments\n */\nfunction buildGraph (nodes, version) {\n  const table = {}\n  const graph = { start: {} }\n  let prevNodeIds = ['start']\n\n  for (let i = 0; i < nodes.length; i++) {\n    const nodeGroup = nodes[i]\n    const currentNodeIds = []\n\n    for (let j = 0; j < nodeGroup.length; j++) {\n      const node = nodeGroup[j]\n      const key = '' + i + j\n\n      currentNodeIds.push(key)\n      table[key] = { node: node, lastCount: 0 }\n      graph[key] = {}\n\n      for (let n = 0; n < prevNodeIds.length; n++) {\n        const prevNodeId = prevNodeIds[n]\n\n        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n          graph[prevNodeId][key] =\n            getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -\n            getSegmentBitsLength(table[prevNodeId].lastCount, node.mode)\n\n          table[prevNodeId].lastCount += node.length\n        } else {\n          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length\n\n          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +\n            4 + Mode.getCharCountIndicator(node.mode, version) // switch cost\n        }\n      }\n    }\n\n    prevNodeIds = currentNodeIds\n  }\n\n  for (let n = 0; n < prevNodeIds.length; n++) {\n    graph[prevNodeIds[n]].end = 0\n  }\n\n  return { map: graph, table: table }\n}\n\n/**\n * Builds a segment from a specified data and mode.\n * If a mode is not specified, the more suitable will be used.\n *\n * @param  {String} data             Input data\n * @param  {Mode | String} modesHint Data mode\n * @return {Segment}                 Segment\n */\nfunction buildSingleSegment (data, modesHint) {\n  let mode\n  const bestMode = Mode.getBestModeForData(data)\n\n  mode = Mode.from(modesHint, bestMode)\n\n  // Make sure data can be encoded\n  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n    throw new Error('\"' + data + '\"' +\n      ' cannot be encoded with mode ' + Mode.toString(mode) +\n      '.\\n Suggested mode is: ' + Mode.toString(bestMode))\n  }\n\n  // Use Mode.BYTE if Kanji support is disabled\n  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n    mode = Mode.BYTE\n  }\n\n  switch (mode) {\n    case Mode.NUMERIC:\n      return new NumericData(data)\n\n    case Mode.ALPHANUMERIC:\n      return new AlphanumericData(data)\n\n    case Mode.KANJI:\n      return new KanjiData(data)\n\n    case Mode.BYTE:\n      return new ByteData(data)\n  }\n}\n\n/**\n * Builds a list of segments from an array.\n * Array can contain Strings or Objects with segment's info.\n *\n * For each item which is a string, will be generated a segment with the given\n * string and the more appropriate encoding mode.\n *\n * For each item which is an object, will be generated a segment with the given\n * data and mode.\n * Objects must contain at least the property \"data\".\n * If property \"mode\" is not present, the more suitable mode will be used.\n *\n * @param  {Array} array Array of objects with segments data\n * @return {Array}       Array of Segments\n */\nexports.fromArray = function fromArray (array) {\n  return array.reduce(function (acc, seg) {\n    if (typeof seg === 'string') {\n      acc.push(buildSingleSegment(seg, null))\n    } else if (seg.data) {\n      acc.push(buildSingleSegment(seg.data, seg.mode))\n    }\n\n    return acc\n  }, [])\n}\n\n/**\n * Builds an optimized sequence of segments from a string,\n * which will produce the shortest possible bitstream.\n *\n * @param  {String} data    Input string\n * @param  {Number} version QR Code version\n * @return {Array}          Array of segments\n */\nexports.fromString = function fromString (data, version) {\n  const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled())\n\n  const nodes = buildNodes(segs)\n  const graph = buildGraph(nodes, version)\n  const path = dijkstra.find_path(graph.map, 'start', 'end')\n\n  const optimizedSegs = []\n  for (let i = 1; i < path.length - 1; i++) {\n    optimizedSegs.push(graph.table[path[i]].node)\n  }\n\n  return exports.fromArray(mergeSegments(optimizedSegs))\n}\n\n/**\n * Splits a string in various segments with the modes which\n * best represent their content.\n * The produced segments are far from being optimized.\n * The output of this function is only used to estimate a QR Code version\n * which may contain the data.\n *\n * @param  {string} data Input string\n * @return {Array}       Array of segments\n */\nexports.rawSplit = function rawSplit (data) {\n  return exports.fromArray(\n    getSegmentsFromString(data, Utils.isKanjiModeEnabled())\n  )\n}\n"],"names":["Utils","ECLevel","BitBuffer","BitMatrix","AlignmentPattern","FinderPattern","MaskPattern","ECCode","ReedSolomonEncoder","Version","FormatInfo","Mode","Segments","setupFormatInfo","matrix","errorCorrectionLevel","maskPattern","size","bits","getEncodedBits","i","mod","set","createData","version","segments","buffer","forEach","data","put","mode","bit","getLength","getCharCountIndicator","write","dataTotalCodewordsBits","getSymbolTotalCodewords","getTotalCodewordsCount","getLengthInBits","putBit","remainingByte","bitBuffer","totalCodewords","ecTotalCodewords","dataTotalCodewords","ecTotalBlocks","getBlocksCount","blocksInGroup2","blocksInGroup1","totalCodewordsInGroup1","Math","floor","dataCodewordsInGroup1","dataCodewordsInGroup2","ecCount","rs","offset","dcData","Array","ecData","maxDataSize","Uint8Array","b","dataSize","slice","encode","max","r","index","length","createCodewords","createSymbol","isArray","fromArray","Error","estimatedVersion","rawSegments","rawSplit","getBestVersionForData","fromString","bestVersion","dataBits","moduleCount","getSymbolSize","modules","pos","getPositions","row","col","c","setupFinderPattern","value","setupTimingPattern","setupAlignmentPattern","setupVersionInfo","inc","bitIndex","byteIndex","isReserved","dark","setupData","isNaN","getBestMask","bind","applyMask","exports","create","options","mask","M","from","toSJISFunc","setToSJISFunction","VersionCheck","Regex","NUMERIC","id","ccBits","ALPHANUMERIC","BYTE","KANJI","MIXED","isValid","getBestModeForData","dataStr","testNumeric","testAlphanumeric","testKanji","toString","defaultValue","string","toLowerCase","e","G18_BCH","getBCHDigit","getReservedBitsCount","getTotalBitsFromDataArray","totalBits","reservedBits","getBitsLength","parseInt","getCapacity","usableBits","seg","ecl","currentVersion","getBestVersionForMixedData","getBestVersionForDataLength","d","NumericData","this","prototype","group","substr","remainingNum","module","GF","mul","p1","p2","coeff","j","divident","divisor","result","generateECPolynomial","degree","poly","exp","Polynomial","genPoly","undefined","initialize","paddedData","remainder","start","buff","toSJISFunction","CODEWORDS_COUNT","digit","f","isKanjiModeEnabled","toSJIS","kanji","numeric","replace","byte","RegExp","BYTE_KANJI","TEST_KANJI","TEST_NUMERIC","TEST_ALPHANUMERIC","str","test","AlphanumericData","ByteData","KanjiData","dijkstra","getStringByteLength","unescape","encodeURIComponent","getSegments","regex","exec","push","getSegmentsFromString","numSegs","alphaNumSegs","byteSegs","kanjiSegs","concat","sort","s1","s2","map","obj","getSegmentBitsLength","buildSingleSegment","modesHint","bestMode","array","reduce","acc","nodes","segs","buildNodes","graph","table","prevNodeIds","nodeGroup","currentNodeIds","node","key","lastCount","n","prevNodeId","end","buildGraph","path","find_path","optimizedSegs","curr","prevSeg","mergeSegments"],"sourceRoot":""}