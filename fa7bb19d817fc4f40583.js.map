{"version":3,"file":"fa7bb19d817fc4f40583.js","mappings":"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","sources":["webpack://bus/./src/interface/notification-schedule-manager/index.ts","webpack://bus/./src/interface/personal-schedule-editor/index.ts","webpack://bus/./src/interface/personal-schedule-manager/index.ts","webpack://bus/./src/interface/personal-schedule-creator/index.ts","webpack://bus/./src/interface/prompt/index.ts"],"sourcesContent":["import { getUpdateRate } from '../../data/analytics/update-rate/index';\nimport { getDataReceivingProgress } from '../../data/apis/loader';\nimport { cancelNotification } from '../../data/notification/apis/cancelNotification/index';\nimport { IntegratedNotificationScheduleItem, IntegratedNotificationSchedules, integrateNotifcationSchedules, NotificationSchedule } from '../../data/notification/index';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../tools/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../tools/query-selector';\nimport { getIconHTML } from '../icons/index';\nimport { closePreviousPage, GeneratedElement, openPreviousPage, pushPageHistory, querySize } from '../index';\nimport { promptMessage } from '../prompt/index';\n\nconst NotificationScheduleManagerField = documentQuerySelector('.css_notification_schedule_manager_field');\nconst NotificationScheduleManagerHeadElement = elementQuerySelector(NotificationScheduleManagerField, '.css_notification_schedule_manager_head');\nconst NotificationScheduleManagerUpdateTimerBoxElement = elementQuerySelector(NotificationScheduleManagerHeadElement, '.css_notification_schedule_manager_update_timer_box');\nconst NotificationScheduleManagerUpdateTimerElement = elementQuerySelector(NotificationScheduleManagerUpdateTimerBoxElement, '.css_notification_schedule_manager_update_timer');\nconst NotificationScheduleManagerBody = elementQuerySelector(NotificationScheduleManagerField, '.css_notification_schedule_manager_body');\nconst NotificationScheduleList = elementQuerySelector(NotificationScheduleManagerBody, '.css_notification_schedule_manager_notification_schedule_list');\n\nlet previousIntegration = {} as IntegratedNotificationSchedules;\nlet previousAnimation: boolean = true;\nlet previousSkeletonScreen: boolean = false;\n\nlet notifcationScheduleManagerRefreshTimer_retryInterval: number = 10 * 1000;\nlet notifcationScheduleManagerRefreshTimer_baseInterval: number = 15 * 1000;\nlet notifcationScheduleManagerRefreshTimer_minInterval: number = 5 * 1000;\nlet notifcationScheduleManagerRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet notifcationScheduleManagerRefreshTimer_dynamic: boolean = true;\nlet notifcationScheduleManagerRefreshTimer_streaming: boolean = false;\nlet notifcationScheduleManagerRefreshTimer_lastUpdate: number = 0;\nlet notifcationScheduleManagerRefreshTimer_nextUpdate: number = 0;\nlet notifcationScheduleManagerRefreshTimer_refreshing: boolean = false;\nlet notifcationScheduleManagerRefreshTimer_currentRequestID: string = '';\nlet notifcationScheduleManagerRefreshTimer_currentProgress: number = -1;\nlet notifcationScheduleManagerRefreshTimer_targetProgress: number = -1;\nlet notifcationScheduleManagerRefreshTimer_streamStarted: boolean = false;\nlet notifcationScheduleManagerRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nfunction updateUpdateTimer(): void {\n  const smoothingFactor = 0.1;\n  const time = new Date().getTime();\n  if (notifcationScheduleManagerRefreshTimer_refreshing) {\n    notifcationScheduleManagerRefreshTimer_targetProgress = -1 + getDataReceivingProgress(notifcationScheduleManagerRefreshTimer_currentRequestID);\n    notifcationScheduleManagerRefreshTimer_currentProgress = (notifcationScheduleManagerRefreshTimer_targetProgress - notifcationScheduleManagerRefreshTimer_currentProgress) * smoothingFactor;\n  } else {\n    notifcationScheduleManagerRefreshTimer_targetProgress = -1 * Math.min(1, Math.max(0, Math.abs(time - notifcationScheduleManagerRefreshTimer_lastUpdate) / notifcationScheduleManagerRefreshTimer_dynamicInterval));\n    notifcationScheduleManagerRefreshTimer_currentProgress = notifcationScheduleManagerRefreshTimer_targetProgress;\n  }\n  NotificationScheduleManagerUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', notifcationScheduleManagerRefreshTimer_currentProgress.toString());\n  window.requestAnimationFrame(function () {\n    if (notifcationScheduleManagerRefreshTimer_streaming) {\n      updateUpdateTimer();\n    }\n  });\n}\n\nfunction generateElementOfItem(): GeneratedElement {\n  const identifier = generateIdentifier('i');\n  const element = document.createElement('div');\n  element.classList.add('css_notification_schedule_manager_item');\n  element.id = identifier;\n  element.innerHTML = /*html*/ `<div class=\"css_notification_schedule_manager_item_hours\"></div><div class=\"css_notification_schedule_manager_item_notification_schedule\"><div class=\"css_notification_schedule_manager_item_notification_schedule_minutes\"></div><div class=\"css_notification_schedule_manager_item_notification_schedule_context\"></div><div class=\"css_notification_schedule_manager_item_notification_schedule_main\"></div><div class=\"css_notification_schedule_manager_item_notification_schedule_cancel\" onclick=\"bus.notification.cancelNotificationOnNotificationScheduleManager('${identifier}', 'null')\">${getIconHTML('close')}</div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction updateNotificationScheduleManagerField(integration: IntegratedNotificationSchedules, skeletonScreen: boolean, animation: boolean): void {\n  function updateItem(thisItemElement: HTMLElement, thisItem: IntegratedNotificationScheduleItem, previousItem: IntegratedNotificationScheduleItem | null): void {\n    function updateHours(thisItemElement: HTMLElement, thisItem: IntegratedNotificationScheduleItem): void {\n      const thisItemHoursElement = elementQuerySelector(thisItemElement, '.css_notification_schedule_manager_item_hours');\n      thisItemHoursElement.innerText = thisItem.hours;\n    }\n\n    function updateMinutes(thisItemElement: HTMLElement, thisItem: IntegratedNotificationScheduleItem): void {\n      const thisItemNotificationScheduleElement = elementQuerySelector(thisItemElement, '.css_notification_schedule_manager_item_notification_schedule');\n      const thisItemMinutesElement = elementQuerySelector(thisItemNotificationScheduleElement, '.css_notification_schedule_manager_item_notification_schedule_minutes');\n      thisItemMinutesElement.innerText = thisItem.minutes;\n    }\n\n    function updateMain(thisItemElement: HTMLElementm, thisItem: IntegratedNotificationScheduleItem): void {\n      const thisItemNotificationScheduleElement = elementQuerySelector(thisItemElement, '.css_notification_schedule_manager_item_notification_schedule');\n      const thisItemMainElement = elementQuerySelector(thisItemNotificationScheduleElement, '.css_notification_schedule_manager_item_notification_schedule_main');\n      thisItemMainElement.innerText = thisItem.name;\n    }\n\n    function updateContext(thisItemElement: HTMLElement, thisItem: IntegratedNotificationScheduleItem): void {\n      const thisItemNotificationScheduleElement = elementQuerySelector(thisItemElement, '.css_notification_schedule_manager_item_notification_schedule');\n      const thisItemContextElement = elementQuerySelector(thisItemNotificationScheduleElement, '.css_notification_schedule_manager_item_notification_schedule_context');\n      thisItemContextElement.innerText = `${thisItem.route.name} - 往${thisItem.route.direction}`;\n    }\n\n    function updateCancel(thisItemElement: HTMLElement, thisItem: IntegratedNotificationScheduleItem): void {\n      const thisItemNotificationScheduleElement = elementQuerySelector(thisItemElement, '.css_notification_schedule_manager_item_notification_schedule');\n      const thisItemContextElement = elementQuerySelector(thisItemNotificationScheduleElement, '.css_notification_schedule_manager_item_notification_schedule_cancel');\n      thisItemContextElement.setAttribute('onclick', `bus.notification.cancelNotificationOnNotificationScheduleManager('${thisItemElement.id}', '${thisItem.schedule_id}')`);\n    }\n\n    function updateFirst(thisItemElement: HTMLElement, thisItem: IntegratedNotificationScheduleItem): void {\n      thisItemElement.setAttribute('first', booleanToString(thisItem.is_first));\n    }\n\n    function updateAnimation(thisItemElement: HTMLElement, animation: boolean): void {\n      thisItemElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisItemElement: HTMLElement, skeletonScreen: boolean): void {\n      thisItemElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateHours(thisItemElement, thisItem);\n      updateMinutes(thisItemElement, thisItem);\n      updateMain(thisItemElement, thisItem);\n      updateContext(thisItemElement, thisItem);\n      updateCancel(thisItemElement, thisItem);\n      updateFirst(thisItemElement, thisItem);\n      updateAnimation(thisItemElement, animation);\n      updateSkeletonScreen(thisItemElement, skeletonScreen);\n    } else {\n      if (!(thisItem.hours === previousItem.hours)) {\n        updateHours(thisItemElement, thisItem);\n      }\n      if (!(thisItem.minutes === previousItem.minutes)) {\n        updateMinutes(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.schedule_id, thisItem.schedule_id)) {\n        updateMain(thisItemElement, thisItem);\n        updateContext(thisItemElement, thisItem);\n        updateCancel(thisItemElement, thisItem);\n      }\n      if (!(previousItem.is_first === thisItem.is_first)) {\n        updateFirst(thisItemElement, thisItem);\n      }\n      if (!(skeletonScreen === previousSkeletonScreen)) {\n        updateSkeletonScreen(thisItemElement, skeletonScreen);\n      }\n      if (!(previousAnimation === animation)) {\n        updateAnimation(thisItemElement, animation);\n      }\n      if (!(previousSkeletonScreen === skeletonScreen)) {\n        updateSkeletonScreen(thisItemElement, skeletonScreen);\n      }\n    }\n  }\n\n  const itemQuantity = integration.itemQuantity;\n  const items = integration.items;\n\n  const currentItemSeatQuantity = elementQuerySelectorAll(NotificationScheduleList, `.css_notification_schedule_manager_item`).length;\n  if (!(itemQuantity === currentItemSeatQuantity)) {\n    const capacity = currentItemSeatQuantity - itemQuantity;\n    if (capacity < 0) {\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newItemElement = generateElementOfItem();\n        NotificationScheduleList.appendChild(newItemElement.element);\n      }\n    } else {\n      const NotificationScheduleItemElements = elementQuerySelectorAll(NotificationScheduleList, '.css_notification_schedule_manager_item');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const itemIndex = currentItemSeatQuantity - 1 - o;\n        NotificationScheduleItemElements[itemIndex].remove();\n      }\n    }\n  }\n\n  const NotificationScheduleItemElements = elementQuerySelectorAll(NotificationScheduleList, '.css_notification_schedule_manager_item');\n  for (let j = 0; j < itemQuantity; j++) {\n    const thisItemElement = NotificationScheduleItemElements[j];\n    const thisItem = items[j];\n    if (previousIntegration.hasOwnProperty('items')) {\n      if (previousIntegration.items[j]) {\n        const previousItem = previousIntegration.items[j];\n        updateItem(thisItemElement, thisItem, previousItem);\n      } else {\n        updateItem(thisItemElement, thisItem, null);\n      }\n    } else {\n      updateItem(thisItemElement, thisItem, null);\n    }\n  }\n\n  previousIntegration = integration;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nfunction setUpNotificationScheduleManagerFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const defaultItemQuantity: IntegratedNotificationSchedules['itemQuantity'] = Math.floor(FieldHeight / 50) + 5;\n  let items: IntegratedNotificationSchedules['items'] = [];\n  for (let i = 0; i < defaultItemQuantity; i++) {\n    items.push({\n      name: '',\n      stop_id: 0,\n      estimate_time: 0,\n      schedule_id: 'null',\n      scheduled_time: 0,\n      route: {\n        name: '',\n        direction: '',\n        id: 0,\n        pathAttributeId: []\n      },\n      is_first: true,\n      date: '',\n      hours: '',\n      minutes: ''\n    });\n  }\n  updateNotificationScheduleManagerField(\n    {\n      items: items,\n      itemQuantity: defaultItemQuantity,\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nasync function refreshNotificationScheduleManager() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  notifcationScheduleManagerRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  notifcationScheduleManagerRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  notifcationScheduleManagerRefreshTimer_refreshing = true;\n  notifcationScheduleManagerRefreshTimer_currentRequestID = generateIdentifier('r');\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'true');\n  const integration = await integrateNotifcationSchedules(notifcationScheduleManagerRefreshTimer_currentRequestID);\n  updateNotificationScheduleManagerField(integration, false, playing_animation);\n  let updateRate = 0;\n  if (notifcationScheduleManagerRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  notifcationScheduleManagerRefreshTimer_lastUpdate = new Date().getTime();\n  if (notifcationScheduleManagerRefreshTimer_dynamic) {\n    notifcationScheduleManagerRefreshTimer_nextUpdate = Math.max(notifcationScheduleManagerRefreshTimer_lastUpdate + notifcationScheduleManagerRefreshTimer_minInterval, integration.dataUpdateTime + notifcationScheduleManagerRefreshTimer_baseInterval / updateRate);\n  } else {\n    notifcationScheduleManagerRefreshTimer_nextUpdate = notifcationScheduleManagerRefreshTimer_lastUpdate + notifcationScheduleManagerRefreshTimer_baseInterval;\n  }\n  notifcationScheduleManagerRefreshTimer_dynamicInterval = Math.max(notifcationScheduleManagerRefreshTimer_minInterval, notifcationScheduleManagerRefreshTimer_nextUpdate - notifcationScheduleManagerRefreshTimer_lastUpdate);\n  notifcationScheduleManagerRefreshTimer_refreshing = false;\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'false');\n}\n\nasync function streamNotificationScheduleManager() {\n  refreshNotificationScheduleManager()\n    .then(function () {\n      if (notifcationScheduleManagerRefreshTimer_streaming) {\n        notifcationScheduleManagerRefreshTimer_timer = setTimeout(function () {\n          streamNotificationScheduleManager();\n        }, Math.max(notifcationScheduleManagerRefreshTimer_minInterval, notifcationScheduleManagerRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        notifcationScheduleManagerRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (notifcationScheduleManagerRefreshTimer_streaming) {\n        notifcationScheduleManagerRefreshTimer_timer = setTimeout(function () {\n          streamNotificationScheduleManager();\n        }, notifcationScheduleManagerRefreshTimer_retryInterval);\n      } else {\n        notifcationScheduleManagerRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function openNotificationScheduleManager(): void {\n  pushPageHistory('NotificationScheduleManager');\n  NotificationScheduleManagerField.setAttribute('displayed', 'true');\n  setUpNotificationScheduleManagerFieldSkeletonScreen();\n  if (!notifcationScheduleManagerRefreshTimer_streaming) {\n    notifcationScheduleManagerRefreshTimer_streaming = true;\n    if (!notifcationScheduleManagerRefreshTimer_streamStarted) {\n      notifcationScheduleManagerRefreshTimer_streamStarted = true;\n      streamNotificationScheduleManager();\n    } else {\n      refreshNotificationScheduleManager();\n    }\n    notifcationScheduleManagerRefreshTimer_currentProgress = -1;\n    notifcationScheduleManagerRefreshTimer_targetProgress = -1;\n    updateUpdateTimer();\n  }\n  closePreviousPage();\n}\n\nexport function closeNotificationScheduleManager(): void {\n  // revokePageHistory('NotificationScheduleManager');\n  NotificationScheduleManagerField.setAttribute('displayed', 'false');\n  notifcationScheduleManagerRefreshTimer_streaming = false;\n  notifcationScheduleManagerRefreshTimer_currentProgress = -1;\n  notifcationScheduleManagerRefreshTimer_targetProgress = -1;\n  openPreviousPage();\n}\n\nexport async function cancelNotificationOnNotificationScheduleManager(identifier: string, schedule_id: NotificationSchedule['schedule_id']) {\n  promptMessage('處理中', 'manufacturing');\n  const cancellation = await cancelNotification(schedule_id);\n  if (cancellation) {\n    const itemElement = elementQuerySelector(NotificationScheduleList, `.css_notification_schedule_manager_item#${identifier}`);\n    itemElement.remove();\n    promptMessage('已取消通知', 'check_circle');\n    if (!notifcationScheduleManagerRefreshTimer_refreshing) {\n      const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n      const integration = await integrateNotifcationSchedules(notifcationScheduleManagerRefreshTimer_currentRequestID);\n      updateNotificationScheduleManagerField(integration, false, playing_animation);\n    }\n  } else {\n    promptMessage('取消失敗', 'error');\n  }\n}\n","import { getPersonalSchedule, updatePersonalSchedule } from '../../data/personal-schedule/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../tools/query-selector';\nimport { timeObjectToString, WeekDayIndex } from '../../tools/time';\nimport { closePreviousPage, openPreviousPage, pushPageHistory } from '../index';\n\nconst PersonalScheduleEditorField = documentQuerySelector('.css_personal_schedule_editor_field');\nconst PersonalScheduleEditorBodyElement = elementQuerySelector(PersonalScheduleEditorField, '.css_personal_schedule_editor_body');\nconst PersonalScheduleEditorHeadElement = elementQuerySelector(PersonalScheduleEditorField, '.css_personal_schedule_editor_head');\nconst leftButtonElement = elementQuerySelector(PersonalScheduleEditorHeadElement, '.css_personal_schedule_editor_button_left');\nconst PersonalScheduleEditorGroups = elementQuerySelector(PersonalScheduleEditorBodyElement, '.css_personal_schedule_editor_groups');\nconst nameInputElement = elementQuerySelector(PersonalScheduleEditorGroups, '.css_personal_schedule_editor_group[group=\"schedule-name\"] .css_personal_schedule_editor_group_body input');\nconst startTimeInputElement = elementQuerySelector(PersonalScheduleEditorGroups, '.css_personal_schedule_editor_group[group=\"schedule-start-time\"] .css_personal_schedule_editor_group_body input');\nconst endTimeInputElement = elementQuerySelector(PersonalScheduleEditorGroups, '.css_personal_schedule_editor_group[group=\"schedule-end-time\"] .css_personal_schedule_editor_group_body input');\nconst dayGroupBodyElement = elementQuerySelector(PersonalScheduleEditorGroups, '.css_personal_schedule_editor_group[group=\"schedule-days\"] .css_personal_schedule_editor_group_body');\nconst dayElements = elementQuerySelectorAll(dayGroupBodyElement, '.css_personal_schedule_editor_day');\n\nexport async function saveEditedPersonalSchedule(personalScheduleID: string) {\n  const name = nameInputElement.value;\n  const startTime = startTimeInputElement.value;\n  const endTime = endTimeInputElement.value;\n\n  const [startHours, startMinutes] = String(startTime)\n    .split(':')\n    .map((e) => parseInt(e));\n  const [endHours, endMinutes] = String(endTime)\n    .split(':')\n    .map((e) => parseInt(e));\n\n  let days = [];\n  for (let i = 0; i < 7; i++) {\n    const thisDayElement = dayElements[i];\n    const highlighted = thisDayElement.getAttribute('highlighted');\n    const day = parseInt(thisDayElement.getAttribute('day'));\n    if (highlighted === 'true') {\n      days.push(day);\n    }\n  }\n\n  let personalSchedule = await getPersonalSchedule(personalScheduleID);\n  personalSchedule.name = name;\n  personalSchedule.days = days;\n  personalSchedule.period.start.hours = startHours;\n  personalSchedule.period.start.minutes = startMinutes;\n  personalSchedule.period.end.hours = endHours;\n  personalSchedule.period.end.minutes = endMinutes;\n\n  await updatePersonalSchedule(personalSchedule);\n  closePersonalScheduleEditor();\n}\n\nasync function initializePersonalScheduleEditorField(personalScheduleID: string) {\n  const personalSchedule = await getPersonalSchedule(personalScheduleID);\n  nameInputElement.value = personalSchedule.name;\n  startTimeInputElement.value = timeObjectToString(personalSchedule.period.start);\n  endTimeInputElement.value = timeObjectToString(personalSchedule.period.end);\n\n  for (let i = 0; i < 7; i++) {\n    const thisDayElement = dayElements[i];\n    if (personalSchedule.days.indexOf(i) > -1) {\n      thisDayElement.setAttribute('highlighted', 'true');\n    } else {\n      thisDayElement.setAttribute('highlighted', 'false');\n    }\n  }\n  leftButtonElement.setAttribute('onclick', `bus.personalSchedule.saveEditedPersonalSchedule('${personalScheduleID}')`);\n}\n\nexport function openPersonalScheduleEditor(personalScheduleID: string): void {\n  pushPageHistory('PersonalScheduleEditor');\n  PersonalScheduleEditorField.setAttribute('displayed', 'true');\n  initializePersonalScheduleEditorField(personalScheduleID);\n  closePreviousPage();\n}\n\nexport function closePersonalScheduleEditor(): void {\n  // revokePageHistory('PersonalScheduleEditor');\n  PersonalScheduleEditorField.setAttribute('displayed', 'false');\n  openPreviousPage();\n}\n\nexport function switchPersonalScheduleEditorDay(day: WeekDayIndex): void {\n  const thisDayElement = elementQuerySelector(dayGroupBodyElement, `.css_personal_schedule_editor_day[day=\"${day}\"]`);\n  const highlighted = thisDayElement.getAttribute('highlighted');\n  if (highlighted === 'true') {\n    thisDayElement.setAttribute('highlighted', 'false');\n  } else {\n    thisDayElement.setAttribute('highlighted', 'true');\n  }\n}\n","import { listPersonalSchedules, PersonalSchedule } from '../../data/personal-schedule/index';\nimport { generateIdentifier } from '../../tools/index';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\nimport { getIconHTML } from '../icons/index';\nimport { GeneratedElement, pushPageHistory, revokePageHistory } from '../index';\n\nconst PersonalScheduleManagerField = documentQuerySelector('.css_personal_schedule_manager_field');\nconst PersonalScheduleManagerBodyElement = elementQuerySelector(PersonalScheduleManagerField, '.css_personal_schedule_manager_body');\nconst ListElement = elementQuerySelector(PersonalScheduleManagerBodyElement, '.css_personal_schedule_manager_list');\n\nfunction generateElementOfItem(item: PersonalSchedule): GeneratedElement {\n  const identifier = generateIdentifier('i');\n  const element = document.createElement('div');\n  element.classList.add('css_personal_schedule_manager_item');\n  element.id = identifier;\n  element.setAttribute('onclick', `bus.personalSchedule.openPersonalScheduleEditor('${item.id}')`);\n  element.innerHTML = /*html*/ `<div class=\"css_personal_schedule_manager_item_name\">${item.name}</div><div class=\"css_personal_schedule_manager_item_arrow\">${getIconHTML('arrow_forward_ios')}</div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nasync function initializePersonalScheduleManagerField() {\n  ListElement.innerHTML = '';\n  const personalSchedules = await listPersonalSchedules();\n  for (const item of personalSchedules) {\n    const thisElement = generateElementOfItem(item);\n    ListElement.appendChild(thisElement.element);\n  }\n}\n\nexport function openPersonalScheduleManager(): void {\n  pushPageHistory('PersonalScheduleManager');\n  PersonalScheduleManagerField.setAttribute('displayed', 'true');\n  initializePersonalScheduleManagerField();\n}\n\nexport function closePersonalScheduleManager(): void {\n  revokePageHistory('PersonalScheduleManager');\n  PersonalScheduleManagerField.setAttribute('displayed', 'false');\n}\n","import { createPersonalSchedule } from '../../data/personal-schedule/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../tools/query-selector';\nimport { WeekDayIndex } from '../../tools/time';\nimport { closePreviousPage, openPreviousPage, pushPageHistory } from '../index';\nimport { promptMessage } from '../prompt/index';\n\nconst PersonalScheduleCreatorField = documentQuerySelector('.css_personal_schedule_creator_field');\nconst PersonalScheduleCreatorBodyElement = elementQuerySelector(PersonalScheduleCreatorField, '.css_personal_schedule_creator_body');\nconst PersonalScheduleCreatorGroups = elementQuerySelector(PersonalScheduleCreatorBodyElement, '.css_personal_schedule_creator_groups');\nconst nameInputElement = elementQuerySelector(PersonalScheduleCreatorGroups, '.css_personal_schedule_creator_group[group=\"schedule-name\"] .css_personal_schedule_creator_group_body input');\nconst startTimeInputElement = elementQuerySelector(PersonalScheduleCreatorGroups, '.css_personal_schedule_creator_group[group=\"schedule-start-time\"] .css_personal_schedule_creator_group_body input');\nconst endTimeInputElement = elementQuerySelector(PersonalScheduleCreatorGroups, '.css_personal_schedule_creator_group[group=\"schedule-end-time\"] .css_personal_schedule_creator_group_body input');\nconst dayGroupBodyElement = elementQuerySelector(PersonalScheduleCreatorGroups, '.css_personal_schedule_creator_group[group=\"schedule-days\"] .css_personal_schedule_creator_group_body');\nconst dayElements = elementQuerySelectorAll(dayGroupBodyElement, '.css_personal_schedule_creator_day');\n\nexport function createFormulatedPersonalSchedule(): void {\n  const name = nameInputElement.value;\n  const startTime = startTimeInputElement.value;\n  const endTime = endTimeInputElement.value;\n\n  const [startHours, startMinutes] = String(startTime)\n    .split(':')\n    .map((e) => parseInt(e));\n  const [endHours, endMinutes] = String(endTime)\n    .split(':')\n    .map((e) => parseInt(e));\n\n  let days = [];\n  for (let i = 0; i < 7; i++) {\n    const thisDayElement = dayElements[i];\n    const highlighted = thisDayElement.getAttribute('highlighted');\n    const day = parseInt(thisDayElement.getAttribute('day'));\n    if (highlighted === 'true') {\n      days.push(day);\n    }\n  }\n\n  createPersonalSchedule(name, startHours, startMinutes, endHours, endMinutes, days).then(function (e) {\n    if (e) {\n      closePersonalScheduleCreator();\n      promptMessage('已建立個人化行程', 'calendar_view_day');\n    } else {\n      promptMessage('無法建立個人化行程', 'error');\n    }\n  });\n}\n\nexport function openPersonalScheduleCreator(): void {\n  pushPageHistory('PersonalScheduleCreator');\n  PersonalScheduleCreatorField.setAttribute('displayed', 'true');\n  closePreviousPage();\n}\n\nexport function closePersonalScheduleCreator(): void {\n  // revokePageHistory('PersonalScheduleCreator');\n  PersonalScheduleCreatorField.setAttribute('displayed', 'false');\n  openPreviousPage();\n}\n\nexport function switchPersonalScheduleCreatorDay(day: WeekDayIndex): void {\n  const thisDayElement = elementQuerySelector(dayGroupBodyElement, `.css_personal_schedule_creator_day[day=\"${day}\"]`);\n  const highlighted = thisDayElement.getAttribute('highlighted');\n  if (highlighted === 'true') {\n    thisDayElement.setAttribute('highlighted', 'false');\n  } else {\n    thisDayElement.setAttribute('highlighted', 'true');\n  }\n}\n","import { getSettingOptionValue } from '../../data/settings/index';\nimport { booleanToString, generateIdentifier } from '../../tools/index';\nimport { documentQuerySelectorAll } from '../../tools/query-selector';\nimport { getIconHTML } from '../icons/index';\nimport { MaterialSymbols } from '../icons/material-symbols-type';\n\nexport function promptMessage(message: string, icon: MaterialSymbols): void {\n  const allPromptElements = documentQuerySelectorAll('.css_prompt');\n  if (!(allPromptElements === null)) {\n    for (const promptElement of allPromptElements) {\n      promptElement.remove();\n    }\n  }\n\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n\n  const promptID: string = generateIdentifier();\n\n  const promptElement = document.createElement('div');\n  promptElement.id = promptID;\n  promptElement.classList.add('css_prompt');\n  promptElement.setAttribute('animation', booleanToString(playing_animation));\n\n  const promptIconElement = document.createElement('div');\n  promptIconElement.classList.add('css_prompt_icon');\n  promptIconElement.innerHTML = getIconHTML(icon);\n  promptElement.appendChild(promptIconElement);\n\n  const promptMessageElement = document.createElement('div');\n  promptMessageElement.classList.add('css_prompt_message');\n  promptMessageElement.innerText = message;\n  promptElement.appendChild(promptMessageElement);\n\n  document.body.appendChild(promptElement);\n\n  const promptElementInstance = document.getElementById(promptID);\n  if (!(promptElementInstance === null)) {\n    promptElementInstance.addEventListener(\n      'animationend',\n      function () {\n        promptElementInstance.remove();\n      },\n      { once: true }\n    );\n  }\n}\n"],"names":["NotificationScheduleManagerField","documentQuerySelector","NotificationScheduleManagerHeadElement","elementQuerySelector","NotificationScheduleManagerUpdateTimerBoxElement","NotificationScheduleManagerUpdateTimerElement","NotificationScheduleManagerBody","NotificationScheduleList","previousIntegration","previousAnimation","previousSkeletonScreen","notifcationScheduleManagerRefreshTimer_baseInterval","notifcationScheduleManagerRefreshTimer_minInterval","notifcationScheduleManagerRefreshTimer_dynamicInterval","notifcationScheduleManagerRefreshTimer_dynamic","notifcationScheduleManagerRefreshTimer_streaming","notifcationScheduleManagerRefreshTimer_lastUpdate","notifcationScheduleManagerRefreshTimer_nextUpdate","notifcationScheduleManagerRefreshTimer_refreshing","notifcationScheduleManagerRefreshTimer_currentRequestID","notifcationScheduleManagerRefreshTimer_currentProgress","notifcationScheduleManagerRefreshTimer_targetProgress","notifcationScheduleManagerRefreshTimer_streamStarted","updateUpdateTimer","time","Date","getTime","getDataReceivingProgress","Math","min","max","abs","style","setProperty","toString","window","requestAnimationFrame","updateNotificationScheduleManagerField","integration","skeletonScreen","animation","updateItem","thisItemElement","thisItem","previousItem","updateHours","innerText","hours","updateMinutes","thisItemNotificationScheduleElement","minutes","updateMain","name","updateContext","route","direction","updateCancel","setAttribute","id","schedule_id","updateFirst","booleanToString","is_first","updateAnimation","updateSkeletonScreen","compareThings","identifier","element","itemQuantity","items","currentItemSeatQuantity","elementQuerySelectorAll","length","capacity","o","newItemElement","generateIdentifier","document","createElement","classList","add","innerHTML","getIconHTML","appendChild","NotificationScheduleItemElements","remove","j","hasOwnProperty","refreshNotificationScheduleManager","_refreshNotificationScheduleManager","apply","arguments","_asyncToGenerator","playing_animation","getSettingOptionValue","refresh_interval_setting","dynamic","baseInterval","integrateNotifcationSchedules","updateRate","getUpdateRate","dataUpdateTime","streamNotificationScheduleManager","_streamNotificationScheduleManager","then","setTimeout","err","console","error","openNotificationScheduleManager","pushPageHistory","WindowSize","querySize","FieldHeight","width","height","defaultItemQuantity","floor","i","push","stop_id","estimate_time","scheduled_time","pathAttributeId","date","setUpNotificationScheduleManagerFieldSkeletonScreen","closePreviousPage","closeNotificationScheduleManager","openPreviousPage","cancelNotificationOnNotificationScheduleManager","_x","_x2","_cancelNotificationOnNotificationScheduleManager","promptMessage","cancelNotification","PersonalScheduleEditorField","PersonalScheduleEditorBodyElement","PersonalScheduleEditorHeadElement","leftButtonElement","PersonalScheduleEditorGroups","nameInputElement","startTimeInputElement","endTimeInputElement","dayGroupBodyElement","dayElements","saveEditedPersonalSchedule","_saveEditedPersonalSchedule","personalScheduleID","value","startTime","endTime","_String$split$map2","_slicedToArray","String","split","map","e","parseInt","startHours","startMinutes","_String$split$map4","endHours","endMinutes","days","thisDayElement","highlighted","getAttribute","day","personalSchedule","getPersonalSchedule","period","start","end","updatePersonalSchedule","closePersonalScheduleEditor","_initializePersonalScheduleEditorField","timeObjectToString","indexOf","openPersonalScheduleEditor","initializePersonalScheduleEditorField","switchPersonalScheduleEditorDay","PersonalScheduleManagerField","PersonalScheduleManagerBodyElement","ListElement","generateElementOfItem","item","_initializePersonalScheduleManagerField","_step","_iterator","_createForOfIteratorHelper","listPersonalSchedules","s","n","done","thisElement","f","openPersonalScheduleManager","initializePersonalScheduleManagerField","closePersonalScheduleManager","revokePageHistory","PersonalScheduleCreatorField","PersonalScheduleCreatorBodyElement","PersonalScheduleCreatorGroups","createFormulatedPersonalSchedule","createPersonalSchedule","closePersonalScheduleCreator","openPersonalScheduleCreator","switchPersonalScheduleCreatorDay","message","icon","allPromptElements","documentQuerySelectorAll","promptID","promptElement","promptIconElement","promptMessageElement","body","promptElementInstance","getElementById","addEventListener","once"],"sourceRoot":""}