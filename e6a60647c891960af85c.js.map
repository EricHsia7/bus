{"version":3,"file":"e6a60647c891960af85c.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,MAAO,GAAIH,GACQ,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,GACf,CATD,CASGK,MAAM,I,+hCCDT,IAAMC,EAAyB,GAC3BC,GAAwB,EAE5B,GAAI,cAAeF,KACjBA,KAAKG,UAAY,SAAUC,GACzB,IAAMC,EAAOD,EAAEE,MAAM,GAErBD,EAAKE,UAAY,SAAUC,GACzB,IAAAC,EAAAC,EAA6BF,EAAMG,KAAI,GAAhCC,EAAUH,EAAA,GAAEI,EAAMJ,EAAA,GACzBR,EAAUa,KAAK,CAAEF,WAAAA,EAAYC,OAAAA,EAAQR,KAAAA,IACrCU,GACF,CACF,MACK,CACL,IAAMV,EAAOL,KAEbA,KAAKO,UAAY,SAAUC,GACzB,IAAAQ,EAAAN,EAA6BF,EAAMG,KAAI,GAAhCC,EAAUI,EAAA,GAAEH,EAAMG,EAAA,GACzBf,EAAUa,KAAK,CAAEF,WAAAA,EAAYC,OAAAA,EAAQR,KAAAA,IACrCU,GACF,CACF,CAEA,SAASA,IACP,IAAIb,GAAqC,IAArBD,EAAUgB,OAA9B,CAEAf,GAAe,EACf,IAAAgB,EAA2CjB,EAAUkB,QAA7CP,EAAUM,EAAVN,WAAYC,EAAMK,EAANL,OAAQR,EAAIa,EAAJb,KAE5B,GAA0B,IAAtBO,EAAWK,OACbZ,EAAKe,YAAY,CAAC,GAAKP,QAClB,CAEL,IAAIQ,EAG8BC,EAF9BC,EAA2B,EAC3BC,EAAsB,EAAEC,E,goBAAAC,CACJd,GAAU,IAAlC,IAAAa,EAAAE,MAAAL,EAAAG,EAAAG,KAAAC,MAAoC,KAAzBC,EAASR,EAAAS,MAClB,GAA2C,iBAAhCD,EAAUE,MAAMC,YAA3B,CAGA,IAAMC,EAAsBC,KAAKC,IAAIN,EAAUE,MAAMC,aACjDC,IAAwB,KAC1BX,GAAoBW,EAAsBJ,EAAUE,MAAMf,OAC1DO,GAAeM,EAAUE,MAAMf,OAJjC,CAMF,CAAC,OAAAoB,GAAAZ,EAAArB,EAAAiC,EAAA,SAAAZ,EAAAa,GAAA,CACDjB,EAAkBE,EAAmBC,EAErC,IAAMe,EAASC,MAAMnB,GAAmB,GAAMA,EAG9ChB,EAAKe,YAAY,CAACmB,EAAQ1B,GAC5B,CACAX,GAAe,EACfa,GA9BkD,CA+BpD,C","sources":["webpack://bus/webpack/universalModuleDefinition","webpack://bus/./src/data/analytics/update-rate/getUpdateRate-worker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bus\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bus\"] = factory();\n\telse\n\t\troot[\"bus\"] = factory();\n})(self, () => {\nreturn ","import { UpdateRateDataGroupArray } from './index';\n\ninterface task {\n  dataGroups: UpdateRateDataGroupArray;\n  taskID: string;\n  port: any;\n}\n\nconst taskQueue: Array<task> = [];\nlet isProcessing: boolean = false;\n\nif ('onconnect' in self) {\n  self.onconnect = function (e) {\n    const port = e.ports[0];\n\n    port.onmessage = function (event) {\n      const [dataGroups, taskID] = event.data;\n      taskQueue.push({ dataGroups, taskID, port });\n      processWorkerTask();\n    };\n  };\n} else {\n  const port = self;\n\n  self.onmessage = function (event) {\n    const [dataGroups, taskID] = event.data;\n    taskQueue.push({ dataGroups, taskID, port });\n    processWorkerTask();\n  };\n}\n\nfunction processWorkerTask(): void {\n  if (isProcessing || taskQueue.length === 0) return;\n\n  isProcessing = true;\n  const { dataGroups, taskID, port }: task = taskQueue.shift();\n\n  if (dataGroups.length === 0) {\n    port.postMessage([0.8, taskID]);\n  } else {\n    // Perform the calculation\n    let weightedAverage: number = 0;\n    let totalCorrelation: number = 0;\n    let totalWeight: number = 0;\n    for (const dataGroup of dataGroups) {\n      if (typeof dataGroup.stats.correlation !== 'number') {\n        continue;\n      }\n      const absoluteCorrelation = Math.abs(dataGroup.stats.correlation);\n      if (absoluteCorrelation <= -0.5) {\n        totalCorrelation += absoluteCorrelation * dataGroup.stats.length;\n        totalWeight += dataGroup.stats.length;\n      }\n    }\n    weightedAverage = totalCorrelation / totalWeight;\n\n    const result = isNaN(weightedAverage) ? 0.8 : weightedAverage;\n\n    // Send the result back to the main thread\n    port.postMessage([result, taskID]);\n  }\n  isProcessing = false;\n  processWorkerTask(); // Process next task in queue, if any\n}\n"],"names":["root","factory","exports","module","define","amd","self","taskQueue","isProcessing","onconnect","e","port","ports","onmessage","event","_event$data","_slicedToArray","data","dataGroups","taskID","push","processWorkerTask","_event$data2","length","_taskQueue$shift","shift","postMessage","weightedAverage","_step","totalCorrelation","totalWeight","_iterator","_createForOfIteratorHelper","s","n","done","dataGroup","value","stats","correlation","absoluteCorrelation","Math","abs","err","f","result","isNaN"],"sourceRoot":""}