{"version":3,"file":"b569e5b960dd755b0af3.js","mappings":"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","sources":["webpack://bus/./src/tools/cardinal-direction.ts","webpack://bus/./src/tools/array.ts","webpack://bus/./src/tools/labels.ts","webpack://bus/./src/tools/address.ts","webpack://bus/./src/tools/math.ts","webpack://bus/./src/tools/convert.ts","webpack://bus/./src/tools/graphic.ts","webpack://bus/./src/tools/index.ts"],"sourcesContent":["import { MaterialSymbols } from '../interface/icons/material-symbols-type';\nimport { normalizeVector } from './math';\n\nexport type CardinalDirectionVector = [number, number];\n\nexport interface CardinalDirection {\n  vector: CardinalDirectionVector;\n  id: number;\n  name: string;\n  symbol: string;\n  icon: MaterialSymbols;\n}\n\nexport const UnknownCardinalDirection: CardinalDirection = {\n  vector: [0, 0],\n  id: -1,\n  name: '未知',\n  symbol: '?',\n  icon: 'explore'\n};\n\n// cardinal directions\nexport const NorthCardinalDirection: CardinalDirection = {\n  vector: [0, 1], // 90 degress\n  id: 0,\n  name: '北',\n  symbol: '↑',\n  icon: 'north'\n};\n\nexport const WestCardinalDirection: CardinalDirection = {\n  vector: [1, 0], // 0 degres\n  id: 1,\n  name: '東',\n  symbol: '→',\n  icon: 'east'\n};\n\nexport const SouthCardinalDirection: CardinalDirection = {\n  vector: [0, -1], // 270 degress\n  id: 2,\n  name: '南',\n  symbol: '↓',\n  icon: 'south'\n};\n\nexport const EastCardinalDirection: CardinalDirection = {\n  vector: [-1, 0], // 180 degress\n  id: 3,\n  name: '西',\n  symbol: '←',\n  icon: 'west'\n};\n\n// intercardinal directions\nconst NorthEastCardinalDirection: CardinalDirection = {\n  vector: [Math.SQRT1_2, Math.SQRT1_2], // 45 degrees\n  id: 4,\n  name: '東北',\n  symbol: '↗',\n  icon: 'north_east'\n};\n\nconst SouthEastCardinalDirection: CardinalDirection = {\n  vector: [Math.SQRT1_2, -Math.SQRT1_2], // 135 degrees\n  id: 5,\n  name: '東南',\n  symbol: '↘',\n  icon: 'south_east'\n};\n\nexport const SouthWestCardinalDirection: CardinalDirection = {\n  vector: [-Math.SQRT1_2, -Math.SQRT1_2], // 225 degrees\n  id: 6,\n  name: '西南',\n  symbol: '↙',\n  icon: 'south_west'\n};\n\nexport const NorthWestCardinalDirection: CardinalDirection = {\n  vector: [-Math.SQRT1_2, Math.SQRT1_2], // 315 degrees\n  id: 7,\n  name: '西北',\n  symbol: '↖',\n  icon: 'north_west'\n};\n\nexport function getCardinalDirectionFromVector(vector: [number, number]): CardinalDirection {\n  const directions: Array<CardinalDirection> = [UnknownCardinalDirection, NorthCardinalDirection, EastCardinalDirection, SouthCardinalDirection, WestCardinalDirection, NorthEastCardinalDirection, SouthEastCardinalDirection, SouthWestCardinalDirection, NorthWestCardinalDirection];\n  const unitVector = normalizeVector(vector);\n  let maxDotProduct = -Infinity;\n  let bestMatch: CardinalDirection = directions[0];\n  for (const direction of directions) {\n    const dotProduct = direction.vector[0] * unitVector[0] + direction.vector[1] * unitVector[1];\n    if (dotProduct > maxDotProduct) {\n      maxDotProduct = dotProduct;\n      bestMatch = direction;\n    }\n  }\n  return bestMatch;\n}\n","// Function to split data based on delta\n\n/**\n * Splits data into groups based on delta between consecutive elements.\n *\n * @param {Array<[number, number]>} data - Array of tuples where each tuple contains two numbers.\n * @returns {Array<Array<[number, number]>>} - Array of groups, each containing arrays of tuples.\n */\n\nexport function splitDataByDelta(data: Array<[number, number]>): Array<Array<[number, number]>> {\n  const result: Array<Array<[number, number]>> = [];\n  let currentGroup: Array<[number, number]> = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (i === 0 || data[i][0] - data[i - 1][0] > 0) {\n      if (currentGroup.length > 0) {\n        result.push(currentGroup);\n      }\n      currentGroup = [data[i]];\n    } else {\n      currentGroup.push(data[i]);\n    }\n  }\n\n  if (currentGroup.length > 0) {\n    result.push(currentGroup);\n  }\n\n  return result;\n}\n\nexport function areItemsDifferent(arr: Array): boolean {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        return false; // Found a duplicate\n      }\n    }\n  }\n  return true; // No duplicates found\n}\n\n/**\n * Get common items from the two arrays\n * @param arrayA - The first array\n * @param arrayB - The second array\n * @returns An array of the common items\n */\n\nexport function getIntersection(arrayA: Array, arrayB: Array): Array {\n  let result = [];\n  if (arrayA.length <= arrayB.length) {\n    for (const item of arrayA) {\n      if (arrayB.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  } else {\n    for (const item of arrayB) {\n      if (arrayA.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  }\n  return result;\n}\n","import { CardinalDirection } from './cardinal-direction';\nimport { convertNumberToLetters } from './convert';\n\nexport function generateLetterLabels(quantity: number): Array<string> {\n  let result: Array<string> = [];\n  for (let i = 0; i < quantity; i++) {\n    result.push(`地點${convertNumberToLetters(i + 1)}`);\n  }\n  return result;\n}\n\nexport function generateDirectionLabels(cardinalDirections: Array<CardinalDirection>): Array<string> {\n  const result: Array<string> = [];\n  for (const cardinalDirection of cardinalDirections) {\n    result.push(`向${cardinalDirection.name}${cardinalDirection.symbol}`);\n  }\n  return result;\n}\n","import { areItemsDifferent } from './array';\nimport { generateLetterLabels } from './labels';\n\ninterface AddressPart {\n  suffixes?: string;\n  key: keyof ParsedAddress;\n  process: (e: Array<string> | null) => Array<string> | Array<number> | null;\n  type: number;\n}\n\nexport interface ParsedAddress {\n  city: Array<string>;\n  district: Array<string>;\n  area: Array<string>;\n  road: Array<string>;\n  road_section: Array<number>;\n  alley: Array<number>;\n  alley_branch: Array<number>;\n  doorplate: Array<number>;\n  floornumber: Array<string>;\n  exit: Array<string>;\n  direction: Array<string>;\n  [key: string]: Array<string> | Array<number> | null;\n}\n\ninterface FeatureCounts {\n  [key: string]: { count: number; chars: string; index: number };\n}\n\nexport function mergeAddressesIntoOne(addresses: Array<string>): ParsedAddress | string {\n  const parts: Array<AddressPart> = [\n    {\n      suffixes: '市',\n      key: 'city',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '區',\n      key: 'district',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '鄉鎮村里',\n      key: 'area',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '路街道',\n      key: 'road',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.replaceAll(/[\\(\\)\\（\\）]/gim, '').trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '段',\n      key: 'road_section',\n      process: function (e) {\n        var toNumber = function (char) {\n          switch (char) {\n            case '一':\n              return 1;\n              break;\n            case '二':\n              return 2;\n              break;\n            case '三':\n              return 3;\n              break;\n            case '四':\n              return 4;\n              break;\n            case '五':\n              return 5;\n              break;\n            case '六':\n              return 6;\n              break;\n            case '七':\n              return 7;\n              break;\n            case '八':\n              return 8;\n              break;\n            case '九':\n              return 9;\n              break;\n            case '十':\n              return 10;\n              break;\n          }\n          if (!isNaN(parseInt(char))) {\n            return parseInt(char);\n          }\n          return 0;\n        };\n        var len = String(e).length;\n        var numbers = [];\n        for (let i = 0; i < len; i++) {\n          var p = toNumber(String(e).charAt(i));\n          if (p === 10) {\n            if (numbers.length > 0) {\n              numbers = [numbers.reduce((a, b) => a + b, 0) * 10];\n            }\n          } else {\n            numbers = [numbers.reduce((a, b) => a + b, 0) + p];\n          }\n        }\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '巷',\n      key: 'alley',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[巷]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '弄',\n      key: 'alley_branch',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[弄]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '號',\n      key: 'doorplate',\n      process: function (e) {\n        var numbers = String(e).match(/[0-9]+/gim);\n        numbers =\n          numbers?.map((n) => {\n            if (n === null) {\n              return null;\n            } else {\n              return parseInt(n);\n            }\n          }) || null;\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '樓',\n      key: 'floornumber',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      key: 'exit',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 2\n    },\n    {\n      key: 'direction',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim().replace(/[往向]/gim, '');\n          });\n        }\n      },\n      type: 1\n    }\n  ];\n\n  function parseAddress(address: string): object {\n    function regex(suffixes, type) {\n      if (type === 0) {\n        return new RegExp(`([^市區鄉鎮村里路段街道巷弄號樓與]+[${suffixes}])`, 'gmi');\n      }\n      if (type === 1) {\n        return new RegExp(`([往向]+[東南西北])`, 'gmi');\n      }\n      if (type === 2) {\n        return new RegExp(`([0-9]+[號]出口)`, 'gmi');\n      }\n    }\n    var result = {};\n    for (var part of parts) {\n      var r = regex(part?.suffixes, part.type);\n      result[part.key] = part.process(String(address).match(r));\n    }\n    return result;\n  }\n\n  function mergeAddresses(addresses: Array<string>): object {\n    var result = {};\n    for (var address of addresses) {\n      var parsedAddress = parseAddress(address);\n      for (var part of parts) {\n        if (!result.hasOwnProperty(part.key)) {\n          result[part.key] = [];\n        }\n        result[part.key] = result[part.key].concat(parsedAddress[part.key]);\n      }\n    }\n    for (var key in result) {\n      result[key] = Array.from(new Set(result[key]))\n        .filter((e) => (e ? true : false))\n        .sort(function (a, b) {\n          if (typeof a === 'number' && typeof b === 'number') {\n            return a - b;\n          } else {\n            return String(a).charCodeAt(0) - String(b).charCodeAt(0);\n          }\n        });\n    }\n    return result;\n  }\n  return mergeAddresses(addresses);\n}\n\nexport function addressToString(address: ParsedAddress): string {\n  return `${address.city.join('')}${address.district.join('')}${address.road.join('、')}${\n    address.road_section.sort(function (a, b) {\n      return a - b;\n    }).length > 0\n      ? address.road_section.join('、') + '段'\n      : ''\n  }${\n    address.alley.length > 0\n      ? address.alley\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '巷'\n      : ''\n  }${\n    address.alley_branch.length > 0\n      ? address.alley_branch\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '弄'\n      : ''\n  }${\n    address.doorplate.length > 0\n      ? address.doorplate\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '號'\n      : ''\n  }${address.floornumber.length > 0 ? address.floornumber.join('、') + '樓' : ''}${address.direction.length > 0 ? '（朝' + address.direction.join('、') + '）' : ''}`;\n}\n\nexport function extractCommonFeaturesFromAddresses(addresses: Array<string>): string {\n  // Create an object to store feature occurrences\n  const featureCounts: { [key: string]: { count: number; chars: string; index: number } } = {};\n\n  // Create a set to store unique simplified addresses\n  const simplifiedSet = new Set<string>();\n\n  // Iterate through each address\n  for (const address of addresses) {\n    // Extract common features by splitting the address\n    const features = String(address)\n      .split('')\n      .filter((feature) => feature.trim() !== '');\n\n    // Join the extracted features to create a simplified address\n    const simplifiedAddress = features.join('');\n\n    // Add the simplified address to the set\n    simplifiedSet.add(simplifiedAddress);\n\n    // Count occurrences of each feature\n    let index = 0;\n    for (const feature of features) {\n      // Check if the feature is a digit\n      if (!isNaN(parseInt(feature))) {\n        // Create a key for the digit feature\n        const digitKey = `digit_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[digitKey] = {\n          count: (featureCounts[digitKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      } else {\n        // Create a key for non-digit features\n        const featureKey = `chars_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[featureKey] = {\n          count: (featureCounts[featureKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      }\n      index += 1;\n    }\n  }\n\n  // Set threshold and limit for filtering features\n  const threshold = addresses.length * 0.6;\n  const limit = addresses.length * 1;\n\n  // Convert the feature counts object to an array of [feature, count] pairs\n  const sortedFeatures = Object.entries(featureCounts)\n    .filter((pair) => threshold <= pair[1].count && pair[1].count <= limit)\n    .sort((a, b) => a[1].index - b[1].index);\n\n  // Extract the features from the sorted array\n  const commonFeatures = sortedFeatures.map((pair) => pair[1].chars);\n\n  return commonFeatures.join('');\n}\n\nexport function generateLabelFromAddresses(addresses: Array<ParsedAddress>): Array<string> {\n  const result = [];\n  const filledProperties = {};\n  for (const address of addresses) {\n    for (const key in address) {\n      if (!filledProperties.hasOwnProperty(key)) {\n        filledProperties[key] = 0;\n      }\n      if (address[key].length > 0) {\n        filledProperties[key] = filledProperties[key] + 1;\n      }\n    }\n  }\n  let commonProperties = Object.entries(filledProperties)\n    .map((property) => {\n      return { key: property[0], value: property[1] };\n    })\n    .filter((e) => {\n      return e.value === addresses.length ? true : false;\n    })\n    .sort(function (a, b) {\n      return a.value - b.value;\n    });\n  if (commonProperties.length > 0) {\n    for (const commonProperty of commonProperties) {\n      let components = [];\n      let len = -Infinity;\n      for (const address of addresses) {\n        const component = address[commonProperty.key].join('');\n        components.push(component);\n        const componentLen = component.length;\n        if (componentLen > len) {\n          len = componentLen;\n        }\n      }\n      if (areItemsDifferent(components)) {\n        result.push({ components: components, len: len });\n      }\n    }\n  }\n\n  if (result.length > 0) {\n    result.sort(function (a, b) {\n      return a.len - b.len;\n    });\n    return result[0].components;\n  } else {\n    const addressesLength = addresses.length;\n    return generateLetterLabels(addressesLength);\n  }\n}\n","export function calculateStandardDeviation(arr: Array<number>): number {\n  // Step 1: Calculate the mean\n  const mean = arr.reduce((acc, val) => acc + val, 0) / arr.length;\n  // Step 2: Calculate the squared difference between each element and the mean\n  const squaredDifferences = arr.map((val) => Math.pow(val - mean, 2));\n  // Step 3: Find the mean of those squared differences\n  const meanOfSquaredDifferences = squaredDifferences.reduce((acc, val) => acc + val, 0) / arr.length;\n  // Step 4: Take the square root of that mean\n  const standardDeviation = Math.sqrt(meanOfSquaredDifferences);\n  return standardDeviation;\n}\n\nexport function standardizeArray(array: Array<number>): Array<number> {\n  // Calculate the mean of the array\n  const mean = array.reduce((acc, val) => acc + val, 0) / array.length;\n\n  // Calculate the standard deviation\n  const stdDev = calculateStandardDeviation(array);\n\n  // Standardize the array\n  return array.map((val) => (val - mean) / stdDev);\n}\n\n// Function to calculate Pearson correlation coefficient\nexport function pearsonCorrelation(x: Array<number>, y: Array<number>): number {\n  const n = x.length;\n  if (n !== y.length) {\n    throw new Error('Arrays must have the same length');\n  }\n\n  let sumX = 0,\n    sumY = 0,\n    sumXY = 0,\n    sumXSquared = 0,\n    sumYSquared = 0;\n\n  for (let i = 0; i < n; i++) {\n    sumX += x[i];\n    sumY += y[i];\n    sumXY += x[i] * y[i];\n    sumXSquared += x[i] ** 2;\n    sumYSquared += y[i] ** 2;\n  }\n\n  const numerator = n * sumXY - sumX * sumY;\n  const denominator = Math.sqrt((n * sumXSquared - sumX ** 2) * (n * sumYSquared - sumY ** 2));\n\n  if (denominator === 0) {\n    return 0; // Correlation is undefined in this case\n  }\n\n  return numerator / denominator;\n}\n\nexport function mergeStandardDeviation(targetAverage: number, targetSTDEV: number, targetDataLength: number, sourceAverage: number, sourceSTDEV: number, sourceDataLength: number): number {\n  const mergedDataLength = targetDataLength + sourceDataLength;\n\n  const mergedAverage = (targetDataLength * targetAverage + sourceDataLength * sourceAverage) / mergedDataLength;\n\n  const mergedVariance = (targetDataLength * (Math.pow(targetSTDEV, 2) + Math.pow(targetAverage, 2)) + sourceDataLength * (Math.pow(sourceSTDEV, 2) + Math.pow(sourceAverage, 2))) / mergedDataLength - Math.pow(mergedAverage, 2);\n\n  const mergedSTDEV = Math.sqrt(mergedVariance);\n  return mergedSTDEV;\n}\n\nexport function mergePearsonCorrelation(targetXAverage: number, targetYAverage: number, targetXSTDEV: number, targetYSTDEV: number, targetDataLength: number, targetCorrelation: number, sourceXAverage: number, sourceYAverage: number, sourceXSTDEV: number, sourceYSTDEV: number, sourceDataLength: number, sourceCorrelation: number): number {\n  const mergedDataLength = targetDataLength + sourceDataLength;\n\n  const mergedXAverage = (targetDataLength * targetXAverage + sourceDataLength * sourceXAverage) / mergedDataLength;\n  const mergedYAverage = (targetDataLength * targetYAverage + sourceDataLength * sourceYAverage) / mergedDataLength;\n\n  const mergedXSTDEV = mergeStandardDeviation(targetXAverage, targetXSTDEV, targetDataLength, sourceXAverage, sourceXSTDEV, sourceDataLength);\n  const mergedYSTDEV = mergeStandardDeviation(targetYAverage, targetYSTDEV, targetDataLength, sourceYAverage, sourceYSTDEV, sourceDataLength);\n\n  const mergedCorrelation = (targetDataLength * (targetXSTDEV * targetYSTDEV * targetCorrelation + targetXAverage * targetYAverage) + sourceDataLength * (sourceXSTDEV * sourceYSTDEV * sourceCorrelation + sourceXAverage * sourceYAverage) - mergedDataLength * mergedXAverage * mergedYAverage) / (mergedDataLength * mergedXSTDEV * mergedYSTDEV);\n  return mergedCorrelation;\n}\n\n/**\n * get the unit vecotr towards the same direction\n * @param vector [a1, a2, a3, ...]\n * @returns [b1, b2, b3, ...]\n */\n\nexport function normalizeVector(vector: Array<number>): Array<number> {\n  const length = Math.hypot(vector);\n  const componentQuantity = vector.length;\n  const newVector = new Float32Array(componentQuantity);\n  if (length > 0) {\n    const scale = 1 / length;\n    for (let i = componentQuantity; i > 0; i--) {\n      newVector[i] = vector[i] * scale;\n    }\n    return Array.from(newVector);\n  } else {\n    return vector;\n  }\n}\n\nexport function smoothArray(array: Array<number>): Array<number> {\n  const arrayLength = array.length;\n  const result = [];\n  for (let i = 1; i < arrayLength; i += 3) {\n    const currentItem = array[i];\n    const previousItem = array[i - 1] || currentItem;\n    const nextItem = array[i + 1] || currentItem;\n    result.push((previousItem + currentItem + nextItem) / 3);\n  }\n  return result;\n}\n\nexport function softmaxArray(array: Array<number>): Array<number> {\n  const arrayLength = array.length;\n\n  // Return an empty array if the input is empty\n  if (arrayLength === 0) {\n    return [];\n  }\n\n  // Find the global maximum\n  let max = -Infinity;\n  for (let i = arrayLength - 1; i >= 0; i--) {\n    const item = array[i];\n    if (item > max) {\n      max = item;\n    }\n  }\n\n  // Exponentiate each element (for numerical stability, subtract the max value)\n  // Sum all the exponentiated values\n  const expArray = new Float32Array(arrayLength);\n  let sumExp = 0;\n  for (let j = arrayLength - 1; j >= 0; j--) {\n    const exp = Math.exp(array[j] - max);\n    expArray[j] = exp;\n    sumExp += exp;\n  }\n\n  // Normalize each value\n  const normalizedArray = new Float32Array(arrayLength);\n  for (let k = arrayLength - 1; k >= 0; k--) {\n    const normalizedValue = expArray[k] / sumExp;\n    normalizedArray[k] = normalizedValue;\n  }\n  return Array.from(normalizedArray);\n}\n\nexport function sigmoidArray(array: Array<number>): Array<number> {\n  const arrayLength = array.length;\n  const normalizedArray = new Float32Array(arrayLength);\n  for (let i = arrayLength - 1; i >= 0; i--) {\n    normalizedArray[i] = 1 / (1 + Math.exp(-1 * array[i]));\n  }\n  return Array.from(normalizedArray);\n}\n\nexport function calculateAverage(array: Array<number>): number {\n  if (array.length === 0) {\n    return 0;\n  } else {\n    const sum = array.reduce((acc, curr) => acc + curr, 0);\n    return sum / array.length;\n  }\n}\n\nexport function findExtremum(array: Array<number>): [minimum: number, maximum: number] {\n  const arrayLength = array.length;\n  if (arrayLength === 0) {\n    return [0, 0];\n  }\n\n  let min = Infinity;\n  let max = -Infinity;\n\n  for (let i = arrayLength - 1; i >= 0; i--) {\n    const item = array[i];\n    if (item > max) {\n      max = item;\n    }\n    if (item < min) {\n      min = item;\n    }\n  }\n  return [min, max];\n}\n","export function convertPositionsToDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6378.137;\n  const dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\n  const dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c;\n  return d * 1000; // measured in meters\n}\n\nexport function convertBytes(contentLength: number): string {\n  const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let i = 0;\n\n  while (contentLength >= 1024 && i < units.length - 1) {\n    contentLength /= 1024;\n    i++;\n  }\n\n  return `${contentLength.toFixed(2)} ${units[i]}`;\n}\n\nexport function convertNumberToLetters(number: number): string {\n  let result = '';\n  while (number > 0) {\n    let remainder = (number - 1) % 26; // Adjust for 1-based indexing\n    let letter = String.fromCharCode(remainder + 65); // A=65 in ASCII\n    result = letter + result;\n    number = Math.floor((number - 1) / 26); // Update number for next iteration\n  }\n  return result;\n}\n","export function getTextWidth(text: string, weight: number, size: string, fontFamily: string): number {\n  const canvas: HTMLCanvasElement = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  const font: string = `${weight} ${size} ${fontFamily}`;\n  context.font = font;\n  return context.measureText(text).width;\n}\n\nexport function getTextHeight(text: string, weight: number, size: string, fontFamily: string): number {\n  const canvas: HTMLCanvasElement = getTextHeight.canvas || (getTextHeight.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  const font: string = `${weight} ${size} ${fontFamily}`;\n  context.font = font;\n  context.textBaseline = 'top';\n  return context.measureText(text).actualBoundingBoxDescent;\n}\n\ninterface CornerRadius {\n  tl: number;\n  tr: number;\n  br: number;\n  bl: number;\n}\n\nexport function drawRoundedRect(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number | CornerRadius, fill: string): void {\n  // If radius is a single value, treat it as the same for all corners\n  if (typeof radius === 'number') {\n    radius = { tl: radius, tr: radius, br: radius, bl: radius };\n  } else {\n    // Set defaults if individual radii are not provided\n    radius = {\n      tl: radius.tl || 0,\n      tr: radius.tr || 0,\n      br: radius.br || 0,\n      bl: radius.bl || 0\n    };\n  }\n\n  // Start path\n  ctx.beginPath();\n  // Move to the top-left corner, accounting for the top-left radius\n  ctx.moveTo(x + radius.tl, y);\n  // Draw the top line, rounding the top-right corner\n  ctx.lineTo(x + width - radius.tr, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n  // Draw the right side, rounding the bottom-right corner\n  ctx.lineTo(x + width, y + height - radius.br);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n  // Draw the bottom side, rounding the bottom-left corner\n  ctx.lineTo(x + radius.bl, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n  // Draw the left side, rounding the top-left corner\n  ctx.lineTo(x, y + radius.tl);\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n  // Complete the path\n  ctx.closePath();\n\n  ctx.fillStyle = fill;\n  ctx.fill(); // To fill the shape\n}\n\nexport function generateRoundedRectPath(x: number, y: number, width: number, height: number, radius: number | CornerRadius, inverted: boolean): Array<string> {\n  // Normalize the radius object\n  if (typeof radius === 'number') {\n    radius = { tl: radius, tr: radius, br: radius, bl: radius };\n  } else {\n    radius = {\n      tl: radius.tl || 0,\n      tr: radius.tr || 0,\n      br: radius.br || 0,\n      bl: radius.bl || 0\n    };\n  }\n  const { tl, tr, br, bl } = radius;\n  const command = [];\n  if (inverted) {\n    if (tl !== 0) {\n      command.push(`M${x} ${y + tl}`, `Q${x} ${y} ${x + tl} ${y}`, `H${x}`, `V${y + tl}`);\n    }\n    if (tr !== 0) {\n      command.push(`M${x + width - tr} ${y}`, `Q${x + width} ${y} ${x + width} ${y + tr}`, `V${y}`, `H${x + width - tr}`);\n    }\n    if (br !== 0) {\n      command.push(`M${x + width} ${y + height - br}`, `Q${x + width} ${y + height} ${x + width - br} ${y + height}`, `H${x + width}`, `V${y + height - br}`);\n    }\n    if (bl !== 0) {\n      command.push(`M${x + bl} ${y + height}`, `Q${x} ${y + height} ${x} ${y + height - bl}`, `V${y + height}`, `H${x + bl}`);\n    }\n  } else {\n    command.push(`M${x + tl} ${y}`, `H${x + width - tr}`, `Q${x + width} ${y} ${x + width} ${y + tr}`, `V${y + height - br}`, `Q${x + width} ${y + height} ${x + width - br} ${y + height}`, `H${x + bl}`, `Q${x} ${y + height} ${x} ${y + height - bl}`, `V${y + tl}`, `Q${x} ${y} ${x + tl} ${y}`);\n  }\n  return command;\n}\n","export const md5 = require('md5');\nexport const sha256 = require('sha256');\n\nexport function compareThings(a: any, b: any): boolean {\n  function anyToString(any: any): string {\n    return JSON.stringify({ e: any });\n  }\n  const ax = anyToString(a);\n  const bx = anyToString(b);\n  const length: number = 32;\n  const axLength: number = ax.length;\n  const bxLength: number = bx.length;\n  if (axLength === bxLength) {\n    if (axLength > length || bxLength > length) {\n      const hash_a: string = md5(ax);\n      const hash_b: string = md5(bx);\n\n      let equal: boolean = true;\n      for (let i = 0; i < 8; i++) {\n        const a_i: string = hash_a.charAt(i);\n        const b_i: string = hash_b.charAt(i);\n        if (a_i === b_i) {\n          continue;\n        } else {\n          equal = false;\n          break;\n        }\n      }\n      return equal;\n    } else {\n      if (ax === bx) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  } else {\n    return false;\n  }\n}\n\nexport function generateIdentifier(): string {\n  const chars = [\n    [48, 10], // 0-9: 48 - 57\n    [97, 26], // a-z: 97 - 122\n    [65, 26] // A-Z: 65 - 90\n  ];\n\n  let randomNumber1 = Math.floor(Math.random() * 0x10000000);\n  let randomNumber2 = Math.floor(Math.random() * 0x10000000);\n\n  const result = new Uint8Array(17);\n  result[0] = 95;\n  for (let i = 16; i > 0; i--) {\n    const n = randomNumber2 % 3;\n    const range = chars[n];\n    const code = range[0] + (randomNumber1 % range[1]);\n    result[i] = code;\n    randomNumber1 >>>= 1;\n    randomNumber2 >>>= 1;\n  }\n\n  return String.fromCharCode.apply(null, result);\n}\n\nexport function getNoCacheParameter(interval: number): string {\n  const time = new Date().getTime();\n  const number = (time / interval) | 0;\n  const string = number.toString(16);\n  return string;\n}\n\nexport function releaseFile(content: string, type: string = 'application/json', fileName: string): void {\n  const blob = new Blob([content], { type: type });\n  const fileObj = new File([blob], fileName, { type: type });\n  if (navigator.canShare && navigator.canShare({ files: [fileObj] })) {\n    navigator\n      .share({\n        files: [fileObj]\n      })\n      .catch((error) => {});\n  } else {\n    const blobURL = URL.createObjectURL(blob);\n    const downloadLink = document.createElement('a');\n    downloadLink.href = blobURL;\n    downloadLink.download = fileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    downloadLink.remove();\n    setTimeout(() => {\n      URL.revokeObjectURL(blobURL);\n    }, 10 * 1000);\n  }\n}\n\nexport function isRunningStandalone(): boolean {\n  return window.matchMedia('(display-mode: standalone)').matches;\n}\n\nexport function supportTouch(): boolean {\n  if ('ontouchstart' in window || navigator.maxTouchPoints) {\n    // Touch events are supported\n    return true;\n  } else {\n    // Touch events are not supported\n    return false;\n  }\n}\n\nexport function booleanToString(x: boolean): 'true' | 'false' {\n  if (typeof x === 'boolean') {\n    if (x) {\n      return 'true';\n    } else {\n      return 'false';\n    }\n  }\n}\n\nexport function isValidURL(string: string): boolean {\n  try {\n    new URL(string);\n    return true; // If no error is thrown, it's a valid URL\n  } catch (_) {\n    return false; // Invalid URL\n  }\n}\n\nexport function nearestPowerOf2(x: number): number {\n  return 1 << (31 - Math.clz32(x));\n}\n"],"names":["UnknownCardinalDirection","vector","id","name","symbol","icon","NorthCardinalDirection","WestCardinalDirection","SouthCardinalDirection","EastCardinalDirection","NorthEastCardinalDirection","Math","SQRT1_2","SouthEastCardinalDirection","SouthWestCardinalDirection","NorthWestCardinalDirection","getCardinalDirectionFromVector","directions","unitVector","normalizeVector","maxDotProduct","Infinity","bestMatch","_i","_directions","length","direction","dotProduct","areItemsDifferent","arr","i","j","getIntersection","arrayA","arrayB","result","_step","_iterator","_createForOfIteratorHelper","s","n","done","item","value","indexOf","push","err","e","f","_step2","_iterator2","generateLetterLabels","quantity","convertNumberToLetters","generateDirectionLabels","cardinalDirections","cardinalDirection","addressToString","address","city","join","district","road","road_section","sort","a","b","alley","alley_branch","doorplate","floornumber","generateLabelFromAddresses","addresses","_step4","filledProperties","_iterator4","key","hasOwnProperty","commonProperties","Object","entries","map","property","filter","_step5","_iterator5","_step6","commonProperty","components","len","_iterator6","component","componentLen","addressesLength","mergeStandardDeviation","targetAverage","targetSTDEV","targetDataLength","sourceAverage","sourceSTDEV","sourceDataLength","mergedDataLength","mergedAverage","mergedVariance","pow","sqrt","mergePearsonCorrelation","targetXAverage","targetYAverage","targetXSTDEV","targetYSTDEV","targetCorrelation","sourceXAverage","sourceYAverage","sourceXSTDEV","sourceYSTDEV","sourceCorrelation","hypot","componentQuantity","newVector","Float32Array","scale","Array","from","findExtremum","array","arrayLength","min","max","convertPositionsToDistance","lat1","lon1","lat2","lon2","dLat","PI","dLon","sin","cos","atan2","convertBytes","contentLength","units","toFixed","number","remainder","String","fromCharCode","floor","getTextWidth","text","weight","size","fontFamily","context","canvas","document","createElement","getContext","font","measureText","width","drawRoundedRect","ctx","x","y","height","radius","fill","tl","tr","br","bl","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fillStyle","generateRoundedRectPath","inverted","_radius","command","md5","require","sha256","compareThings","anyToString","any","JSON","stringify","ax","bx","axLength","bxLength","hash_a","hash_b","equal","charAt","generateIdentifier","chars","randomNumber1","random","randomNumber2","Uint8Array","range","code","apply","getNoCacheParameter","interval","Date","getTime","toString","releaseFile","content","type","arguments","undefined","fileName","blob","Blob","fileObj","File","navigator","canShare","files","share","error","blobURL","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","remove","setTimeout","revokeObjectURL","isRunningStandalone","window","matchMedia","matches","supportTouch","maxTouchPoints","booleanToString","isValidURL","string","_"],"sourceRoot":""}