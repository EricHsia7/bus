{"version":3,"file":"3be2f611195674ae9cc6.min.js","mappings":"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","sources":["webpack://bus/./src/data/route/index.ts"],"sourcesContent":["import { getBusArrivalTimes } from '../analytics/bus-arrival-time';\nimport { getBusData } from '../apis/getBusData/index';\nimport { getBusEvent } from '../apis/getBusEvent/index';\nimport { getEstimateTime } from '../apis/getEstimateTime/index';\nimport { getLocation } from '../apis/getLocation/index';\nimport { getRoute } from '../apis/getRoute/index';\nimport { getSegmentBuffers, SimplifiedSegmentBufferItem } from '../apis/getSegmentBuffers/index';\nimport { getStop } from '../apis/getStop/index';\nimport { formatBus, parseEstimateTime, processBuses } from '../apis/index';\nimport { dataUpdateTime, deleteDataReceivingProgress, deleteDataUpdateTime, setDataReceivingProgress } from '../apis/loader';\nimport { getSettingOptionValue } from '../settings/index';\nimport { getNearestPosition } from '../user-position/index';\n\ninterface integratedStopItemPosition {\n  longitude: number;\n  latitude: number;\n}\n\ninterface integratedStopItemSegmentBuffer {\n  isSegmentBuffer: boolean;\n  isStartingPoint: boolean;\n  isEndingPoint: boolean;\n}\ninterface integratedStopItem {\n  name: string | null;\n  goBack: '0' | '1' | '2';\n  status: EstimateTimeStatus;\n  buses: Array<object>;\n  overlappingRoutes: Array<object>;\n  busArrivalTimes: Array<object>;\n  sequence: number;\n  position: integratedStopItemPosition;\n  nearest: boolean;\n  segmentBuffer: integratedStopItemSegmentBuffer;\n  progress: number;\n  id: number | null;\n}\n\ninterface IntegratedRoute {\n  groupedItems: { [key: string]: integratedStopItem };\n  groupQuantity: number;\n  itemQuantity: { [key: string]: number };\n  RouteName: string;\n  RouteEndPoints: {\n    RouteDeparture: string;\n    RouteDestination: string;\n  };\n  dataUpdateTime: any;\n  RouteID: number;\n  PathAttributeId: Array<number>;\n}\n\nexport async function integrateRoute(RouteID: number, PathAttributeId: Array<number>, requestID: string): Promise<IntegratedRoute> {\n  setDataReceivingProgress(requestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(requestID, 'getRoute_1', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_0', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_1', 0, false);\n  setDataReceivingProgress(requestID, 'getLocation_0', 0, false);\n  setDataReceivingProgress(requestID, 'getLocation_1', 0, false);\n  setDataReceivingProgress(requestID, 'getSegmentBuffers_0', 0, false);\n  setDataReceivingProgress(requestID, 'getSegmentBuffers_1', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_0', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_1', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_0', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_1', 0, false);\n  setDataReceivingProgress(requestID, 'getBusData_0', 0, false);\n  setDataReceivingProgress(requestID, 'getBusData_1', 0, false);\n  const Route = await getRoute(requestID, true);\n  const Stop = await getStop(requestID);\n  const Location = await getLocation(requestID, false);\n  const SegmentBuffers = await getSegmentBuffers(requestID);\n  const EstimateTime = await getEstimateTime(requestID);\n  const BusEvent = await getBusEvent(requestID);\n  const BusData = await getBusData(requestID);\n  const BusArrivalTimes = await getBusArrivalTimes();\n\n  const processedBuses = processBuses(BusEvent, BusData, Route, RouteID, PathAttributeId);\n\n  let hasSegmentBuffers: boolean = false;\n  let thisSegmentBuffers: SimplifiedSegmentBufferItem = {};\n  if (SegmentBuffers.hasOwnProperty(`r_${RouteID}`)) {\n    hasSegmentBuffers = true;\n    thisSegmentBuffers = SegmentBuffers[`r_${RouteID}`];\n  }\n\n  const time_formatting_mode = getSettingOptionValue('time_formatting_mode');\n\n  let result = [];\n  let positions = [];\n\n  for (const item of EstimateTime) {\n    let integratedStopItem: integratedStopItem = {};\n\n    const thisRouteID = item.RouteID;\n\n    // check whether this stop is on this route or not\n    if ([RouteID, RouteID * 10].includes(thisRouteID) || PathAttributeId.includes(thisRouteID)) {\n      // format status\n      integratedStopItem.status = parseEstimateTime(item?.EstimateTime, time_formatting_mode);\n\n      // collect data from 'Stop'\n      const thisStopKey = `s_${item.StopID}`;\n      let thisStop: SimplifiedStopItem = {};\n      if (Stop.hasOwnProperty(thisStopKey)) {\n        thisStop = Stop[thisStopKey];\n      } else {\n        continue;\n      }\n      integratedStopItem.id = item.StopID;\n      integratedStopItem.sequence = thisStop.seqNo;\n      integratedStopItem.goBack = thisStop.goBack;\n\n      // collect data from 'Location'\n      const thisLocationKey = `l_${thisStop.stopLocationId}`;\n      let thisLocation: SimplifiedLocationItem = {};\n      if (Location.hasOwnProperty(thisLocationKey)) {\n        thisLocation = Location[thisLocationKey];\n      } else {\n        continue;\n      }\n      integratedStopItem.name = thisLocation.n;\n      integratedStopItem.overlappingRoutes = thisLocation.r\n        .filter((id: number) => id !== RouteID)\n        .map((id: number) => {\n          const overlappingRouteKey = `r_${id}`;\n          if (Route.hasOwnProperty(overlappingRouteKey)) {\n            const overlappingRoute: SimplifiedRouteItem = Route[overlappingRouteKey];\n            const formattedOverlappingRoute = {\n              name: overlappingRoute.n,\n              RouteEndPoints: {\n                RouteDeparture: overlappingRoute.dep,\n                RouteDestination: overlappingRoute.des,\n                text: `${overlappingRoute.dep} \\u2194 ${overlappingRoute.des}`, //u2194 -> '↔'\n                html: `<span>${overlappingRoute.dep}</span><span>\\u2194</span><span>${overlappingRoute.des}</span>`\n              },\n              RouteID: overlappingRoute.id,\n              PathAttributeId: overlappingRoute.pid\n            };\n            return formattedOverlappingRoute;\n          } else {\n            return null;\n          }\n        })\n        .filter((e) => {\n          return !(e === null);\n        });\n      integratedStopItem.position = {\n        longitude: thisLocation.lo,\n        latitude: thisLocation.la\n      };\n      positions.push({\n        latitude: thisLocation.la,\n        longitude: thisLocation.lo,\n        id: item.StopID\n      });\n\n      // collect data from 'processedBuses'\n      let buses: Array<FormattedBus> = [];\n      for (var overlappingStopID of thisLocation.s) {\n        const overlappingStopKey = `s_${overlappingStopID}`;\n        if (processedBuses.hasOwnProperty(overlappingStopKey)) {\n          buses.push(processedBuses[overlappingStopKey].map((e) => formatBus(e)));\n        }\n      }\n      integratedStopItem.buses = buses.flat().sort(function (a, b) {\n        return a.index - b.index;\n      });\n\n      // collect data from 'BusArrivalTimes'\n      let thisBusArrivalTimes = {};\n      if (BusArrivalTimes.hasOwnProperty(thisStopKey)) {\n        thisBusArrivalTimes = BusArrivalTimes[thisStopKey];\n      }\n      let flattenBusArrivalTimes = [];\n      for (const personalScheduleID in thisBusArrivalTimes) {\n        flattenBusArrivalTimes = flattenBusArrivalTimes.concat(thisBusArrivalTimes[personalScheduleID].busArrivalTimes);\n      }\n      integratedStopItem.busArrivalTimes = flattenBusArrivalTimes;\n\n      // check whether this stop is segment buffer\n      let isSegmentBuffer: boolean = false;\n      let isStartingPoint: boolean = false;\n      let isEndingPoint: boolean = false;\n      let useReversed: boolean = false;\n      if (hasSegmentBuffers) {\n        const groupKey = `g_${integratedStopItem.goBack}`;\n        let segmentBufferGroup = [];\n\n        if (thisSegmentBuffers.hasOwnProperty(groupKey)) {\n          segmentBufferGroup = thisSegmentBuffers[groupKey];\n        } else {\n          if (integratedStopItem.goBack === '1') {\n            useReversed = true;\n            segmentBufferGroup = thisSegmentBuffers['g_0'];\n          }\n        }\n\n        for (const thisBufferZone of segmentBufferGroup) {\n          if (thisBufferZone.OriginStopID === item.StopID || thisBufferZone.DestinationStopID === item.StopID) {\n            isSegmentBuffer = true;\n          }\n          if (useReversed) {\n            if (thisBufferZone.OriginStopID === item.StopID) {\n              isEndingPoint = true;\n            }\n            if (thisBufferZone.DestinationStopID === item.StopID) {\n              isStartingPoint = true;\n            }\n          } else {\n            if (thisBufferZone.OriginStopID === item.StopID) {\n              isStartingPoint = true;\n            }\n            if (thisBufferZone.DestinationStopID === item.StopID) {\n              isEndingPoint = true;\n            }\n          }\n        }\n      }\n      integratedStopItem.segmentBuffer = {\n        isSegmentBuffer,\n        isStartingPoint,\n        isEndingPoint\n      };\n\n      result.push(integratedStopItem);\n    }\n  }\n\n  result.sort(function (a, b) {\n    return a.sequence - b.sequence;\n  });\n\n  const nearestPosition = getNearestPosition(positions, 450);\n\n  let isBufferZoneOpened: boolean = false;\n  let isBufferZoneClosed: boolean = false;\n\n  let groupedItems: { [key: string]: Array<integratedStopItem> } = {};\n  let groupQuantity: number = 0;\n  let itemQuantity: { [key: string]: number } = {};\n\n  const resultLength = result.length;\n\n  for (let index = 0; index < resultLength; index++) {\n    let item = result[index];\n    const nextItem = result[index + 1] || item;\n    let progress = 0;\n\n    if (item.buses.length > 0) {\n      if (item.buses[0].onThisRoute) {\n        const [x, y] = [item.buses[0].position.longitude, item.buses[0].position.latitude];\n        const [x1, y1] = [item.position.longitude, item.position.latitude];\n        const [x2, y2] = [nextItem.position.longitude, nextItem.position.latitude];\n        const dotProduct = (x - x1) * (x2 - x) + (y - y1) * (y2 - y);\n        if (dotProduct >= 0) {\n          // ensure that (x, y) is between (x1, y1) and (x2, y2)\n          const distance1 = Math.hypot(x - x1, y - y1);\n          const distance2 = Math.hypot(x - x2, y - y2);\n          progress = Math.max(0, Math.min(distance1 / (distance1 + distance2), 1));\n        }\n      }\n    }\n    item.progress = progress;\n\n    if (item.segmentBuffer.isStartingPoint) {\n      isBufferZoneOpened = true;\n    }\n\n    if (item.segmentBuffer.isEndingPoint) {\n      if (isBufferZoneOpened) {\n        isBufferZoneClosed = true;\n      }\n    }\n\n    if (isBufferZoneOpened && !isBufferZoneClosed) {\n      item.segmentBuffer.isSegmentBuffer = true;\n    }\n\n    if (isBufferZoneOpened && isBufferZoneClosed) {\n      isBufferZoneOpened = false;\n      isBufferZoneClosed = false;\n    }\n\n    let isNearest = false;\n    if (!(nearestPosition === null)) {\n      if (nearestPosition.id === item.id) {\n        isNearest = true;\n      }\n    }\n    item.nearest = isNearest;\n\n    const groupKey = `g_${item.goBack}` || 'g_0';\n\n    if (!groupedItems.hasOwnProperty(groupKey)) {\n      groupedItems[groupKey] = [];\n      itemQuantity[groupKey] = 0;\n      groupQuantity += 1;\n    }\n\n    groupedItems[groupKey].push(item);\n    itemQuantity[groupKey] += 1;\n  }\n\n  const thisRoute = Route[`r_${RouteID}`];\n  const thisRouteName = thisRoute.n;\n  const thisRouteDeparture = thisRoute.dep;\n  const thisRouteDestination = thisRoute.des;\n\n  const result2: IntegratedRoute = {\n    groupedItems: groupedItems,\n    groupQuantity: groupQuantity,\n    itemQuantity: itemQuantity,\n    RouteName: thisRouteName,\n    RouteEndPoints: {\n      RouteDeparture: thisRouteDeparture,\n      RouteDestination: thisRouteDestination\n    },\n    dataUpdateTime: dataUpdateTime[requestID],\n    RouteID,\n    PathAttributeId\n  };\n\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  //await recordEstimateTimeForUpdateRate(EstimateTime);\n  return result2;\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_createForOfIteratorHelper","Array","isArray","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_n","F","asyncGeneratorStep","integrateRoute","_x","_x2","_x3","_integrateRoute","apply","arguments","_callee","RouteID","PathAttributeId","requestID","Route","Stop","Location","SegmentBuffers","EstimateTime","BusEvent","BusData","BusArrivalTimes","processedBuses","hasSegmentBuffers","thisSegmentBuffers","time_formatting_mode","result","positions","_iterator","_step","_item","_integratedStopItem","thisRouteID","thisStopKey","thisStop","thisLocationKey","thisLocation","buses","_iterator2","_step2","overlappingStopID","overlappingStopKey","thisBusArrivalTimes","flattenBusArrivalTimes","personalScheduleID","isSegmentBuffer","isStartingPoint","isEndingPoint","useReversed","_groupKey","segmentBufferGroup","_iterator3","_step3","thisBufferZone","nearestPosition","isBufferZoneOpened","isBufferZoneClosed","groupedItems","groupQuantity","itemQuantity","resultLength","index","item","nextItem","progress","_ref","x","_ref2","x1","y1","_ref3","x2","y2","distance1","distance2","isNearest","groupKey","thisRoute","thisRouteName","thisRouteDeparture","thisRouteDestination","result2","_context","setDataReceivingProgress","getRoute","getStop","getLocation","getSegmentBuffers","getEstimateTime","getBusEvent","getBusData","getBusArrivalTimes","processBuses","concat","getSettingOptionValue","integratedStopItem","includes","status","parseEstimateTime","StopID","id","sequence","seqNo","goBack","stopLocationId","overlappingRoutes","filter","map","overlappingRouteKey","overlappingRoute","RouteEndPoints","RouteDeparture","dep","RouteDestination","des","text","html","pid","position","longitude","lo","latitude","la","formatBus","err","flat","sort","b","busArrivalTimes","OriginStopID","DestinationStopID","segmentBuffer","t0","getNearestPosition","onThisRoute","Math","hypot","max","min","nearest","RouteName","dataUpdateTime","deleteDataReceivingProgress","deleteDataUpdateTime","_next","_throw"],"sourceRoot":""}