{"version":3,"file":"216f998ca2f223f8d1a6.min.js","mappings":"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","sources":["webpack://bus/./src/data/analytics/bus-arrival-time.ts"],"sourcesContent":["import { aggregateNumbers, generateIdentifier } from '../../tools/index';\nimport { TimeObject, timeObjectToString } from '../../tools/time';\nimport { EstimateTime } from '../apis/getEstimateTime/index';\nimport { listFoldersWithContent } from '../folder/index';\nimport { isInPersonalSchedule, listPersonalSchedules } from '../personal-schedule/index';\nimport { lfGetItem, lfListItemKeys, lfSetItem } from '../storage/index';\n\nlet trackingBusArrivalTime_trackingID: string = '';\nlet trackingBusArrivalTime_tracking: boolean = false;\nlet trackingBusArrivalTime_trackedStops: Array = [];\nconst trackingBusArrivalTime_monitorTimes: number = 128;\n\ninterface EstimateTimeRecordForBusArrivalTime {\n  EstimateTime: number;\n  timeStamp: number;\n}\n\ninterface EstimateTimeRecordForBusArrivalTimeObject {\n  trackingID: string;\n  timeStamp: number;\n  data: { [key: string]: Array<EstimateTimeRecordForBusArrivalTime> };\n}\n\nexport async function recordEstimateTimeForBusArrivalTime(EstimateTime: EstimateTime): void {\n  let needToReset = false;\n  if (!trackingBusArrivalTime_tracking) {\n    trackingBusArrivalTime_tracking = true;\n    trackingBusArrivalTime_trackingID = generateIdentifier('b');\n    trackingBusArrivalTime_trackedStops = [];\n    const foldersWithContent = await listFoldersWithContent();\n    for (const folderWithContent1 of foldersWithContent) {\n      trackingBusArrivalTime_trackedStops = trackingBusArrivalTime_trackedStops.concat(\n        folderWithContent1.content\n          .filter((m) => {\n            return m.type === 'stop' ? true : false;\n          })\n          .map((e) => e.id)\n      );\n    }\n  }\n  const now = new Date();\n  if (isInPersonalSchedule(now)) {\n    const currentTimeStamp: number = now.getTime();\n\n    const existingRecord = await lfGetItem(4, trackingBusArrivalTime_trackingID);\n\n    let existingRecordObject = {};\n    if (!existingRecord) {\n      existingRecordObject = { trackingID: trackingBusArrivalTime_trackingID, timeStamp: currentTimeStamp, data: {} };\n    } else {\n      existingRecordObject = JSON.parse(existingRecord);\n    }\n\n    for (const item of EstimateTime) {\n      if (trackingBusArrivalTime_trackedStops.indexOf(item.StopID) > -1) {\n        if (!existingRecordObject.data.hasOwnProperty(`s_${item.StopID}`)) {\n          existingRecordObject.data[`s_${item.StopID}`] = [{ EstimateTime: parseInt(item.EstimateTime), timeStamp: currentTimeStamp }];\n        }\n        existingRecordObject.data[`s_${item.StopID}`].push({ EstimateTime: parseInt(item.EstimateTime), timeStamp: currentTimeStamp });\n\n        if (existingRecordObject.data[`s_${item.StopID}`].length > trackingBusArrivalTime_monitorTimes) {\n          needToReset = true;\n        }\n      }\n    }\n    await lfSetItem(4, trackingBusArrivalTime_trackingID, JSON.stringify(existingRecordObject));\n    if (needToReset) {\n      trackingBusArrivalTime_tracking = false;\n    }\n  }\n}\n\nexport async function discardExpiredEstimateTimeRecordsForBusArrivalTime(): void {\n  const keys = await listRecordedEstimateTimeForBusArrivalTime();\n  for (const key of keys) {\n    const json = await lfGetItem(4, key);\n    const object: object = JSON.parse(json);\n    if (new Date().getTime() - object.timeStamp > 60 * 60 * 24 * 30 * 1000) {\n      await lfRemoveItem(4, key);\n    }\n  }\n}\n\nexport async function getBusArrivalTimes(): Promise<object> {\n  // Merge data by stops\n  let recordsGroupedByStops = {};\n  const keys = await lfListItemKeys(4);\n  for (const key of keys) {\n    const existingRecord = await lfGetItem(4, key);\n    const existingRecordObject: EstimateTimeRecordForBusArrivalTimeObject = JSON.parse(existingRecord);\n    for (const stopKey1 in existingRecordObject.data) {\n      if (!recordsGroupedByStops.hasOwnProperty(stopKey1)) {\n        recordsGroupedByStops[stopKey1] = [];\n      }\n      recordsGroupedByStops[stopKey1] = recordsGroupedByStops[stopKey1].concat(existingRecordObject.data[stopKey1]);\n    }\n  }\n\n  // Extract Arrival Times\n  let busArrivalTimesGroupedByStops = {};\n  for (const stopKey2 in recordsGroupedByStops) {\n    let recordsOfThisStop = recordsGroupedByStops[stopKey2];\n    recordsOfThisStop.sort(function (a, b) {\n      return a.timeStamp - b.timeStamp;\n    });\n    const recordsOfThisStopLength = recordsOfThisStop.length;\n    let EstimateTimeInThisPeriod = [];\n    let busArrivalTimeInThisPeriod = [];\n    for (let i = 0; i < recordsOfThisStopLength; i++) {\n      const currentRecord = recordsOfThisStop[i];\n      const nextRecord = recordsOfThisStop[i + 1] || recordsOfThisStop[i];\n\n      const currentRecordEstimateTime = currentRecord.EstimateTime;\n      const nextRecordEstimateTime = nextRecord.EstimateTime;\n\n      const delta = nextRecordEstimateTime - currentRecordEstimateTime;\n      if (delta < 0 && currentRecordEstimateTime >= 0) {\n        // decreasing estimate time value\n        EstimateTimeInThisPeriod.push(currentRecord);\n      } else {\n        EstimateTimeInThisPeriod.sort(function (a, b) {\n          return a.EstimateTime - b.EstimateTime;\n        });\n        if (EstimateTimeInThisPeriod.length > 0) {\n          const closestRecord = EstimateTimeInThisPeriod[0];\n          busArrivalTimeInThisPeriod.push(new Date(closestRecord.timeStamp + closestRecord.EstimateTime * 1000));\n        }\n        EstimateTimeInThisPeriod = [];\n      }\n    }\n    busArrivalTimesGroupedByStops[stopKey2] = busArrivalTimeInThisPeriod;\n  }\n\n  // Group bus arrival times by stops and personal schedules\n  const personalSchedules = await listPersonalSchedules();\n  let result = {};\n  for (const personalSchedule of personalSchedules) {\n    const personalScheduleID = personalSchedule.id;\n    const personalScheduleName = personalSchedule.name;\n\n    // Iterate over each stop in busArrivalTimesGroupedByStops\n    for (const stopKey3 in busArrivalTimesGroupedByStops) {\n      // Initialize the structure for each stop in the result\n      if (!result.hasOwnProperty(stopKey3)) {\n        result[stopKey3] = {};\n      }\n\n      if (!result[stopKey3].hasOwnProperty(personalScheduleID)) {\n        result[stopKey3][personalScheduleID] = {\n          name: personalScheduleName,\n          id: personalScheduleID,\n          busArrivalTimes: []\n        };\n      }\n\n      let busArrivalTimes = [];\n      for (const busArrivalTime of busArrivalTimesGroupedByStops[stopKey3]) {\n        const busArrivalTimeDay = busArrivalTime.getDay();\n        const busArrivalTimeHours = busArrivalTime.getHours();\n        const busArrivalTimeMinutes = busArrivalTime.getMinutes();\n\n        // Check if the personal schedule covers this day\n        if (personalSchedule.days.indexOf(busArrivalTimeDay) > -1) {\n          const totalMinutes = busArrivalTimeHours * 60 + busArrivalTimeMinutes;\n          const scheduleTotalStartMinutes = personalSchedule.period.start.hours * 60 + personalSchedule.period.start.minutes;\n          const scheduleTotalEndMinutes = personalSchedule.period.end.hours * 60 + personalSchedule.period.end.minutes;\n\n          // Check if the bus time falls within the personal schedule's time period\n          if (totalMinutes >= scheduleTotalStartMinutes && totalMinutes <= scheduleTotalEndMinutes) {\n            // Add the bus arrival time to the result\n            busArrivalTimes.push(totalMinutes);\n          }\n        }\n      }\n\n      // Aggregate bus arrival times\n\n      const aggregationInterval = 2;\n      const aggregatedBusArrivalTimes = aggregateNumbers(busArrivalTimes, aggregationInterval);\n\n      let aggregatedBusArrivalTimeObjects = [];\n      for (const aggregatedBusArrivalTime of aggregatedBusArrivalTimes) {\n        const totalMinutes = Math.floor(aggregatedBusArrivalTime);\n        const minutes = totalMinutes % 60;\n        const hours = (totalMinutes - minutes) / 60;\n        const timeObject: TimeObject = {\n          hours: hours,\n          minutes: minutes\n        };\n        aggregatedBusArrivalTimeObjects.push({\n          time: timeObjectToString(timeObject),\n          personalSchedule: personalSchedule,\n          dataQuantity: '--'\n        });\n      }\n\n      result[stopKey3][personalScheduleID].busArrivalTimes = aggregatedBusArrivalTimeObjects;\n    }\n  }\n\n  return result;\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_createForOfIteratorHelper","Array","isArray","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_n","F","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","trackingBusArrivalTime_trackingID","trackingBusArrivalTime_tracking","trackingBusArrivalTime_trackedStops","recordEstimateTimeForBusArrivalTime","_x","_recordEstimateTimeForBusArrivalTime","_callee","EstimateTime","needToReset","foldersWithContent","_iterator","_step","folderWithContent1","now","currentTimeStamp","existingRecord","existingRecordObject","_iterator2","_step2","item","_context","generateIdentifier","listFoldersWithContent","concat","content","filter","m","map","id","err","Date","isInPersonalSchedule","getTime","lfGetItem","JSON","parse","trackingID","timeStamp","data","indexOf","StopID","parseInt","lfSetItem","stringify","discardExpiredEstimateTimeRecordsForBusArrivalTime","_discardExpiredEstimateTimeRecordsForBusArrivalTime","_callee2","_iterator3","_step3","key","json","object","_context2","listRecordedEstimateTimeForBusArrivalTime","lfRemoveItem","t0","getBusArrivalTimes","_getBusArrivalTimes","_callee3","recordsGroupedByStops","_iterator4","_step4","stopKey1","busArrivalTimesGroupedByStops","stopKey2","recordsOfThisStop","recordsOfThisStopLength","EstimateTimeInThisPeriod","busArrivalTimeInThisPeriod","currentRecord","nextRecord","currentRecordEstimateTime","nextRecordEstimateTime","closestRecord","personalSchedules","result","_iterator5","_step5","personalSchedule","personalScheduleID","personalScheduleName","stopKey3","busArrivalTimes","_iterator6","_step6","busArrivalTime","busArrivalTimeDay","busArrivalTimeHours","busArrivalTimeMinutes","totalMinutes","scheduleTotalStartMinutes","scheduleTotalEndMinutes","aggregatedBusArrivalTimes","aggregatedBusArrivalTimeObjects","_iterator7","_step7","aggregatedBusArrivalTime","_totalMinutes","minutes","timeObject","_context3","lfListItemKeys","sort","b","listPersonalSchedules","getDay","getHours","getMinutes","days","period","start","hours","end","aggregateNumbers","Math","floor","time","timeObjectToString","dataQuantity"],"sourceRoot":""}