{"version":3,"file":"107732b34ea6d2536f80.js","mappings":"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","sources":["webpack://bus/./src/data/location/index.ts","webpack://bus/./src/data/import/index.ts","webpack://bus/./src/data/export/index.ts","webpack://bus/./src/data/bus/index.ts","webpack://bus/./src/data/folder/index.ts"],"sourcesContent":["import { MaterialSymbols } from '../../interface/icons/material-symbols-type';\nimport { addressToString, generateLabelFromAddresses } from '../../tools/address';\nimport { CardinalDirection, getCardinalDirectionFromVector } from '../../tools/cardinal-direction';\nimport { generateDirectionLabels, generateLetterLabels } from '../../tools/labels';\nimport { normalizeVector } from '../../tools/math';\nimport { BusArrivalTime, getBusArrivalTimes } from '../analytics/bus-arrival-time/index';\nimport { getBusData } from '../apis/getBusData/index';\nimport { getBusEvent } from '../apis/getBusEvent/index';\nimport { EstimateTime, EstimateTimeItem, getEstimateTime } from '../apis/getEstimateTime/index';\nimport { getLocation, MergedLocation } from '../apis/getLocation/index';\nimport { getRoute, SimplifiedRoute } from '../apis/getRoute/index';\nimport { getStop } from '../apis/getStop/index';\nimport { batchFindBusesForLocation, EstimateTimeStatus, formatBus, FormattedBus, parseEstimateTime } from '../apis/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime, getDataUpdateTime, setDataReceivingProgress } from '../apis/loader';\nimport { getSettingOptionValue } from '../settings/index';\nimport { getUserOrientation } from '../user-orientation/index';\n\ninterface BatchFoundEstimateTimeItem extends EstimateTimeItem {}\n\ntype BatchFoundEstimateTime = {\n  [key: string]: BatchFoundEstimateTimeItem;\n};\n\nfunction batchFindEstimateTime(EstimateTime: EstimateTime, StopIDList: Array<number>): BatchFoundEstimateTime {\n  const result = {};\n  for (const item of EstimateTime) {\n    if (StopIDList.indexOf(item.StopID) > -1) {\n      const thisStopKey: string = `s_${item.StopID}`;\n      result[thisStopKey] = item;\n    }\n  }\n  return result;\n}\n\ntype BatchFoundEstimateTimeRanking = {\n  [key: string]: IntegratedLocationItemRanking;\n};\n\nfunction rankBatchFoundEstimateTime(batchFoundEstimateTime: BatchFoundEstimateTime, StopIDList: Array<number>): BatchFoundEstimateTimeRanking {\n  // StopIDList act as a secondary filter\n  const result: BatchFoundEstimateTimeRanking = {};\n  const rankingArray: Array<[number, number]> = []; // StopID, EstimateTime\n  for (const thisStopKey in batchFoundEstimateTime) {\n    const thisBatchFoundEstimateTimeItem = batchFoundEstimateTime[thisStopKey];\n    const thisStopID = thisBatchFoundEstimateTimeItem.StopID;\n    const thisEstimateTime = parseInt(thisBatchFoundEstimateTimeItem.EstimateTime);\n    if (thisEstimateTime >= 0 && StopIDList.indexOf(thisStopID) > -1) {\n      rankingArray.push([thisStopID, thisEstimateTime]);\n    }\n  }\n  const rankingArrayLength = rankingArray.length;\n  rankingArray.sort(function (a, b) {\n    return a[1] - b[1];\n  });\n  let index = 1;\n  for (const rankingItem of rankingArray) {\n    // Classify into 4 groups and give a code\n    const rankingRatio = index / rankingArrayLength;\n    const rankingCode = (rankingRatio - (rankingRatio % 0.25)) / 0.25;\n    const thisStopID = rankingItem[0];\n    const thisStopKey = `s_${thisStopID}`;\n    result[thisStopKey] = {\n      number: index,\n      text: index.toString(),\n      code: rankingCode\n    };\n    index += 1;\n  }\n  return result;\n}\n\nexport interface LocationGroupProperty {\n  key: string;\n  icon: MaterialSymbols;\n  value: string;\n}\n\nexport interface LocationGroup {\n  name: string;\n  properties: Array<LocationGroupProperty>;\n}\n\nexport interface IntegratedLocationItemRanking {\n  number: number;\n  text: '--' | string;\n  code: -1 | 0 | 1 | 2 | 3 | 4; // -1: not applicable, 0: 0-25%, 1: 25-50%, 2: 50-75%, 3: 75-100%, 4: 100%\n}\n\nexport interface IntegratedLocationItem {\n  route_name: string;\n  route_direction: string;\n  routeId: number;\n  stopId: number;\n  status: EstimateTimeStatus;\n  ranking: IntegratedLocationItemRanking;\n  buses: Array<FormattedBus>;\n  busArrivalTimes: Array<BusArrivalTime>;\n}\n\nexport interface IntegratedLocation {\n  groupedItems: {\n    [key: string]: Array<IntegratedLocationItem>;\n  };\n  groups: {\n    [key: string]: LocationGroup;\n  };\n  groupQuantity: number;\n  itemQuantity: {\n    [key: string]: number;\n  };\n  LocationName: string;\n  dataUpdateTime: number;\n}\n\nexport async function integrateLocation(hash: string, chartWidth: number, chartHeight: number, requestID: string): Promise<IntegratedLocation> {\n  setDataReceivingProgress(requestID, 'getLocation_0', 0, false);\n  setDataReceivingProgress(requestID, 'getLocation_1', 0, false);\n  setDataReceivingProgress(requestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(requestID, 'getRoute_1', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_0', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_1', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_0', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_1', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_0', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_1', 0, false);\n  const EstimateTime = await getEstimateTime(requestID);\n  const Location = (await getLocation(requestID, 1)) as MergedLocation;\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  const Stop = await getStop(requestID);\n  const BusEvent = await getBusEvent(requestID);\n  const BusData = await getBusData(requestID);\n  const BusArrivalTimes = await getBusArrivalTimes(chartWidth, chartHeight);\n\n  const time_formatting_mode = getSettingOptionValue('time_formatting_mode');\n  const location_labels = getSettingOptionValue('location_labels');\n  const display_user_orientation = getSettingOptionValue('display_user_orientation');\n\n  const groupedItems = {} as IntegratedLocation['groupedItems'];\n  const itemQuantity = {} as IntegratedLocation['itemQuantity'];\n  const groups = {} as IntegratedLocation['groups'];\n\n  const userOrientation = getUserOrientation();\n\n  const thisLocationKey = `ml_${hash}`;\n  const thisLocation = Location[thisLocationKey];\n  const thisLocationName = thisLocation.n;\n  const stopLocationIds = thisLocation.id;\n  const setsOfVectors = thisLocation.v;\n\n  let StopIDs = [];\n  let RouteIDs = [];\n  const stopLocationQuantity = stopLocationIds.length;\n\n  for (let i = 0; i < stopLocationQuantity; i++) {\n    StopIDs = StopIDs.concat(thisLocation.s[i]);\n    RouteIDs = RouteIDs.concat(thisLocation.r[i]);\n  }\n\n  const batchFoundEstimateTime = batchFindEstimateTime(EstimateTime, StopIDs);\n  const batchFoundBuses = batchFindBusesForLocation(BusEvent, BusData, Route, StopIDs);\n\n  const cardinalDirections: Array<CardinalDirection> = [];\n  for (const vectorSet of setsOfVectors) {\n    let x: number = 0;\n    let y: number = 0;\n    for (const vector of vectorSet) {\n      x += vector[0];\n      y += vector[1];\n    }\n    const meanVector = normalizeVector([x, y]);\n    const cardinalDirection = getCardinalDirectionFromVector(meanVector);\n    cardinalDirections.push(cardinalDirection);\n  }\n\n  let labels = [];\n  switch (location_labels) {\n    case 'address':\n      labels = generateLabelFromAddresses(thisLocation.a);\n      break;\n    case 'letters':\n      labels = generateLetterLabels(stopLocationQuantity);\n      break;\n    case 'directions':\n      labels = generateDirectionLabels(cardinalDirections);\n      break;\n    default:\n      break;\n  }\n\n  for (let i = 0; i < stopLocationQuantity; i++) {\n    const groupKey = `g_${i}`;\n    groupedItems[groupKey] = [];\n    itemQuantity[groupKey] = 0;\n    groups[groupKey] = {\n      name: labels[i],\n      properties: [\n        {\n          key: 'address',\n          icon: 'personal_places',\n          value: addressToString(thisLocation.a[i])\n        },\n        {\n          key: 'exact_position',\n          icon: 'location_on',\n          value: `${thisLocation.la[i].toFixed(5)}, ${thisLocation.lo[i].toFixed(5)}`\n        },\n        {\n          key: 'cardinal_direction',\n          icon: cardinalDirections[i].icon,\n          value: `${cardinalDirections[i].name}${display_user_orientation && userOrientation.cardinalDirection.id !== -1 && userOrientation.cardinalDirection.id === cardinalDirections[i].id ? '（目前指向）' : ''}`\n        }\n      ]\n    };\n\n    const thisGroupStops = thisLocation.s[i];\n    const stopQuantity = thisGroupStops.length;\n    const thisGroupRanking = rankBatchFoundEstimateTime(batchFoundEstimateTime, thisGroupStops);\n\n    for (let o = 0; o < stopQuantity; o++) {\n      const integratedItem = {} as IntegratedLocationItem;\n      // Collect data from 'Stop'\n      const thisStopID = thisLocation.s[i][o];\n      const thisStopKey = `s_${thisStopID}`;\n      let thisStop: SimplifiedStopItem = {};\n      if (Stop.hasOwnProperty(thisStopKey)) {\n        thisStop = Stop[thisStopKey];\n      } else {\n        continue;\n      }\n      integratedItem.stopId = thisStopID;\n\n      // Collect data from 'thisGroupRanking'\n      let thisItemRanking = { number: 0, text: '--', code: -1 } as IntegratedLocationItemRanking;\n      if (thisGroupRanking.hasOwnProperty(thisStopKey)) {\n        thisItemRanking = thisGroupRanking[thisStopKey];\n      }\n      integratedItem.ranking = thisItemRanking;\n\n      // Collect data from 'Route'\n      const thisRouteID: number = thisLocation.r[i][o];\n      const thisRouteKey = `r_${thisRouteID}`;\n      let thisRoute: SimplifiedRouteItem = {};\n      if (Route.hasOwnProperty(thisRouteKey)) {\n        thisRoute = Route[thisRouteKey];\n      } else {\n        continue;\n      }\n      integratedItem.route_name = thisRoute.n;\n      integratedItem.route_direction = `往${[thisRoute.des, thisRoute.dep, ''][parseInt(thisStop.goBack)]}`;\n      integratedItem.routeId = thisRouteID;\n\n      // Collect data from 'batchFoundEstimateTime'\n      let thisEstimateTime = {} as EstimateTimeItem;\n      if (batchFoundEstimateTime.hasOwnProperty(thisStopKey)) {\n        thisEstimateTime = batchFoundEstimateTime[thisStopKey];\n      } else {\n        continue;\n      }\n      const parsedEstimateTime = parseEstimateTime(thisEstimateTime.EstimateTime, time_formatting_mode);\n      integratedItem.status = parsedEstimateTime;\n\n      // Collect data from 'batchFoundBuses'\n      let buses = [];\n      if (batchFoundBuses.hasOwnProperty(thisStopKey)) {\n        buses = batchFoundBuses[thisStopKey].map((e) => formatBus(e));\n      }\n      integratedItem.buses = buses;\n\n      // Collect data from 'BusArrivalTimes'\n      let thisBusArrivalTimes = [];\n      if (BusArrivalTimes.hasOwnProperty(thisStopKey)) {\n        thisBusArrivalTimes = BusArrivalTimes[thisStopKey];\n      }\n      integratedItem.busArrivalTimes = thisBusArrivalTimes;\n\n      groupedItems[groupKey].push(integratedItem);\n      itemQuantity[groupKey] += 1;\n    }\n  }\n\n  for (const key in groupedItems) {\n    groupedItems[key].sort(function (a, b) {\n      return a.routeId - b.routeId;\n    });\n    /*\n      .map((item: IntegratedLocationItem) => {\n        // accessing ranking[key] inside map callback will cause constant violations any way\n        return {\n          route_name: item.route_name,\n          route_direction: item.route_direction,\n          routeId: item.routeId,\n          stopId: item.stopId,\n          status: item.status,\n          rank: {\n            number: thisRankingIndex + 1,\n            code: 0\n          },\n          buses: item.buses,\n          busArrivalTimes: item.busArrivalTimes\n        };\n      })*/\n  }\n  const result: IntegratedLocation = {\n    groupedItems: groupedItems,\n    groups: groups,\n    groupQuantity: stopLocationQuantity,\n    itemQuantity: itemQuantity,\n    LocationName: thisLocationName,\n    dataUpdateTime: getDataUpdateTime(requestID)\n  };\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  //await recordEstimateTimeForUpdateRate(EstimateTime);\n  return result;\n}\n","import { ExportedData } from '../export/index';\nimport { createFolder, FolderWithContentArray, saveToFolder, updateFolder } from '../folder/index';\nimport { createPersonalSchedule, getPersonalSchedule, PersonalScheduleArray, updatePersonalSchedule } from '../personal-schedule/index';\nimport { getRecentView, logRecentView, RecentViewArray } from '../recent-views/index';\nimport { changeSettingOption, getSetting, SettingsWithOptionsArray } from '../settings/index';\nimport { lfGetItem } from '../storage/index';\n\nexport async function importFolders(data: FolderWithContentArray): Promise<boolean> {\n  for (const FolderWithContent of data) {\n    const folder = FolderWithContent;\n    var update = false;\n    var creation = false;\n    const folderKey: string = `f_${folder.id}`;\n    const existingFolder: string = await lfGetItem(11, folderKey);\n    if (existingFolder) {\n      update = await updateFolder(folder.id, folder.name, folder.icon);\n    } else {\n      creation = await createFolder(folder.name, folder.icon);\n    }\n    if (update) {\n      for (const content of FolderWithContent.content) {\n        await saveToFolder(FolderWithContent.id, content);\n      }\n    }\n    if (creation) {\n      for (const content of FolderWithContent.content) {\n        await saveToFolder(creation, content);\n      }\n    }\n  }\n}\n\nexport async function importSettings(data: SettingsWithOptionsArray): Promise<boolean> {\n  for (const SettingWithOption of data) {\n    const existingSetting = getSetting(SettingWithOption.key);\n    if (existingSetting) {\n      if (existingSetting.type === 'select') {\n        await changeSettingOption(SettingWithOption.key, SettingWithOption.option);\n      }\n    }\n  }\n  return true;\n}\n\nexport async function importPersonalSchedules(data: PersonalScheduleArray): Promise<boolean> {\n  for (const PersonalSchedule of data) {\n    const existingPersonalSchedule = await getPersonalSchedule(PersonalSchedule.id);\n    if (existingPersonalSchedule) {\n      await updatePersonalSchedule(PersonalSchedule);\n    } else {\n      await createPersonalSchedule(PersonalSchedule.name, PersonalSchedule.period.start.hours, PersonalSchedule.period.start.minutes, PersonalSchedule.period.end.hours, PersonalSchedule.period.end.minutes, PersonalSchedule.days);\n    }\n  }\n  return true;\n}\n\nexport async function importRecentViews(data: RecentViewArray): Promise<boolean> {\n  for (const RecentView of data) {\n    switch (RecentView.type) {\n      case 'route':\n        const existingRecentViewRoute = await getRecentView('route', RecentView.id);\n        if (!existingRecentViewRoute) {\n          await logRecentView(RecentView.type, RecentView.id);\n        }\n        break;\n      case 'location':\n        const existingRecentViewLocation = await getRecentView('location', RecentView.hash);\n        if (!existingRecentViewLocation) {\n          await logRecentView(RecentView.type, RecentView.hash);\n        }\n        break;\n      case 'bus':\n        const existingRecentViewBus = await getRecentView('bus', RecentView.id);\n        if (!existingRecentViewBus) {\n          await logRecentView(RecentView.type, RecentView.id);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  return true;\n}\n\nexport async function importData(data: string): Promise<boolean> {\n  const parsedData: ExportedData = JSON.parse(data);\n  switch (parsedData.version) {\n    case 1:\n      await importFolders(parsedData.folders);\n      return true;\n      break;\n    case 2:\n      await importFolders(parsedData.folders);\n      await importSettings(parsedData.settings);\n      return true;\n      break;\n    case 3:\n      await importFolders(parsedData.folders);\n      await importSettings(parsedData.settings);\n      await importPersonalSchedules(parsedData.personal_schedules);\n      return true;\n      break;\n    case 4:\n      await importFolders(parsedData.folders);\n      await importSettings(parsedData.settings);\n      await importPersonalSchedules(parsedData.personal_schedules);\n      await importRecentViews(parsedData.recent_views);\n      return true;\n      break;\n    default:\n      return false;\n      break;\n  }\n}\n","import { FolderWithContentArray, listFoldersWithContent } from '../folder/index';\nimport { listPersonalSchedules, PersonalScheduleArray } from '../personal-schedule/index';\nimport { listRecentViews, RecentViewArray } from '../recent-views/index';\nimport { listSettingsWithOptions, SettingsWithOptionsArray } from '../settings/index';\n\nexport interface ExportedDataVersion1 {\n  time: string;\n  version: 1;\n  folders: FolderWithContentArray;\n}\n\nexport interface ExportedDataVersion2 {\n  time: string;\n  version: 2;\n  folders: FolderWithContentArray;\n  settings: SettingsWithOptionsArray;\n}\n\nexport interface ExportedDataVersion3 {\n  time: string;\n  version: 3;\n  folders: FolderWithContentArray;\n  settings: SettingsWithOptionsArray;\n  personal_schedules: PersonalScheduleArray;\n}\n\nexport interface ExportedDataVersion4 {\n  time: string;\n  version: 4;\n  folders: FolderWithContentArray;\n  settings: SettingsWithOptionsArray;\n  personal_schedules: PersonalScheduleArray;\n  recent_views: RecentViewArray;\n}\n\nexport type ExportedData = ExportedDataVersion1 | ExportedDataVersion2 | ExportedDataVersion3 | ExportedDataVersion4;\n\nexport async function exportData(): Promise<string> {\n  const foldersWithContent = await listFoldersWithContent();\n  const settings = listSettingsWithOptions();\n  const personalSchedules = await listPersonalSchedules();\n  const RecentViews = await listRecentViews();\n  let result: ExportedDataVersion4 = {};\n  result.time = new Date().toISOString();\n  result.version = 4;\n  result.folders = foldersWithContent;\n  result.settings = settings;\n  result.personal_schedules = personalSchedules;\n  result.recent_views = RecentViews;\n  return JSON.stringify(result);\n}\n","import { MaterialSymbols } from '../../interface/icons/material-symbols-type';\nimport { getBusData } from '../apis/getBusData/index';\nimport { getBusEvent } from '../apis/getBusEvent/index';\nimport { CarInfoItem, getCarInfo } from '../apis/getCarInfo/index';\nimport { getLocation, SimplifiedLocation } from '../apis/getLocation/index';\nimport { getStop } from '../apis/getStop/index';\nimport { parseBusStatus, parseCarOnStop, parseCarType } from '../apis/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime } from '../apis/loader';\nimport { searchRouteByPathAttributeId } from '../search/index';\n\nexport interface integratedBus {\n  properties: Array<{\n    key: string;\n    icon: MaterialSymbols;\n    value: string;\n  }>;\n  RouteID: number;\n  FullPathAttributeId: Array<number>;\n}\n\nexport async function integrateBus(id: CarInfoItem['BusId'], requestID: string): Promise<integratedBus> {\n  const carKey = `c_${id}`;\n  const CarInfo = await getCarInfo(requestID, true);\n  const BusData = await getBusData(requestID);\n  const BusEvent = await getBusEvent(requestID);\n  const Stop = await getStop(requestID);\n  const Location = (await getLocation(requestID, 0)) as SimplifiedLocation;\n\n  let result: integratedBus = {\n    properties: [],\n    LocationName: ''\n  };\n\n  // Collect data from CarInfo\n  let thisCar = {};\n  if (CarInfo.hasOwnProperty(carKey)) {\n    thisCar = CarInfo[carKey];\n  } else {\n    return result;\n  }\n\n  const thisCarNumber = thisCar.CarNum;\n  result.properties.push({\n    key: 'car_number',\n    icon: 'tag',\n    value: thisCarNumber\n  });\n\n  const thisCarType = thisCar.CarType;\n  const type = parseCarType(thisCarType);\n  result.properties.push({\n    key: 'car_type',\n    icon: 'directions_bus',\n    value: type\n  });\n\n  // Collect data from BusData\n  let thisBusDataItem = {};\n  for (const BusDataItem of BusData) {\n    const thisBusDataItemBusID = BusDataItem.BusID;\n    if (thisBusDataItemBusID === thisCarNumber) {\n      thisBusDataItem = BusDataItem;\n      break;\n    }\n  }\n  const thisBusDataItemPathAttributeId = parseInt(thisBusDataItem.RouteID);\n  // result.PathAttributeId = thisBusDataItemPathAttributeId;\n  const thisBusDataItemBusStatus = thisBusDataItem.BusStatus;\n  const situation = parseBusStatus(thisBusDataItemBusStatus);\n  const thisBusDataItemGoBack = parseInt(thisBusDataItem.GoBack);\n\n  // Collect data from BusEvent\n  let thisBusEventItem = {};\n  for (const BusEventItem of BusEvent) {\n    const thisBusEventItemBusID = BusEventItem.BusID;\n    if (thisBusEventItemBusID === thisCarNumber) {\n      thisBusEventItem = BusEventItem;\n      break;\n    }\n  }\n\n  const thisBusEventItemCarOnStop = thisBusEventItem.CarOnStop;\n  const onStop = parseCarOnStop(thisBusEventItemCarOnStop);\n  result.properties.push({\n    key: 'status',\n    icon: 'vital_signs',\n    value: `${onStop} | ${situation}`\n  });\n  const thisBusEventItemStopID = thisBusEventItem.StopID;\n\n  // Search routes\n  const searchedRoutes = await searchRouteByPathAttributeId(thisBusDataItemPathAttributeId);\n  let searchedRoute = {};\n  if (searchedRoutes.length > 0) {\n    searchedRoute = searchedRoutes[0];\n  } else {\n    return result;\n  }\n  const thisRouteID = searchedRoute.id;\n  const thisRouteFullPathAttributeId = searchedRoute.pid;\n  const thisRouteName = searchedRoute.n;\n  const thisRouteDeparture = searchedRoute.dep;\n  const thisRouteDestination = searchedRoute.des;\n  const thisRouteDirection = [thisRouteDestination, thisRouteDeparture, ''][thisBusDataItemGoBack ? thisBusDataItemGoBack : 0];\n  result.properties.push({\n    key: 'route',\n    icon: 'route',\n    value: `${thisRouteName} - 往${thisRouteDirection}`\n  });\n\n  result.RouteID = thisRouteID;\n  result.FullPathAttributeId = thisRouteFullPathAttributeId;\n\n  // Collect data from Stop\n  const StopKey = `s_${thisBusEventItemStopID}`;\n  let thisStopItem = {};\n  if (Stop.hasOwnProperty(StopKey)) {\n    thisStopItem = Stop[StopKey];\n  } else {\n    return result;\n  }\n  const thisStopItemStopLocationId = thisStopItem.stopLocationId;\n\n  // Collect data drom Location\n  const LocationKey = `l_${thisStopItemStopLocationId}`;\n  const thisLocationItem = Location[LocationKey];\n  const thisLocationItemName = thisLocationItem.n;\n  result.properties.push({\n    key: 'location_name',\n    icon: 'location_on',\n    value: thisLocationItemName\n  });\n\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  return result;\n}\n","import { MaterialSymbols } from '../../interface/icons/material-symbols-type';\nimport { generateIdentifier } from '../../tools/index';\nimport { collectBusArrivalTimeData } from '../analytics/bus-arrival-time/index';\nimport { collectUpdateRateData } from '../analytics/update-rate/index';\nimport { EstimateTimeItem, getEstimateTime } from '../apis/getEstimateTime/index';\nimport { getLocation, SimplifiedLocation } from '../apis/getLocation/index';\nimport { getMaterialSymbols } from '../apis/getMaterialSymbols/index';\nimport { getRoute, SimplifiedRoute, SimplifiedRouteItem } from '../apis/getRoute/index';\nimport { getStop, SimplifiedStop } from '../apis/getStop/index';\nimport { EstimateTimeStatus, parseEstimateTime } from '../apis/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime, getDataUpdateTime, setDataReceivingProgress } from '../apis/loader';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../settings/index';\nimport { lfGetItem, lfListItemKeys, lfRemoveItem, lfSetItem } from '../storage/index';\n\ninterface FolderContentRouteEndPoints {\n  departure: string;\n  destination: string;\n}\n\nexport interface FolderContentStopRoute {\n  name: string;\n  endPoints: FolderContentRouteEndPoints;\n  id: number;\n}\n\nexport interface FolderContentStop {\n  type: 'stop';\n  id: number;\n  timestamp: number;\n  name: string;\n  direction: number;\n  route: FolderContentStopRoute;\n}\n\nexport interface FolderContentRoute {\n  type: 'route';\n  id: number;\n  timestamp: number;\n  name: string;\n  endPoints: FolderContentRouteEndPoints;\n}\n\nexport interface FolderContentBus {\n  type: 'bus';\n  id: number; // CarID\n  timestamp: number;\n  busID: string; // BusID\n}\n\nexport interface FolderContentEmpty {\n  type: 'empty';\n  id: number;\n}\n\nexport type FolderContent = FolderContentStop | FolderContentRoute | FolderContentBus | FolderContentEmpty;\n\nexport interface Folder {\n  name: string;\n  icon: MaterialSymbols;\n  id: string;\n  timestamp: number;\n}\n\nexport type FolderArray = Array<Folder>;\n\nexport interface FolderWithContent extends Folder {\n  content: Array<FolderContent>;\n  contentLength: number;\n}\n\nexport type FolderWithContentArray = Array<FolderWithContent>;\n\nconst FolderList: { [key: string]: Folder } = {};\n\nexport async function initializeFolderList() {\n  const folderKeys = await lfListItemKeys(11);\n  for (const folderKey of folderKeys) {\n    const thisFolderJSON = await lfGetItem(11, folderKey);\n    if (thisFolderJSON) {\n      const thisFolderObject = JSON.parse(thisFolderJSON) as Folder;\n      if (!FolderList.hasOwnProperty(folderKey)) {\n        FolderList[folderKey] = thisFolderObject;\n      }\n    }\n  }\n}\n\nexport async function createFolder(name: Folder['name'], icon: Folder['icon']): Promise<Folder['id'] | false> {\n  // Validate icon\n  const requestID = generateIdentifier();\n  const materialSymbols = await getMaterialSymbols(requestID);\n  deleteDataReceivingProgress(requestID);\n  if (materialSymbols.indexOf(icon) < 0) {\n    return false;\n  }\n\n  // Check existence\n  const folderID = generateIdentifier();\n  const folderKey = `f_${folderID}`;\n  if (FolderList.hasOwnProperty(folderKey)) {\n    return false;\n  }\n  const existingFolder = await lfGetItem(11, folderKey);\n  if (existingFolder) {\n    return false;\n  }\n\n  // Generate folder\n  const nowTime = new Date().getTime();\n  let newFolder: Folder = {\n    name: name,\n    icon: icon,\n    id: folderID,\n    timestamp: nowTime\n  };\n\n  // Save folder\n  FolderList[folderKey] = newFolder;\n  await lfSetItem(11, folderKey, JSON.stringify(newFolder));\n  await lfSetItem(12, folderKey, JSON.stringify([]));\n  return folderID;\n}\n\nexport async function updateFolder(folderID: Folder['id'], name: Folder['name'], icon: Folder['icon']): Promise<boolean> {\n  const folderKey: string = `f_${folderID}`;\n\n  // Check existence\n  const existingFolderJSON = await lfGetItem(11, folderKey);\n  if (!existingFolderJSON) {\n    return false;\n  }\n  const existingFolderObject = JSON.parse(existingFolderJSON) as Folder;\n\n  // Validate icon\n  const requestID = generateIdentifier();\n  const materialSymbols = await getMaterialSymbols(requestID);\n  deleteDataReceivingProgress(requestID);\n  if (materialSymbols.indexOf(icon) < 0) {\n    return false;\n  }\n\n  // Generate folder\n  const modifiedFolder: Folder = {\n    name: name,\n    icon: icon,\n    id: folderID,\n    timestamp: existingFolderObject.timestamp\n  };\n\n  // Save folder\n  FolderList[folderKey] = modifiedFolder;\n  await lfSetItem(11, folderKey, JSON.stringify(modifiedFolder));\n  return true;\n}\n\nexport function getFolder(folderID: Folder['id']): Folder | false {\n  const folderKey: string = `f_${folderID}`;\n  if (!FolderList.hasOwnProperty(folderKey)) {\n    return false;\n  }\n  const folderObject: Folder = {\n    name: FolderList[folderKey].name,\n    icon: FolderList[folderKey].icon,\n    id: FolderList[folderKey].id,\n    timestamp: FolderList[folderKey].timestamp\n  };\n  return folderObject;\n  // return cloneDeep(Folders[folderKey]);\n}\n\nexport function listFolders(): FolderArray {\n  const result = [];\n  for (const folderKey in FolderList) {\n    const folderObject: Folder = {\n      name: FolderList[folderKey].name,\n      icon: FolderList[folderKey].icon,\n      id: FolderList[folderKey].id,\n      timestamp: FolderList[folderKey].timestamp\n    };\n    result.push(folderObject);\n  }\n  result.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  });\n  return result;\n}\n\nexport async function listFolderContent(folderID: Folder['id']): Promise<Array<FolderContent>> {\n  const result: Array<FolderContent> = [];\n\n  const folderKey: string = `f_${folderID}`;\n  const thisFolder = getFolder(folderID);\n  if (typeof thisFolder === 'boolean' && thisFolder === false) {\n    return result;\n  }\n\n  const thisFolderContentIndexJSON = await lfGetItem(12, folderKey);\n  if (!thisFolderContentIndexJSON) {\n    return result;\n  }\n  const thisFolderContentIndexArray = JSON.parse(thisFolderContentIndexJSON) as Array<string>;\n  if (thisFolderContentIndexArray.length === 0) {\n    const emptyItem: FolderContentEmpty = {\n      type: 'empty',\n      id: 0,\n      index: 0\n    };\n    result.push(emptyItem);\n    return result;\n  }\n\n  for (const thisFolderContentKey of thisFolderContentIndexArray) {\n    const thisContentJSON = await lfGetItem(13, thisFolderContentKey);\n    if (thisContentJSON) {\n      const thisContentObject = JSON.parse(thisContentJSON) as FolderContent;\n      result.push(thisContentObject);\n    }\n  }\n  return result;\n}\n\nasync function getFolderContentLength(folderID: Folder['id']): Promise<number> {\n  const folderKey: string = `f_${folderID}`;\n  const thisFolderContentIndexJSON = await lfGetItem(12, folderKey);\n  if (!thisFolderContentIndexJSON) {\n    return 0;\n  }\n  const thisFolderContentIndexArray = JSON.parse(thisFolderContentIndexJSON) as Array<string>;\n  return thisFolderContentIndexArray.length;\n}\n\nexport async function listFoldersWithContent(): Promise<FolderWithContentArray> {\n  const folders = await listFolders();\n  const result: FolderWithContentArray = [];\n  for (const folder of folders) {\n    const folderContent = await listFolderContent(folder.id);\n    const folderContentLength = await getFolderContentLength(folder.id);\n    result.push({\n      name: folder.name,\n      icon: folder.icon,\n      id: folder.id,\n      timestamp: folder.timestamp,\n      content: folderContent,\n      contentLength: folderContentLength\n    });\n  }\n  return result;\n}\n\nexport async function listAllFolderContent(types: Array<FolderContent['type']>): Promise<Array<FolderContent>> {\n  let useFilter: boolean = true;\n  if (typeof types !== 'object' || !Array.isArray(types)) {\n    useFilter = false;\n  }\n  let result: Array<FolderContent> = [];\n  const keys = await lfListItemKeys(13);\n  for (const key of keys) {\n    const json = await lfGetItem(13, key);\n    if (json) {\n      const object = JSON.parse(json) as FolderContent;\n      if (useFilter) {\n        if (types.indexOf(object.type) > -1) {\n          result.push(object);\n        }\n      } else {\n        result.push(object);\n      }\n    }\n  }\n  return result;\n}\n\nexport interface integratedFolderContentStopRoute extends FolderContentStopRoute {\n  pathAttributeId: Array<number>;\n}\n\nexport interface integratedFolderContentStop extends FolderContentStop {\n  status: EstimateTimeStatus;\n  route: integratedFolderContentStopRoute;\n}\n\nexport interface integratedFolderContentRoute extends FolderContentRoute {\n  pathAttributeId: Array<number>;\n}\n\nexport interface integratedFolderContentBus extends FolderContentBus {}\n\nexport interface integratedFolderContentEmpty extends FolderContentEmpty {}\n\nexport type integratedFolderContent = integratedFolderContentStop | integratedFolderContentRoute | integratedFolderContentBus | integratedFolderContentEmpty;\n\nexport interface integratedFolder extends Folder {\n  content: Array<integratedFolderContent>;\n  contentLength: number;\n}\n\nexport interface integratedFolders {\n  folders: Array<integratedFolder>;\n  dataUpdateTime: number;\n}\n\nexport async function integrateFolders(requestID: string): Promise<integratedFolders> {\n  setDataReceivingProgress(requestID, 'getEstimateTime_0', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_1', 0, false);\n  setDataReceivingProgress(requestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(requestID, 'getRoute_1', 0, false);\n\n  const EstimateTime = await getEstimateTime(requestID);\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n\n  const foldersWithContent = await listFoldersWithContent();\n\n  const time_formatting_mode = getSettingOptionValue('time_formatting_mode') as number;\n  const power_saving = getSettingOptionValue('power_saving') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n\n  let StopIDs = [] as Array<number>;\n  for (const folderWithContent1 of foldersWithContent) {\n    StopIDs = StopIDs.concat(\n      folderWithContent1.content\n        .filter((m) => {\n          return m.type === 'stop' ? true : false;\n        })\n        .map((e) => e.id)\n    );\n  }\n\n  let batchFoundEstimateTime: { [key: string]: EstimateTimeItem } = {};\n  for (const EstimateTimeItem of EstimateTime) {\n    if (StopIDs.indexOf(EstimateTimeItem.StopID) > -1) {\n      const thisStopKey: string = `s_${EstimateTimeItem.StopID}`;\n      batchFoundEstimateTime[thisStopKey] = EstimateTimeItem;\n    }\n  }\n\n  let folders: integratedFolders['folders'] = [];\n\n  for (const folderWithContent2 of foldersWithContent) {\n    // Initialize integratedFolder\n    const integratedFolder: integratedFolder = {\n      name: folderWithContent2.name,\n      icon: folderWithContent2.icon,\n      id: folderWithContent2.id,\n      timestamp: folderWithContent2.timestamp,\n      content: [],\n      contentLength: folderWithContent2.contentLength\n    };\n\n    for (let item of folderWithContent2.content) {\n      let integratedItem = item as integratedFolderContent;\n      switch (integratedItem.type) {\n        case 'stop': {\n          const thisStopKey = `s_${integratedItem.id}`;\n          let thisEstimateTime = {} as EstimateTimeItem;\n          if (batchFoundEstimateTime.hasOwnProperty(thisStopKey)) {\n            thisEstimateTime = batchFoundEstimateTime[thisStopKey];\n          } else {\n            break;\n          }\n          integratedItem.status = parseEstimateTime(thisEstimateTime.EstimateTime, time_formatting_mode);\n          const thisRouteKey = `r_${integratedItem.route.id}`;\n          const thisRoute = Route[thisRouteKey] as SimplifiedRouteItem;\n          integratedItem.route.pathAttributeId = thisRoute.pid;\n          break;\n        }\n        case 'route': {\n          const thisRouteKey = `r_${integratedItem.id}`;\n          const thisRoute = Route[thisRouteKey] as SimplifiedRouteItem;\n          integratedItem.pathAttributeId = thisRoute.pid;\n          break;\n        }\n        case 'bus':\n          break;\n        case 'empty':\n          break;\n        default:\n          break;\n      }\n      integratedFolder.content.push(integratedItem);\n    }\n    folders.push(integratedFolder);\n  }\n\n  const result: integratedFolders = {\n    folders: folders,\n    dataUpdateTime: getDataUpdateTime(requestID)\n  };\n\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n\n  if (!power_saving) {\n    if (refresh_interval_setting.dynamic) {\n      await collectUpdateRateData(EstimateTime);\n    }\n    await collectBusArrivalTimeData(EstimateTime);\n  }\n\n  return result;\n}\n\nexport async function saveToFolder(folderID: Folder['id'], content: FolderContent): Promise<boolean> {\n  const folderKey = `f_${folderID}`;\n  const contentKey = `${content.type}_${content.id}`;\n  const thisFolder = getFolder(folderID);\n\n  if (typeof thisFolder === 'boolean' && thisFolder === false) {\n    return false;\n  }\n\n  const thisFolderContentIndexJSON = (await lfGetItem(12, folderKey)) as string;\n  if (!thisFolderContentIndexJSON) {\n    return false;\n  }\n\n  const thisFolderContentIndexArray = JSON.parse(thisFolderContentIndexJSON) as Array<string>;\n  if (thisFolderContentIndexArray.length === 0 || thisFolderContentIndexArray.indexOf(contentKey) < 0) {\n    await lfSetItem(12, folderKey, JSON.stringify(thisFolderContentIndexArray.concat(contentKey)));\n    await lfSetItem(13, contentKey, JSON.stringify(content));\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport async function isFolderContentSaved(type: FolderContent['type'], id: FolderContent['id']): Promise<boolean> {\n  const folderContentKeyToCheck = `${type}_${id}`;\n\n  const keys = await lfListItemKeys(12);\n  for (const key of keys) {\n    const thisFolderContentIndexJSON = (await lfGetItem(12, key)) as string;\n    if (!thisFolderContentIndexJSON) {\n      continue;\n    }\n    const thisFolderContentIndexArray = JSON.parse(thisFolderContentIndexJSON) as Array<string>;\n    if (thisFolderContentIndexArray.indexOf(folderContentKeyToCheck) > -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport async function removeFromFolder(folderID: Folder['id'], type: FolderContent['type'], id: FolderContent['id']): Promise<boolean> {\n  const folderKey = `f_${folderID}`;\n  const thisFolderContentKey = `${type}_${id}`;\n\n  // Check existence\n  const thisFolder = getFolder(folderID);\n  if (typeof thisFolder === 'boolean' && thisFolder === false) {\n    return false;\n  }\n\n  // Remove reference from folder content index\n  const thisFolderContentIndexJSON = (await lfGetItem(12, folderKey)) as string;\n  if (!thisFolderContentIndexJSON) {\n    return false;\n  }\n  const thisFolderContentIndexArray = JSON.parse(thisFolderContentIndexJSON) as Array<string>;\n  const index = thisFolderContentIndexArray.indexOf(thisFolderContentKey);\n  if (index > -1 && thisFolderContentIndexArray.length > 0) {\n    thisFolderContentIndexArray.splice(index, 1);\n    await lfSetItem(12, folderKey, JSON.stringify(thisFolderContentIndexArray));\n  }\n\n  // Remove content if there are no other references\n  const isSaved = await isFolderContentSaved(type, id);\n  if (isSaved === false) {\n    await lfRemoveItem(13, thisFolderContentKey);\n  }\n  return true;\n}\n\nexport async function saveStop(folderID: Folder['id'], StopID: number, RouteID: number): Promise<boolean> {\n  const requestID = generateIdentifier();\n  const Stop = (await getStop(requestID)) as SimplifiedStop;\n  const Location = (await getLocation(requestID, 0)) as SimplifiedLocation;\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n\n  const thisStop = Stop[`s_${StopID}`];\n  const thisStopDirection: number = parseInt(thisStop.goBack);\n  const thisLocation = Location[`l_${thisStop.stopLocationId}`];\n  const thisStopName: string = thisLocation.n;\n\n  const thisRoute = Route[`r_${RouteID}`];\n  const thisRouteName: string = thisRoute.n;\n  const thisRouteDeparture: string = thisRoute.dep;\n  const thisRouteDestination: string = thisRoute.des;\n\n  const newContent: FolderContentStop = {\n    type: 'stop',\n    id: StopID,\n    timestamp: new Date().getTime(),\n    name: thisStopName,\n    direction: thisStopDirection,\n    route: {\n      name: thisRouteName,\n      endPoints: {\n        departure: thisRouteDeparture,\n        destination: thisRouteDestination\n      },\n      id: RouteID\n    }\n  };\n  const save = await saveToFolder(folderID, newContent);\n  return save;\n}\n\nexport async function saveRoute(folderID: Folder['id'], RouteID: number): Promise<boolean> {\n  const requestID = generateIdentifier();\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  const thisRouteKey = `r_${RouteID}`;\n  let thisRoute = {} as SimplifiedRouteItem;\n  if (Route.hasOwnProperty(thisRouteKey)) {\n    thisRoute = Route[thisRouteKey];\n  } else {\n    return false;\n  }\n\n  const newContent: FolderContentRoute = {\n    type: 'route',\n    id: RouteID,\n    timestamp: new Date().getTime(),\n    name: thisRoute.n,\n    endPoints: {\n      departure: thisRoute.dep,\n      destination: thisRoute.des\n    }\n  };\n  const save = await saveToFolder(folderID, newContent);\n  return save;\n}\n\n// TODO: Save Bus\n\nexport async function updateFolderContentIndex(folderID: Folder['id'], type: FolderContent['type'], id: FolderContent['id'], direction: 'up' | 'down'): Promise<boolean> {\n  const folderKey = `f_${folderID}`;\n  const thisFolderContentKey = `${type}_${id}`;\n  const thisFolder = getFolder(folderID);\n  if (typeof thisFolder === 'boolean' && thisFolder === false) {\n    return false;\n  }\n\n  const thisFolderContentIndexJSON = (await lfGetItem(12, folderKey)) as string;\n  if (!thisFolderContentIndexJSON) {\n    return false;\n  }\n  const thisFolderContentIndexArray = JSON.parse(thisFolderContentIndexJSON) as Array<string>;\n\n  const index = thisFolderContentIndexArray.indexOf(thisFolderContentKey);\n  if (index > -1 && thisFolderContentIndexArray.length > 1) {\n    let offset: number = 0;\n    switch (direction) {\n      case 'up':\n        offset = -1;\n        break;\n      case 'down':\n        offset = 1;\n        break;\n      default:\n        offset = 0;\n        break;\n    }\n    thisFolderContentIndexArray.splice(index, 1);\n    thisFolderContentIndexArray.splice(index + offset, 0, thisFolderContentKey);\n    await lfSetItem(12, folderKey, JSON.stringify(thisFolderContentIndexArray));\n    return true;\n  } else {\n    return false;\n  }\n}\n"],"names":["rankBatchFoundEstimateTime","batchFoundEstimateTime","StopIDList","result","rankingArray","thisStopKey","thisBatchFoundEstimateTimeItem","thisStopID","StopID","thisEstimateTime","parseInt","EstimateTime","indexOf","push","rankingArrayLength","length","sort","a","b","index","_i","_rankingArray","rankingRatio","rankingCode","number","text","toString","code","integrateLocation","_x","_x2","_x3","_x4","_integrateLocation","apply","arguments","hash","chartWidth","chartHeight","requestID","setDataReceivingProgress","getEstimateTime","Location","getLocation","Route","getRoute","Stop","getStop","BusEvent","getBusEvent","BusData","getBusData","BusArrivalTimes","getBusArrivalTimes","time_formatting_mode","getSettingOptionValue","location_labels","display_user_orientation","groupedItems","itemQuantity","groups","userOrientation","getUserOrientation","thisLocation","thisLocationName","n","stopLocationIds","id","setsOfVectors","v","StopIDs","RouteIDs","stopLocationQuantity","i","concat","s","r","_step2","_step","_iterator","_createForOfIteratorHelper","done","item","value","err","e","f","batchFindEstimateTime","batchFoundBuses","batchFindBusesForLocation","cardinalDirections","_iterator2","_step3","vectorSet","x","y","_iterator3","vector","meanVector","normalizeVector","cardinalDirection","getCardinalDirectionFromVector","labels","generateLabelFromAddresses","generateLetterLabels","generateDirectionLabels","groupKey","name","properties","key","icon","addressToString","la","toFixed","lo","thisGroupStops","stopQuantity","thisGroupRanking","o","integratedItem","thisStop","hasOwnProperty","stopId","thisItemRanking","ranking","thisRouteID","thisRouteKey","thisRoute","route_name","route_direction","des","dep","goBack","routeId","parsedEstimateTime","parseEstimateTime","status","buses","map","formatBus","thisBusArrivalTimes","busArrivalTimes","groupQuantity","LocationName","dataUpdateTime","getDataUpdateTime","deleteDataReceivingProgress","deleteDataUpdateTime","importFolders","_importFolders","_asyncToGenerator","data","FolderWithContent","folder","update","creation","folderKey","lfGetItem","updateFolder","createFolder","content","saveToFolder","importSettings","_importSettings","_step4","_iterator4","SettingWithOption","existingSetting","getSetting","type","changeSettingOption","option","importPersonalSchedules","_importPersonalSchedules","_step5","_iterator5","PersonalSchedule","getPersonalSchedule","updatePersonalSchedule","createPersonalSchedule","period","start","hours","minutes","end","days","_importRecentViews","_step6","_iterator6","RecentView","getRecentView","logRecentView","importData","_x5","_importData","parsedData","JSON","parse","version","folders","settings","personal_schedules","importRecentViews","recent_views","exportData","_exportData","foldersWithContent","listFoldersWithContent","listSettingsWithOptions","personalSchedules","listPersonalSchedules","RecentViews","listRecentViews","time","Date","toISOString","stringify","integrateBus","_integrateBus","carKey","CarInfo","getCarInfo","thisCar","thisCarNumber","CarNum","thisCarType","CarType","parseCarType","thisBusDataItem","BusDataItem","BusID","thisBusDataItemPathAttributeId","RouteID","thisBusDataItemBusStatus","BusStatus","situation","parseBusStatus","thisBusDataItemGoBack","GoBack","thisBusEventItem","BusEventItem","thisBusEventItemCarOnStop","CarOnStop","onStop","parseCarOnStop","thisBusEventItemStopID","searchedRoutes","searchRouteByPathAttributeId","searchedRoute","thisRouteFullPathAttributeId","pid","thisRouteName","thisRouteDeparture","thisRouteDirection","FullPathAttributeId","StopKey","thisLocationItemName","stopLocationId","FolderList","initializeFolderList","_initializeFolderList","lfListItemKeys","thisFolderJSON","thisFolderObject","_createFolder","generateIdentifier","materialSymbols","getMaterialSymbols","folderID","newFolder","timestamp","getTime","lfSetItem","_updateFolder","existingFolderJSON","existingFolderObject","modifiedFolder","getFolder","listFolderContent","_x6","_listFolderContent","thisFolder","thisFolderContentIndexJSON","thisFolderContentIndexArray","thisFolderContentKey","thisContentJSON","thisContentObject","getFolderContentLength","_x7","_getFolderContentLength","_listFoldersWithContent","folderObject","listFolders","folderContent","folderContentLength","contentLength","listAllFolderContent","_x8","_listAllFolderContent","types","useFilter","_typeof","Array","isArray","json","object","integrateFolders","_x9","_integrateFolders","power_saving","refresh_interval_setting","folderWithContent1","filter","m","EstimateTimeItem","_step7","_iterator7","_step8","folderWithContent2","integratedFolder","_iterator8","route","pathAttributeId","dynamic","collectUpdateRateData","collectBusArrivalTimeData","_x0","_x1","_saveToFolder","contentKey","isFolderContentSaved","_x10","_x11","_isFolderContentSaved","_step9","folderContentKeyToCheck","_iterator9","removeFromFolder","_x12","_x13","_x14","_removeFromFolder","splice","lfRemoveItem","saveStop","_x15","_x16","_x17","_saveStop","thisStopDirection","thisStopName","thisRouteDestination","newContent","direction","endPoints","departure","destination","saveRoute","_x18","_x19","_saveRoute","updateFolderContentIndex","_x20","_x21","_x22","_x23","_updateFolderContentIndex","offset"],"sourceRoot":""}