{"version":3,"file":"7d6ca7c058224b1e9d61.js","mappings":"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","sources":["webpack://bus/./src/data/route/index.ts","webpack://bus/./src/data/route/details.ts"],"sourcesContent":["import { convertPositionsToDistance } from '../../tools/convert';\nimport { BusArrivalTime, getBusArrivalTimes } from '../analytics/bus-arrival-time/index';\nimport { getBusData } from '../apis/getBusData/index';\nimport { getBusEvent } from '../apis/getBusEvent/index';\nimport { getEstimateTime } from '../apis/getEstimateTime/index';\nimport { getLocation, IndexedLocation, IndexedLocationItem, MergedLocation, SimplifiedLocation, SimplifiedLocationItem } from '../apis/getLocation/index';\nimport { getRoute, SimplifiedRoute, SimplifiedRouteItem } from '../apis/getRoute/index';\nimport { getSegmentBuffers, SimplifiedSegmentBufferItem } from '../apis/getSegmentBuffers/index';\nimport { getStop, SimplifiedStopItem } from '../apis/getStop/index';\nimport { batchFindBusesForRoute, EstimateTimeStatus, formatBus, FormattedBus, parseEstimateTime } from '../apis/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime, getDataUpdateTime, setDataReceivingProgress } from '../apis/loader';\nimport { getSettingOptionValue } from '../settings/index';\nimport { getNearestPosition } from '../user-position/index';\n\ninterface formattedOverlappingRoute {\n  name: string;\n  RouteEndPoints: {\n    RouteDeparture: string;\n    RouteDestination: string;\n    text: string;\n    html: string;\n  };\n  RouteID: number;\n  PathAttributeId: Array<number>;\n}\n\nexport interface integratedStopItemPosition {\n  longitude: number;\n  latitude: number;\n}\n\nexport interface integratedStopItemSegmentBuffer {\n  isSegmentBuffer: boolean;\n  isStartingPoint: boolean;\n  isEndingPoint: boolean;\n}\n\nexport interface integratedStopItemNearbyLocationItem {\n  name: string;\n  distance: number;\n  hash: string;\n}\n\nexport interface integratedStopItem {\n  name: string;\n  goBack: '0' | '1' | '2';\n  status: EstimateTimeStatus;\n  buses: Array<FormattedBus>;\n  overlappingRoutes: Array<formattedOverlappingRoute>;\n  busArrivalTimes: Array<BusArrivalTime>;\n  nearbyLocations: Array<integratedStopItemNearbyLocationItem>;\n  sequence: number;\n  position: integratedStopItemPosition;\n  nearest: boolean;\n  segmentBuffer: integratedStopItemSegmentBuffer;\n  progress: number;\n  id: number;\n}\n\nexport interface IntegratedRoute {\n  groupedItems: { [key: string]: Array<integratedStopItem> };\n  groupQuantity: number;\n  itemQuantity: { [key: string]: number };\n  RouteName: string;\n  RouteEndPoints: {\n    RouteDeparture: string;\n    RouteDestination: string;\n  };\n  dataUpdateTime: number;\n  RouteID: number;\n  PathAttributeId: Array<number>;\n}\n\nexport async function integrateRoute(RouteID: number, PathAttributeId: Array<number>, chartWidth: number, chartHeight: number, requestID: string): Promise<IntegratedRoute> {\n  setDataReceivingProgress(requestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(requestID, 'getRoute_1', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_0', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_1', 0, false);\n  setDataReceivingProgress(requestID, 'getLocation_0', 0, false);\n  setDataReceivingProgress(requestID, 'getLocation_1', 0, false);\n  setDataReceivingProgress(requestID, 'getSegmentBuffers_0', 0, false);\n  setDataReceivingProgress(requestID, 'getSegmentBuffers_1', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_0', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_1', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_0', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_1', 0, false);\n  setDataReceivingProgress(requestID, 'getBusData_0', 0, false);\n  setDataReceivingProgress(requestID, 'getBusData_1', 0, false);\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  const Stop = await getStop(requestID);\n  const SimplifiedLocation = (await getLocation(requestID, 0)) as SimplifiedLocation;\n  const MergedLocation = (await getLocation(requestID, 1)) as MergedLocation;\n  const IndexedLocation = (await getLocation(requestID, 2)) as IndexedLocation;\n  const SegmentBuffers = await getSegmentBuffers(requestID);\n  const EstimateTime = await getEstimateTime(requestID);\n  const BusEvent = await getBusEvent(requestID);\n  const BusData = await getBusData(requestID);\n  const BusArrivalTimes = await getBusArrivalTimes(chartWidth, chartHeight);\n\n  const batchFoundBuses = batchFindBusesForRoute(BusEvent, BusData, Route, RouteID, PathAttributeId);\n\n  let hasSegmentBuffers: boolean = false;\n  let thisSegmentBuffers: SimplifiedSegmentBufferItem = {};\n  if (SegmentBuffers.hasOwnProperty(`r_${RouteID}`)) {\n    hasSegmentBuffers = true;\n    thisSegmentBuffers = SegmentBuffers[`r_${RouteID}`];\n  }\n\n  const time_formatting_mode = getSettingOptionValue('time_formatting_mode') as number;\n\n  let result = [];\n  let positions = [];\n\n  for (const item of EstimateTime) {\n    let integratedStopItem = {} as integratedStopItem;\n\n    const thisRouteID = item.RouteID;\n\n    // Check whether this stop is on this route or not\n    if ([RouteID, RouteID * 10].includes(thisRouteID) || PathAttributeId.includes(thisRouteID)) {\n      // Parse estimate time\n      integratedStopItem.status = parseEstimateTime(item?.EstimateTime, time_formatting_mode);\n\n      // Collect data from 'Stop'\n      const thisStopKey = `s_${item.StopID}`;\n      let thisStop = {} as SimplifiedStopItem;\n      if (Stop.hasOwnProperty(thisStopKey)) {\n        thisStop = Stop[thisStopKey];\n      } else {\n        continue;\n      }\n      integratedStopItem.id = item.StopID;\n      integratedStopItem.sequence = thisStop.seqNo;\n      integratedStopItem.goBack = thisStop.goBack;\n\n      // Collect data from 'SimplifiedLocation'\n      const thisLocationKey = `l_${thisStop.stopLocationId}`;\n      let thisSimplifiedLocation = {} as SimplifiedLocationItem;\n      if (SimplifiedLocation.hasOwnProperty(thisLocationKey)) {\n        thisSimplifiedLocation = SimplifiedLocation[thisLocationKey];\n      } else {\n        continue;\n      }\n      integratedStopItem.name = thisSimplifiedLocation.n;\n      integratedStopItem.overlappingRoutes = thisSimplifiedLocation.r\n        .filter((id: number) => id !== RouteID)\n        .map((id: number) => {\n          const overlappingRouteKey = `r_${id}`;\n          if (Route.hasOwnProperty(overlappingRouteKey)) {\n            const overlappingRoute = Route[overlappingRouteKey] as SimplifiedRouteItem;\n            const formattedOverlappingRoute = {\n              name: overlappingRoute.n,\n              RouteEndPoints: {\n                RouteDeparture: overlappingRoute.dep,\n                RouteDestination: overlappingRoute.des,\n                text: `${overlappingRoute.dep} \\u2194 ${overlappingRoute.des}`, //u2194 -> '↔'\n                html: `<span>${overlappingRoute.dep}</span><span>\\u2194</span><span>${overlappingRoute.des}</span>`\n              },\n              RouteID: overlappingRoute.id,\n              PathAttributeId: overlappingRoute.pid\n            };\n            return formattedOverlappingRoute;\n          } else {\n            return null;\n          }\n        })\n        .filter((e) => {\n          return e !== null;\n        });\n      integratedStopItem.position = {\n        longitude: thisSimplifiedLocation.lo,\n        latitude: thisSimplifiedLocation.la\n      };\n      positions.push({\n        latitude: thisSimplifiedLocation.la,\n        longitude: thisSimplifiedLocation.lo,\n        id: item.StopID\n      });\n\n      // Collect data from 'IndexedLocation' and 'MergedLocation'\n      const thisSimplifiedLocationGeohash = thisSimplifiedLocation.g;\n      let thisIndexedLocationItem: Array<IndexedLocationItem> = [];\n      if (IndexedLocation.hasOwnProperty(thisSimplifiedLocationGeohash)) {\n        thisIndexedLocationItem = IndexedLocation[thisSimplifiedLocationGeohash];\n      }\n      let nearbyLocations: Array<integratedStopItemNearbyLocationItem> = [];\n      for (const item of thisIndexedLocationItem) {\n        const mergedLocationKey = `ml_${item.hash}`;\n        if (MergedLocation.hasOwnProperty(mergedLocationKey)) {\n          const thisMergedLocation = MergedLocation[mergedLocationKey];\n          const nearbyLocationItem: integratedStopItemNearbyLocationItem = {\n            name: thisMergedLocation.n,\n            distance: convertPositionsToDistance(thisMergedLocation.la[0], thisMergedLocation.lo[0], thisSimplifiedLocation.la, thisSimplifiedLocation.lo) | 0,\n            hash: thisMergedLocation.hash\n          };\n          nearbyLocations.push(nearbyLocationItem);\n        }\n      }\n      nearbyLocations.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n      integratedStopItem.nearbyLocations = nearbyLocations;\n\n      // Collect data from 'batchFoundBuses'\n      let buses = []; // as Array<FormattedBus>\n      for (const overlappingStopID of thisSimplifiedLocation.s) {\n        const overlappingStopKey = `s_${overlappingStopID}`;\n        if (batchFoundBuses.hasOwnProperty(overlappingStopKey)) {\n          buses.push(batchFoundBuses[overlappingStopKey].map((e) => formatBus(e)));\n        }\n      }\n      integratedStopItem.buses = buses.flat().sort(function (a, b) {\n        return a.index - b.index;\n      });\n\n      // Collect data from 'BusArrivalTimes'\n      let thisBusArrivalTimes = [];\n      if (BusArrivalTimes.hasOwnProperty(thisStopKey)) {\n        thisBusArrivalTimes = BusArrivalTimes[thisStopKey];\n      }\n      integratedStopItem.busArrivalTimes = thisBusArrivalTimes;\n\n      // Check whether this stop is segment buffer\n      let isSegmentBuffer: boolean = false;\n      let isStartingPoint: boolean = false;\n      let isEndingPoint: boolean = false;\n      let useReversed: boolean = false;\n      if (hasSegmentBuffers) {\n        const groupKey = `g_${integratedStopItem.goBack}`;\n        let segmentBufferGroup = [];\n\n        if (thisSegmentBuffers.hasOwnProperty(groupKey)) {\n          segmentBufferGroup = thisSegmentBuffers[groupKey];\n        } else {\n          if (integratedStopItem.goBack === '1') {\n            useReversed = true;\n            segmentBufferGroup = thisSegmentBuffers['g_0'];\n          }\n        }\n\n        for (const thisBufferZone of segmentBufferGroup) {\n          if (thisBufferZone.OriginStopID === item.StopID || thisBufferZone.DestinationStopID === item.StopID) {\n            isSegmentBuffer = true;\n          }\n          if (useReversed) {\n            if (thisBufferZone.OriginStopID === item.StopID) {\n              isEndingPoint = true;\n            }\n            if (thisBufferZone.DestinationStopID === item.StopID) {\n              isStartingPoint = true;\n            }\n          } else {\n            if (thisBufferZone.OriginStopID === item.StopID) {\n              isStartingPoint = true;\n            }\n            if (thisBufferZone.DestinationStopID === item.StopID) {\n              isEndingPoint = true;\n            }\n          }\n        }\n      }\n      integratedStopItem.segmentBuffer = {\n        isSegmentBuffer,\n        isStartingPoint,\n        isEndingPoint\n      };\n\n      result.push(integratedStopItem);\n    }\n  }\n\n  result.sort(function (a, b) {\n    return a.sequence - b.sequence;\n  });\n\n  const nearestPosition = getNearestPosition(positions, 450);\n\n  let isBufferZoneOpened: boolean = false;\n  let isBufferZoneClosed: boolean = false;\n\n  let groupedItems: { [key: string]: Array<integratedStopItem> } = {};\n  let groupQuantity: number = 0;\n  let itemQuantity: { [key: string]: number } = {};\n\n  const resultLength = result.length;\n\n  for (let index = 0; index < resultLength; index++) {\n    let item = result[index];\n    const nextItem = result[index + 1] || item;\n    let progress = 0;\n\n    if (item.buses.length > 0) {\n      if (item.buses[0].onThisRoute) {\n        const [x, y] = [item.buses[0].position.longitude, item.buses[0].position.latitude];\n        const [x1, y1] = [item.position.longitude, item.position.latitude];\n        const [x2, y2] = [nextItem.position.longitude, nextItem.position.latitude];\n        const dotProduct = (x - x1) * (x2 - x) + (y - y1) * (y2 - y);\n        if (dotProduct >= 0) {\n          // ensure that (x, y) is between (x1, y1) and (x2, y2)\n          const distance1 = Math.hypot(x - x1, y - y1);\n          const distance2 = Math.hypot(x - x2, y - y2);\n          progress = Math.max(0, Math.min(distance1 / (distance1 + distance2), 1));\n        }\n      }\n    }\n    item.progress = progress;\n\n    if (item.segmentBuffer.isStartingPoint) {\n      isBufferZoneOpened = true;\n    }\n\n    if (item.segmentBuffer.isEndingPoint) {\n      if (isBufferZoneOpened) {\n        isBufferZoneClosed = true;\n      }\n    }\n\n    if (isBufferZoneOpened && !isBufferZoneClosed) {\n      item.segmentBuffer.isSegmentBuffer = true;\n    }\n\n    if (isBufferZoneOpened && isBufferZoneClosed) {\n      isBufferZoneOpened = false;\n      isBufferZoneClosed = false;\n    }\n\n    let isNearest = false;\n    if (nearestPosition !== null) {\n      if (nearestPosition.id === item.id) {\n        isNearest = true;\n      }\n    }\n    item.nearest = isNearest;\n\n    const groupKey = `g_${item.goBack}` || 'g_0';\n\n    if (!groupedItems.hasOwnProperty(groupKey)) {\n      groupedItems[groupKey] = [];\n      itemQuantity[groupKey] = 0;\n      groupQuantity += 1;\n    }\n\n    groupedItems[groupKey].push(item);\n    itemQuantity[groupKey] += 1;\n  }\n\n  const thisRoute = Route[`r_${RouteID}`];\n  const thisRouteName = thisRoute.n;\n  const thisRouteDeparture = thisRoute.dep;\n  const thisRouteDestination = thisRoute.des;\n\n  const result2: IntegratedRoute = {\n    groupedItems: groupedItems,\n    groupQuantity: groupQuantity,\n    itemQuantity: itemQuantity,\n    RouteName: thisRouteName,\n    RouteEndPoints: {\n      RouteDeparture: thisRouteDeparture,\n      RouteDestination: thisRouteDestination\n    },\n    dataUpdateTime: getDataUpdateTime(requestID),\n    RouteID,\n    PathAttributeId\n  };\n\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  // await recordEstimateTimeForUpdateRate(EstimateTime);\n  return result2;\n}\n","import { MaterialSymbols } from '../../interface/icons/material-symbols-type';\nimport { dateToString, dateValueToDayOfWeek, getThisWeekOrigin, offsetDate } from '../../tools/time';\nimport { getProvider, Provider, ProviderItem } from '../apis/getProvider/index';\nimport { getRoute, Route, RouteItem } from '../apis/getRoute/index';\nimport { getSemiTimeTable } from '../apis/getSemiTimeTable/index';\nimport { getTimeTable } from '../apis/getTimeTable/index';\nimport { parseTimeCode, TimeMoment, TimeRange } from '../apis/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime } from '../apis/loader';\n\nfunction findRoute(Route: Route, RouteID: number): RouteItem {\n  let thisRoute = {} as RouteItem;\n  for (const item of Route) {\n    if (item.Id === RouteID) {\n      thisRoute = item;\n      break;\n    }\n  }\n  return thisRoute;\n}\n\nfunction findProvider(Provider: Provider, providerId: number): ProviderItem {\n  let thisProvider = {} as ProviderItem;\n  for (const item of Provider) {\n    if (item.id === providerId) {\n      thisProvider = item;\n    }\n  }\n  return thisProvider;\n}\n\nexport interface CalendarEvent {\n  date: Date;\n  dateString: string;\n  duration: number;\n  deviation: number;\n}\n\nexport type CalendarEventGroup = Array<CalendarEvent>;\n\nexport interface CalendarDay {\n  name: string;\n  day: number;\n  code: string;\n}\n\nexport interface Calendar {\n  calendarDays: {\n    [key: string]: CalendarDay;\n  };\n  calendarDayQuantity: 7;\n  calendarEventGroups: {\n    [key: string]: CalendarEventGroup;\n  };\n  calendarEventQuantity: {\n    [key: string]: number;\n  };\n}\n\nfunction generateCalendarFromTimeTables(RouteID: number, PathAttributeId: Array<number>, timeTableRules: object, SemiTimeTable: [], TimeTable: []): Calendar {\n  let calendar: Calendar = {\n    calendarDays: {\n      d_0: {\n        name: '日',\n        day: 0,\n        code: 'd_0'\n      },\n      d_1: {\n        name: '一',\n        day: 1,\n        code: 'd_1'\n      },\n      d_2: {\n        name: '二',\n        day: 2,\n        code: 'd_2'\n      },\n      d_3: {\n        name: '三',\n        day: 3,\n        code: 'd_3'\n      },\n      d_4: {\n        name: '四',\n        day: 4,\n        code: 'd_4'\n      },\n      d_5: {\n        name: '五',\n        day: 5,\n        code: 'd_5'\n      },\n      d_6: {\n        name: '六',\n        day: 6,\n        code: 'd_6'\n      }\n    },\n    calendarDayQuantity: 7,\n    calendarEventGroups: {\n      d_0: [],\n      d_1: [],\n      d_2: [],\n      d_3: [],\n      d_4: [],\n      d_5: [],\n      d_6: []\n    },\n    calendarEventQuantity: {\n      d_0: 0,\n      d_1: 0,\n      d_2: 0,\n      d_3: 0,\n      d_4: 0,\n      d_5: 0,\n      d_6: 0\n    }\n  };\n  const thisWeekOrigin = getThisWeekOrigin();\n  for (const item of SemiTimeTable) {\n    if (PathAttributeId.indexOf(item.PathAttributeId) > -1) {\n      if (item.DateType === '0') {\n        const dayOfWeek = dateValueToDayOfWeek(item.DateValue);\n        const thisDayOrigin = offsetDate(thisWeekOrigin, dayOfWeek.day, 0, 0);\n        const thisPeriodStartTime = parseTimeCode(item.StartTime, 0);\n        const thisPeriodStartTimeDateObject = offsetDate(thisDayOrigin, 0, thisPeriodStartTime.hours, thisPeriodStartTime.minutes);\n        const thisPeriodEndTime = parseTimeCode(item.EndTime, 0);\n        const thisPeriodEndTimeDateObject = offsetDate(thisDayOrigin, 0, thisPeriodEndTime.hours, thisPeriodEndTime.minutes);\n        const thisPeriodDurationInMinutes = Math.abs(thisPeriodEndTime.hours * 60 + thisPeriodEndTime.minutes - (thisPeriodStartTime.hours * 60 + thisPeriodStartTime.minutes));\n\n        const minWindow = parseInt(item.LongHeadway);\n        const maxWindow = parseInt(item.LowHeadway);\n        const averageWindow = (maxWindow + minWindow) / 2;\n        const headwayQuantity = thisPeriodDurationInMinutes / averageWindow;\n\n        for (let i = 0; i < headwayQuantity; i++) {\n          let violateRules = false;\n          const thisHeadwayDate = offsetDate(thisDayOrigin, 0, thisPeriodStartTime.hours, thisPeriodStartTime.minutes + maxWindow * i);\n          if (thisHeadwayDate.getTime() < thisPeriodStartTimeDateObject.getTime()) {\n            violateRules = true;\n          }\n          if (thisHeadwayDate.getTime() > thisPeriodEndTimeDateObject.getTime()) {\n            violateRules = true;\n          }\n          // TODO: check timeTableRules\n          if (violateRules === false) {\n            calendar.calendarEventGroups[dayOfWeek.code].push({\n              date: thisHeadwayDate,\n              dateString: dateToString(thisHeadwayDate, 'hh:mm'),\n              duration: maxWindow,\n              deviation: Math.abs(averageWindow - maxWindow)\n            });\n            calendar.calendarEventQuantity[dayOfWeek.code] += 1;\n          }\n        }\n      }\n    }\n  }\n  for (const item of TimeTable) {\n    if (PathAttributeId.indexOf(item.PathAttributeId) > -1) {\n      if (item.DateType === '0') {\n        let violateRules = false;\n        const dayOfWeek = dateValueToDayOfWeek(item.DateValue);\n        const thisDayOrigin = offsetDate(thisWeekOrigin, dayOfWeek.day, 0, 0);\n        const thisDepartureTime = parseTimeCode(item.DepartureTime, 0);\n        const thisHeadwayDate = offsetDate(thisDayOrigin, 0, thisDepartureTime.hours, thisDepartureTime.minutes);\n        // TODO: check timeTableRules\n        if (violateRules === false) {\n          calendar.calendarEventGroups[dayOfWeek.code].push({\n            date: thisHeadwayDate,\n            dateString: dateToString(thisHeadwayDate, 'hh:mm'),\n            duration: 15,\n            deviation: 0\n          });\n          calendar.calendarEventQuantity[dayOfWeek.code] += 1;\n        }\n      }\n    }\n  }\n  for (const code in calendar.calendarEventGroups) {\n    calendar.calendarEventGroups[code].sort(function (a, b) {\n      return a.date.getTime() - b.date.getTime();\n    });\n  }\n  return calendar;\n}\n\nexport interface TimeTableRules {\n  go: {\n    weekday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n    holiday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n  };\n  back: {\n    weekday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n    holiday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n  };\n  realSequence: any;\n}\n\nfunction getTimeTableRules(thisRoute: RouteItem): TimeTableRules {\n  const thisRouteGoFirstBusTime = parseTimeCode(thisRoute.goFirstBusTime, 0);\n  const thisRouteGoLastBusTime = parseTimeCode(thisRoute.goLastBusTime, 0);\n\n  const thisRouteBackFirstBusTime = parseTimeCode(thisRoute.backFirstBusTime, 0);\n  const thisRouteBackLastBusTime = parseTimeCode(thisRoute.backLastBusTime, 0);\n\n  const thisRouteGoFirstBusTimeOnHoliday = parseTimeCode(thisRoute.holidayGoFirstBusTime, 0);\n  const thisRouteGoLastBusTimeOnHoliday = parseTimeCode(thisRoute.holidayGoLastBusTime, 0);\n\n  const thisRouteBackFirstBusTimeOnHoliday = parseTimeCode(thisRoute.holidayBackFirstBusTime, 0);\n  const thisRouteBackLastBusTimeOnHoliday = parseTimeCode(thisRoute.holidayBackLastBusTime, 0);\n\n  const rushHourWindow = parseTimeCode(thisRoute.peakHeadway, 1);\n  const offRushHourWindow = parseTimeCode(thisRoute.offPeakHeadway, 1);\n\n  const rushHourWindowOnHoliday = parseTimeCode(thisRoute.holidayPeakHeadway, 1);\n  const offRushHourWindowOnHoliday = parseTimeCode(thisRoute.holidayOffPeakHeadway, 1);\n  // window → the interval/gap between arrivals of buses\n\n  const realSequence = thisRoute.realSequence;\n  return {\n    go: {\n      weekday: {\n        first: thisRouteGoFirstBusTime,\n        last: thisRouteGoLastBusTime,\n        rushHourWindow: rushHourWindow,\n        offRushHourWindow: offRushHourWindow\n      },\n      holiday: {\n        first: thisRouteGoFirstBusTimeOnHoliday,\n        last: thisRouteGoLastBusTimeOnHoliday,\n        rushHourWindow: rushHourWindowOnHoliday,\n        offRushHourWindow: offRushHourWindowOnHoliday\n      }\n    },\n    back: {\n      weekday: {\n        first: thisRouteBackFirstBusTime,\n        last: thisRouteBackLastBusTime,\n        rushHourWindow: rushHourWindow,\n        offRushHourWindow: offRushHourWindow\n      },\n      holiday: {\n        first: thisRouteBackFirstBusTimeOnHoliday,\n        last: thisRouteBackLastBusTimeOnHoliday,\n        rushHourWindow: rushHourWindowOnHoliday,\n        offRushHourWindow: offRushHourWindowOnHoliday\n      }\n    },\n    realSequence: realSequence\n  };\n}\n\nexport interface integratedRouteDetailsProperty {\n  key: string;\n  icon: MaterialSymbols;\n  value: string;\n}\n\nexport type integratedRouteDetailsProperties = Array<integratedRouteDetailsProperty>;\n\nexport interface integratedRouteDetails {\n  timeTableRules: TimeTableRules;\n  calendar: Calendar;\n  properties: integratedRouteDetailsProperties;\n}\n\nexport async function integrateRouteDetails(RouteID: number, PathAttributeId: Array<number>, requestID: string): Promise<integratedRouteDetails> {\n  const Route = (await getRoute(requestID, false)) as Route;\n  const thisRoute = findRoute(Route, RouteID);\n\n  const SemiTimeTable = await getSemiTimeTable(requestID);\n  const TimeTable = await getTimeTable(requestID);\n  const Provider = await getProvider(requestID);\n  const timeTableRules = getTimeTableRules(thisRoute);\n  const calendar = generateCalendarFromTimeTables(RouteID, PathAttributeId, timeTableRules, SemiTimeTable, TimeTable);\n  const thisProviderId = thisRoute.providerId;\n  const thisProvider = findProvider(Provider, thisProviderId);\n\n  const result: integratedRouteDetails = {\n    timeTableRules: timeTableRules,\n    calendar: calendar,\n    properties: [\n      {\n        key: 'route_name',\n        icon: 'route',\n        value: thisRoute.nameZh\n      },\n      {\n        key: 'pricing',\n        icon: 'attach_money',\n        value: thisRoute.ticketPriceDescriptionZh\n      },\n      {\n        key: 'provider_name',\n        icon: 'corporate_fare',\n        value: thisProvider.nameZn\n      },\n      {\n        key: 'provider_phone',\n        icon: 'call',\n        value: thisProvider.phoneInfo\n      },\n      {\n        key: 'provider_email',\n        icon: 'alternate_email',\n        value: thisProvider.email\n      }\n    ]\n  };\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  return result;\n}\n"],"names":["integrateRoute","_x","_x2","_x3","_x4","_x5","_integrateRoute","apply","arguments","RouteID","PathAttributeId","chartWidth","chartHeight","requestID","setDataReceivingProgress","Route","getRoute","Stop","getStop","SimplifiedLocation","getLocation","MergedLocation","IndexedLocation","SegmentBuffers","getSegmentBuffers","EstimateTime","getEstimateTime","BusEvent","getBusEvent","BusData","getBusData","BusArrivalTimes","getBusArrivalTimes","batchFoundBuses","batchFindBusesForRoute","hasSegmentBuffers","thisSegmentBuffers","hasOwnProperty","_step","time_formatting_mode","getSettingOptionValue","result","positions","_iterator","_createForOfIteratorHelper","s","n","done","item","value","integratedStopItem","thisRouteID","includes","status","parseEstimateTime","thisStopKey","StopID","thisStop","id","sequence","seqNo","goBack","thisLocationKey","stopLocationId","thisSimplifiedLocation","name","overlappingRoutes","r","filter","map","overlappingRouteKey","overlappingRoute","RouteEndPoints","RouteDeparture","dep","RouteDestination","des","text","html","pid","e","position","longitude","lo","latitude","la","push","thisSimplifiedLocationGeohash","g","thisIndexedLocationItem","_step2","nearbyLocations","_iterator2","mergedLocationKey","hash","thisMergedLocation","nearbyLocationItem","distance","convertPositionsToDistance","err","f","sort","a","b","_step3","buses","_iterator3","overlappingStopKey","formatBus","flat","index","thisBusArrivalTimes","busArrivalTimes","isSegmentBuffer","isStartingPoint","isEndingPoint","useReversed","groupKey","segmentBufferGroup","_step4","_iterator4","thisBufferZone","OriginStopID","DestinationStopID","segmentBuffer","nearestPosition","getNearestPosition","isBufferZoneOpened","isBufferZoneClosed","groupedItems","groupQuantity","itemQuantity","resultLength","length","nextItem","progress","onThisRoute","_ref","x","y","_ref2","x1","y1","_ref3","x2","y2","distance1","Math","hypot","distance2","max","min","isNearest","nearest","thisRoute","result2","RouteName","dataUpdateTime","getDataUpdateTime","deleteDataReceivingProgress","deleteDataUpdateTime","integrateRouteDetails","_integrateRouteDetails","Id","findRoute","SemiTimeTable","getSemiTimeTable","TimeTable","getTimeTable","Provider","getProvider","timeTableRules","thisRouteGoFirstBusTime","parseTimeCode","goFirstBusTime","thisRouteGoLastBusTime","goLastBusTime","thisRouteBackFirstBusTime","backFirstBusTime","thisRouteBackLastBusTime","backLastBusTime","thisRouteGoFirstBusTimeOnHoliday","holidayGoFirstBusTime","thisRouteGoLastBusTimeOnHoliday","holidayGoLastBusTime","thisRouteBackFirstBusTimeOnHoliday","holidayBackFirstBusTime","thisRouteBackLastBusTimeOnHoliday","holidayBackLastBusTime","rushHourWindow","peakHeadway","offRushHourWindow","offPeakHeadway","rushHourWindowOnHoliday","holidayPeakHeadway","offRushHourWindowOnHoliday","holidayOffPeakHeadway","go","weekday","first","last","holiday","back","realSequence","getTimeTableRules","calendar","calendarDays","d_0","day","code","d_1","d_2","d_3","d_4","d_5","d_6","calendarDayQuantity","calendarEventGroups","calendarEventQuantity","thisWeekOrigin","getThisWeekOrigin","indexOf","DateType","dayOfWeek","dateValueToDayOfWeek","DateValue","thisDayOrigin","offsetDate","thisPeriodStartTime","StartTime","thisPeriodStartTimeDateObject","hours","minutes","thisPeriodEndTime","EndTime","thisPeriodEndTimeDateObject","thisPeriodDurationInMinutes","abs","minWindow","parseInt","LongHeadway","maxWindow","LowHeadway","averageWindow","headwayQuantity","i","violateRules","thisHeadwayDate","getTime","date","dateString","dateToString","duration","deviation","thisDepartureTime","DepartureTime","generateCalendarFromTimeTables","thisProvider","providerId","findProvider","properties","key","icon","nameZh","ticketPriceDescriptionZh","nameZn","phoneInfo","email"],"sourceRoot":""}