{"version":3,"file":"a50f825c198f932e16ab.js","mappings":"gmDA6BO,SAASA,EAAsBC,GACpC,IAAMC,EAA4B,CAChC,CACEC,SAAU,IACVC,IAAK,OACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOA,EAAEC,MACX,GAEJ,EACAC,KAAM,GAER,CACEP,SAAU,IACVC,IAAK,WACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOA,EAAEC,MACX,GAEJ,EACAC,KAAM,GAER,CACEP,SAAU,OACVC,IAAK,OACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOA,EAAEC,MACX,GAEJ,EACAC,KAAM,GAER,CACEP,SAAU,MACVC,IAAK,OACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOA,EAAEG,WAAW,cAAiB,IAAIF,MAC3C,GAEJ,EACAC,KAAM,GAER,CACEP,SAAU,IACVC,IAAK,eACLC,QAAS,SAAUC,GAyCjB,IAxCA,IAAIM,EAAW,SAAUC,GACvB,OAAQA,GACN,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,EAET,IAAK,IACH,OAAO,GAGX,OAAKC,MAAMC,SAASF,IAGb,EAFEE,SAASF,EAGpB,EACIG,EAAMC,OAAOX,GAAGY,OAChBC,EAAU,GACLC,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,IAAIC,EAAIT,EAASK,OAAOX,GAAGgB,OAAOF,IACxB,KAANC,EACEF,EAAQD,OAAS,IACnBC,EAAU,CAAsC,GAArCA,EAAQI,QAAO,SAACC,EAAGC,GAAC,OAAKD,EAAIC,CAAC,GAAE,KAG7CN,EAAU,CAACA,EAAQI,QAAO,SAACC,EAAGC,GAAC,OAAKD,EAAIC,CAAC,GAAE,GAAKJ,EAEpD,CACA,OAAOF,CACT,EACAT,KAAM,GAER,CACEP,SAAU,IACVC,IAAK,QACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOO,SAASP,EAAEC,OAAOE,WAAW,UACtC,GAEJ,EACAD,KAAM,GAER,CACEP,SAAU,IACVC,IAAK,eACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOO,SAASP,EAAEC,OAAOE,WAAW,UACtC,GAEJ,EACAD,KAAM,GAER,CACEP,SAAU,IACVC,IAAK,YACLC,QAAS,SAAUC,GAAG,IAAAoB,EAChBP,EAAUF,OAAOX,GAAGqB,MAAM,aAS9B,OARAR,GACS,QAAPO,EAAAP,SAAO,IAAAO,OAAA,EAAPA,EAASnB,KAAI,SAACqB,GACZ,OAAU,OAANA,EACK,KAEAb,SAASa,EAEpB,MAAM,IAEV,EACAlB,KAAM,GAER,CACEP,SAAU,IACVC,IAAK,cACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOA,EAAEC,MACX,GAEJ,EACAC,KAAM,GAER,CACEN,IAAK,OACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOA,EAAEC,MACX,GAEJ,EACAC,KAAM,GAER,CACEN,IAAK,YACLC,QAAS,SAAUC,GACjB,OAAU,OAANA,EACK,KAEAA,EAAEC,KAAI,SAACC,GACZ,OAAOA,EAAEC,OAAOoB,QAAQ,UAAW,GACrC,GAEJ,EACAnB,KAAM,IAIV,SAASoB,EAAaC,GAapB,IADA,IAXe5B,EAAUO,EAWrBsB,EAAS,CAAC,EACdC,EAAA,EAAAC,EAAiBhC,EAAK+B,EAAAC,EAAAhB,OAAAe,IAAE,KAAAE,EAAfC,EAAIF,EAAAD,GACPI,GAbSlC,EAaK,QAALgC,EAACC,SAAI,IAAAD,OAAA,EAAJA,EAAMhC,SAZP,KADUO,EAaO0B,EAAK1B,MAX1B,IAAI4B,OAAO,wBAADC,OAAyBpC,EAAQ,MAAM,OAE7C,IAATO,EACK,IAAI4B,OAAO,gBAAiB,OAExB,IAAT5B,EACK,IAAI4B,OAAO,gBAAiB,YADrC,GAOAN,EAAOI,EAAKhC,KAAOgC,EAAK/B,QAAQY,OAAOc,GAASJ,MAAMU,GACxD,CACA,OAAOL,CACT,CA0BA,OAxBA,SAAwB/B,GACtB,IAC6BuC,EADzBR,EAAS,CAAC,EAAES,EAAAC,EACIzC,GAAS,IAA7B,IAAAwC,EAAAE,MAAAH,EAAAC,EAAAb,KAAAgB,MAEE,IAF6B,IACzBC,EAAgBf,EADNU,EAAAM,OAEdC,EAAA,EAAAC,EAAiB9C,EAAK6C,EAAAC,EAAA9B,OAAA6B,IAAE,CAAnB,IAAIX,EAAIY,EAAAD,GACNf,EAAOiB,eAAeb,EAAKhC,OAC9B4B,EAAOI,EAAKhC,KAAO,IAErB4B,EAAOI,EAAKhC,KAAO4B,EAAOI,EAAKhC,KAAKmC,OAAOM,EAAcT,EAAKhC,KAChE,CACD,OAAA8C,GAAAT,EAAAnC,EAAA4C,EAAA,SAAAT,EAAAU,GAAA,CACD,IAAK,IAAI/C,KAAO4B,EACdA,EAAO5B,GAAOgD,MAAMC,KAAK,IAAIC,IAAItB,EAAO5B,KACrCmD,QAAO,SAACjD,GAAC,QAAMA,CAAgB,IAC/BkD,MAAK,SAAUhC,EAAGC,GACjB,MAAiB,iBAAND,GAA+B,iBAANC,EAC3BD,EAAIC,EAEJR,OAAOO,GAAGiC,WAAW,GAAKxC,OAAOQ,GAAGgC,WAAW,EAE1D,IAEJ,OAAOzB,CACT,CACO0B,CAAezD,EACxB,CAEO,SAAS0D,EAAgB5B,GAC9B,MAAO,GAAPQ,OAAUR,EAAQ6B,KAAKC,KAAK,KAAGtB,OAAGR,EAAQ+B,SAASD,KAAK,KAAGtB,OAAGR,EAAQgC,KAAKF,KAAK,MAAItB,OAClFR,EAAQiC,aAAaR,MAAK,SAAUhC,EAAGC,GACrC,OAAOD,EAAIC,CACb,IAAGP,OAAS,EACRa,EAAQiC,aAAaH,KAAK,KAAO,IACjC,IAAEtB,OAENR,EAAQkC,MAAM/C,OAAS,EACnBa,EAAQkC,MACLT,MAAK,SAAUhC,EAAGC,GACjB,OAAOD,EAAIC,CACb,IACCoC,KAAK,KAAO,IACf,IAAEtB,OAENR,EAAQmC,aAAahD,OAAS,EAC1Ba,EAAQmC,aACLV,MAAK,SAAUhC,EAAGC,GACjB,OAAOD,EAAIC,CACb,IACCoC,KAAK,KAAO,IACf,IAAEtB,OAENR,EAAQoC,UAAUjD,OAAS,EACvBa,EAAQoC,UACLX,MAAK,SAAUhC,EAAGC,GACjB,OAAOD,EAAIC,CACb,IACCoC,KAAK,KAAO,IACf,IAAEtB,OACLR,EAAQqC,YAAYlD,OAAS,EAAIa,EAAQqC,YAAYP,KAAK,KAAO,IAAM,IAAEtB,OAAGR,EAAQsC,UAAUnD,OAAS,EAAI,KAAOa,EAAQsC,UAAUR,KAAK,KAAO,IAAM,GAC3J,CAEO,SAASS,EAAmCrE,GAEjD,IAM+BsE,EANzBC,EAAoF,CAAC,EAGrFC,EAAgB,IAAInB,IAE1BoB,EAAAhC,EACsBzC,GAAS,IAA/B,IAAAyE,EAAA/B,MAAA4B,EAAAG,EAAA9C,KAAAgB,MAAiC,KAAtBb,EAAOwC,EAAAzB,MAEV6B,EAAW1D,OAAOc,GACrB6C,MAAM,IACNrB,QAAO,SAACsB,GAAO,MAAwB,KAAnBA,EAAQpE,MAAa,IAGtCqE,EAAoBH,EAASd,KAAK,IAGxCY,EAAcM,IAAID,GAGlB,IAC8BE,EAD1BC,EAAQ,EAAEC,EAAAxC,EACQiC,GAAQ,IAA9B,IAAAO,EAAAvC,MAAAqC,EAAAE,EAAAtD,KAAAgB,MAAgC,KAArBiC,EAAOG,EAAAlC,MAEhB,GAAKhC,MAAMC,SAAS8D,IAQb,KAAAM,EAECC,EAAa,SAAH7C,OAAY0C,EAAK,KAAA1C,OAAIsC,EAAQpB,WAAW,IACxDe,EAAcY,GAAc,CAC1BC,QAAiC,QAAzBF,EAAAX,EAAcY,UAAW,IAAAD,OAAA,EAAzBA,EAA2BE,QAAS,GAAK,EACjDC,MAAOT,EACPI,MAAOA,EAEX,KAhB+B,KAAAM,EAEvBC,EAAW,SAAHjD,OAAY0C,EAAK,KAAA1C,OAAIsC,EAAQpB,WAAW,IACtDe,EAAcgB,GAAY,CACxBH,QAA+B,QAAvBE,EAAAf,EAAcgB,UAAS,IAAAD,OAAA,EAAvBA,EAAyBF,QAAS,GAAK,EAC/CC,MAAOT,EACPI,MAAOA,EAEX,CASAA,GAAS,CACX,CAAC,OAAA/B,GAAAgC,EAAA5E,EAAA4C,EAAA,SAAAgC,EAAA/B,GAAA,CACH,CAEA,OAAAD,GAAAwB,EAAApE,EAAA4C,EAAA,SAAAwB,EAAAvB,GAAA,CACA,IAAMsC,EAA+B,GAAnBxF,EAAUiB,OACtBwE,EAA2B,EAAnBzF,EAAUiB,OAUxB,OAPuByE,OAAOC,QAAQpB,GACnCjB,QAAO,SAACsC,GAAI,OAAKJ,GAAaI,EAAK,GAAGR,OAASQ,EAAK,GAAGR,OAASK,CAAK,IACrElC,MAAK,SAAChC,EAAGC,GAAC,OAAKD,EAAE,GAAGyD,MAAQxD,EAAE,GAAGwD,KAAK,IAGH1E,KAAI,SAACsF,GAAI,OAAKA,EAAK,GAAGP,KAAK,IAE3CzB,KAAK,GAC7B,CAEO,SAASiC,EAA2B7F,GACzC,IAE+B8F,EAF3B/D,EAAS,GACTgE,EAAmB,CAAC,EAAEC,EAAAvD,EACJzC,GAAS,IAA/B,IAAAgG,EAAAtD,MAAAoD,EAAAE,EAAArE,KAAAgB,MAAiC,KAAtBb,EAAOgE,EAAAjD,MAChB,IAAK,IAAM1C,KAAO2B,EACXiE,EAAiB/C,eAAe7C,KACnC4F,EAAiB5F,GAAO,GAEtB2B,EAAQ3B,GAAKc,OAAS,IACxB8E,EAAiB5F,GAAO4F,EAAiB5F,GAAO,EAGtD,CAAC,OAAA8C,GAAA+C,EAAA3F,EAAA4C,EAAA,SAAA+C,EAAA9C,GAAA,CACD,IAAI+C,EAAmBP,OAAOC,QAAQI,GACnCzF,KAAI,SAAC4F,GACJ,MAAO,CAAE/F,IAAK+F,EAAS,GAAIrD,MAAOqD,EAAS,GAC7C,IACC5C,QAAO,SAACjD,GACP,OAAOA,EAAEwC,QAAU7C,EAAUiB,MAC/B,IACCsC,MAAK,SAAUhC,EAAGC,GACjB,OAAOD,EAAEsB,MAAQrB,EAAEqB,KACrB,IACF,GAAIoD,EAAiBhF,OAAS,EAAG,KACckF,EADdC,EAAA3D,EACFwD,GAAgB,IAA7C,IAAAG,EAAA1D,MAAAyD,EAAAC,EAAAzE,KAAAgB,MAA+C,KAEd0D,EAFtBC,EAAcH,EAAAtD,MACnB0D,EAAa,GAAGC,EAAA/D,EACEzC,GAAS,IAA/B,IAAAwG,EAAA9D,MAAA2D,EAAAG,EAAA7E,KAAAgB,MAAiC,KAAtBb,EAAOuE,EAAAxD,MAChB0D,EAAWE,KAAK3E,EAAQwE,EAAenG,KAAKyD,KAAK,IACnD,CAAC,OAAAX,GAAAuD,EAAAnG,EAAA4C,EAAA,SAAAuD,EAAAtD,GAAA,EACGwD,EAAAA,EAAAA,mBAAkBH,IACpBxE,EAAO0E,KAAK,CAAEF,WAAYA,EAAYxF,IAAK4F,KAAKC,IAAGC,MAARF,KAAIG,EAAQP,EAAWjG,KAAI,SAACD,GAAC,OAAKA,EAAEY,MAAM,OAEzF,CAAC,OAAAgC,GAAAmD,EAAA/F,EAAA4C,EAAA,SAAAmD,EAAAlD,GAAA,CACH,CAEA,GAAInB,EAAOd,OAAS,EAIlB,OAHAc,EAASA,EAAOwB,MAAK,SAAUhC,EAAGC,GAChC,OAAOD,EAAER,IAAMS,EAAET,GACnB,KACc,GAAGwF,WAEjB,IAAMQ,EAAkB/G,EAAUiB,OAClC,OAAO+F,EAAAA,EAAAA,sBAAqBD,EAEhC,C,sgCCxZO,SAASE,EAAiBC,GAI/B,IAHA,IAAMnF,EAAyC,GAC3CoF,EAAwC,GAEnChG,EAAI,EAAGA,EAAI+F,EAAKjG,OAAQE,IACrB,IAANA,GAAW+F,EAAK/F,GAAG,GAAK+F,EAAK/F,EAAI,GAAG,GAAK,GACvCgG,EAAalG,OAAS,GACxBc,EAAO0E,KAAKU,GAEdA,EAAe,CAACD,EAAK/F,KAErBgG,EAAaV,KAAKS,EAAK/F,IAQ3B,OAJIgG,EAAalG,OAAS,GACxBc,EAAO0E,KAAKU,GAGPpF,CACT,CAEO,SAAS2E,EAAkBU,GAChC,IAAK,IAAIjG,EAAI,EAAGA,EAAIiG,EAAInG,OAAQE,IAC9B,IAAK,IAAIkG,EAAIlG,EAAI,EAAGkG,EAAID,EAAInG,OAAQoG,IAClC,GAAID,EAAIjG,KAAOiG,EAAIC,GACjB,OAAO,EAIb,OAAO,CACT,CASO,SAASC,EAAgBC,EAAeC,GAC7C,IAAIzF,EAAS,GACb,GAAIwF,EAAOtG,QAAUuG,EAAOvG,OAAQ,KACTsB,EADSC,EAAAC,EACf8E,GAAM,IAAzB,IAAA/E,EAAAE,MAAAH,EAAAC,EAAAb,KAAAgB,MAA2B,KAAhB8E,EAAIlF,EAAAM,MACT2E,EAAOE,QAAQD,IAAS,GAC1B1F,EAAO0E,KAAKgB,EAEhB,CAAC,OAAAxE,GAAAT,EAAAnC,EAAA4C,EAAA,SAAAT,EAAAU,GAAA,CACH,KAAO,KACoBoB,EADpBG,EAAAhC,EACc+E,GAAM,IAAzB,IAAA/C,EAAA/B,MAAA4B,EAAAG,EAAA9C,KAAAgB,MAA2B,KAAhB8E,EAAInD,EAAAzB,MACT0E,EAAOG,QAAQD,IAAS,GAC1B1F,EAAO0E,KAAKgB,EAEhB,CAAC,OAAAxE,GAAAwB,EAAApE,EAAA4C,EAAA,SAAAwB,EAAAvB,GAAA,CACH,CACA,OAAOnB,CACT,C,qGCjEO,SAAS4F,EAA2BC,EAAcC,EAAcC,EAAcC,GACnF,IACMC,EAAQF,EAAOnB,KAAKsB,GAAM,IAAOL,EAAOjB,KAAKsB,GAAM,IACnDC,EAAQH,EAAOpB,KAAKsB,GAAM,IAAOJ,EAAOlB,KAAKsB,GAAM,IACnD1G,EAAIoF,KAAKwB,IAAIH,EAAO,GAAKrB,KAAKwB,IAAIH,EAAO,GAAKrB,KAAKyB,IAAKR,EAAOjB,KAAKsB,GAAM,KAAOtB,KAAKyB,IAAKN,EAAOnB,KAAKsB,GAAM,KAAOtB,KAAKwB,IAAID,EAAO,GAAKvB,KAAKwB,IAAID,EAAO,GAG/J,OAAW,KAND,UAIA,EAAIvB,KAAK0B,MAAM1B,KAAK2B,KAAK/G,GAAIoF,KAAK2B,KAAK,EAAI/G,KAGvD,CAEO,SAASgH,EAAaC,GAI3B,IAHA,IAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC9DtH,EAAI,EAEDqH,GAAiB,MAAQrH,EAAIsH,EAAMxH,OAAS,GACjDuH,GAAiB,KACjBrH,IAGF,MAAO,GAAPmB,OAAUkG,EAAcE,QAAQ,GAAE,KAAApG,OAAImG,EAAMtH,GAC9C,CAEO,SAASwH,EAAuBC,GAErC,IADA,IAAI7G,EAAS,GACN6G,EAAS,GAAG,CACjB,IAAIC,GAAaD,EAAS,GAAK,GAE/B7G,EADaf,OAAO8H,aAAaD,EAAY,IAC3B9G,EAClB6G,EAASjC,KAAKoC,OAAOH,EAAS,GAAK,GACrC,CACA,OAAO7G,CACT,C,uSC/BO,IAAMiH,EAAMC,EAAQ,MAEpB,SAASC,EAAc3H,EAAQC,GACpC,SAAS2H,EAAYC,GACnB,OAAOC,KAAKC,UAAU,CAAEjJ,EAAG+I,GAC7B,CACA,IAAMG,EAAKJ,EAAY5H,GACjBiI,EAAKL,EAAY3H,GAEjBiI,EAAmBF,EAAGtI,OACtByI,EAAmBF,EAAGvI,OAC5B,GAAIwI,IAAaC,EAAU,CACzB,GAAID,EAJiB,IAIIC,EAJJ,GAIuB,CAK1C,IAJA,IAAMC,EAAiBX,EAAIO,GACrBK,EAAiBZ,EAAIQ,GAEvBK,GAAiB,EACZ1I,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAG1B,GAFoBwI,EAAOtI,OAAOF,KACdyI,EAAOvI,OAAOF,GAClC,CAGE0I,GAAQ,EACR,KACF,CACF,CACA,OAAOA,CACT,CACE,OAAIN,IAAOC,CAMf,CACE,OAAO,CAEX,CAEO,SAASM,IAId,IAJ8D,IACxDC,EAAe,mEACjBhI,EAAS,GAAHO,OAFqC0H,UAAA/I,OAAA,QAAAgJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAE5B,KAEb7I,EAAI,EAAGA,EADO,GACKA,IAAK,CAC/B,IAAM+I,EAAevD,KAAKwD,MAAsBJ,GAAhBpD,KAAKyD,UACrCrI,GAAUgI,EAAaM,UAAUH,EAAcA,EAAe,EAChE,CACA,OAAOnI,CACT,CAEO,SAASuI,EAAoBC,GAIlC,SAHa,IAAIC,MAAOC,UACDF,GAAU7B,QAAQ,GAAK6B,GACxBG,SAAS,GAEjC,CAEO,SAASC,EAAYC,GAA4E,IAA3DnK,EAAYuJ,UAAA/I,OAAA,QAAAgJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,mBAAoBa,EAAgBb,UAAA/I,OAAA,EAAA+I,UAAA,QAAAC,EACxFa,EAAO,IAAIC,KAAK,CAACH,GAAU,CAAEnK,KAAMA,IACnCuK,EAAU,IAAIC,KAAK,CAACH,GAAOD,EAAU,CAAEpK,KAAMA,IACnD,GAAIyK,UAAUC,UAAYD,UAAUC,SAAS,CAAEC,MAAO,CAACJ,KACrDE,UACGG,MAAM,CACLD,MAAO,CAACJ,KACR,OACK,SAACM,GAAW,QAChB,CACL,IAAMC,EAAUC,IAAIC,gBAAgBX,GAC9BY,EAAeC,SAASC,cAAc,KAC5CF,EAAaG,KAAON,EACpBG,EAAaI,SAAWjB,EACxBc,SAASI,KAAKC,YAAYN,GAC1BA,EAAaO,QACbP,EAAaQ,SACbC,YAAW,WACTX,IAAIY,gBAAgBb,EACtB,GAAG,IACL,CACF,CAEO,SAASc,IACd,OAAOC,OAAOC,WAAW,8BAA8BC,OACzD,CAEO,SAASC,IACd,UAAI,iBAAkBH,UAAUpB,UAAUwB,eAO5C,CAEO,SAASC,EAAgBC,GAC9B,GAAiB,kBAANA,EACT,OAAIA,EACK,OAEA,OAGb,C,umCCpGO,SAAS5F,EAAqB6F,GAEnC,IADA,IAAI9K,EAAS,GACJZ,EAAI,EAAGA,EAAI0L,EAAU1L,IAC5BY,EAAO0E,KAAK,KAADnE,QAAMqG,EAAAA,EAAAA,wBAAuBxH,EAAI,KAE9C,OAAOY,CACT,CAEO,SAAS+K,EAAwBC,GACtC,IAoDqCxK,EApDjCR,EAAS,GAaPiL,EAAa,CACjB,CACEC,OAdkB,CAAC,EAAG,GAetBC,MAAO,MAET,CACED,OAhBgB,CAAC,EAAG,GAiBpBC,MAAO,KAET,CACED,OAnBe,CAAC,EAAG,GAoBnBC,MAAO,KAET,CACED,OArBgB,CAAC,GAAI,GAsBrBC,MAAO,KAET,CACED,OA1Be,EAAE,EAAG,GA2BpBC,MAAO,KAET,CACED,OA3BoB,CAACtG,KAAK2B,KAAK,GAAK,EAAG3B,KAAK2B,KAAK,GAAK,GA4BtD4E,MAAO,MAET,CACED,OA9BoB,CAACtG,KAAK2B,KAAK,GAAK,GAAI3B,KAAK2B,KAAK,GAAK,GA+BvD4E,MAAO,MAET,CACED,OAjCoB,EAAEtG,KAAK2B,KAAK,GAAK,GAAI3B,KAAK2B,KAAK,GAAK,GAkCxD4E,MAAO,MAET,CACED,OApCoB,EAAEtG,KAAK2B,KAAK,GAAK,EAAG3B,KAAK2B,KAAK,GAAK,GAqCvD4E,MAAO,OAET1K,EAAAC,EAEsBsK,GAAa,IAArC,IAAAvK,EAAAE,MAAAH,EAAAC,EAAAb,KAAAgB,MAAuC,KAGP2B,EAHrB6I,EAAS5K,EAAAM,MACd+J,EAAI,EACJQ,EAAI,EAAE3I,EAAAhC,EACW0K,GAAS,IAA9B,IAAA1I,EAAA/B,MAAA4B,EAAAG,EAAA9C,KAAAgB,MAAgC,KAArBsK,EAAM3I,EAAAzB,MACf+J,GAAKK,EAAO,GACZG,GAAKH,EAAO,EACd,CAAC,OAAAhK,GAAAwB,EAAApE,EAAA4C,EAAA,SAAAwB,EAAAvB,GAAA,CACD,IAEkC6B,EAF5BsI,GAAaC,EAAAA,EAAAA,qBAAoB,CAACV,EAAGQ,IACvCG,EAAU,GAAGtI,EAAAxC,EACOuK,GAAU,IAAlC,IAAA/H,EAAAvC,MAAAqC,EAAAE,EAAAtD,KAAAgB,MAAoC,KAAzByB,EAASW,EAAAlC,MACZ2K,EAAapJ,EAAU6I,OAAO,GAAKI,EAAW,GAAKjJ,EAAU6I,OAAO,GAAKI,EAAW,GAC1FE,EAAQ9G,KAAK,CAAEyG,MAAO9I,EAAU8I,MAAOM,WAAYA,GACrD,CAAC,OAAAvK,GAAAgC,EAAA5E,EAAA4C,EAAA,SAAAgC,EAAA/B,GAAA,CAID,IAAMuK,GAHNF,EAAUA,EAAQhK,MAAK,SAAUhC,EAAGC,GAClC,OAAOA,EAAEgM,WAAajM,EAAEiM,UAC1B,KAC0B,GAC1BzL,EAAO0E,KAAKgH,EAAUP,MACxB,CAAC,OAAAjK,GAAAT,EAAAnC,EAAA4C,EAAA,SAAAT,EAAAU,GAAA,CACD,OAAOnB,CACT,C,kvBCpFO,SAAS2L,EAA2BtG,GAEzC,IAAMuG,EAAOvG,EAAI9F,QAAO,SAACsM,EAAKC,GAAG,OAAKD,EAAMC,CAAG,GAAE,GAAKzG,EAAInG,OAIpD6M,EAFqB1G,EAAI9G,KAAI,SAACuN,GAAG,OAAKlH,KAAKoH,IAAIF,EAAMF,EAAM,EAAE,IAEfrM,QAAO,SAACsM,EAAKC,GAAG,OAAKD,EAAMC,CAAG,GAAE,GAAKzG,EAAInG,OAG7F,OAD0B0F,KAAK2B,KAAKwF,EAEtC,CAEO,SAASE,EAAiBC,GAE/B,IAAMN,EAAOM,EAAM3M,QAAO,SAACsM,EAAKC,GAAG,OAAKD,EAAMC,CAAG,GAAE,GAAKI,EAAMhN,OAGxDiN,EAASR,EAA2BO,GAG1C,OAAOA,EAAM3N,KAAI,SAACuN,GAAG,OAAMA,EAAMF,GAAQO,CAAM,GACjD,CAGO,SAASC,EAAmBvB,EAAkBQ,GACnD,IAAMzL,EAAIiL,EAAE3L,OACZ,GAAIU,IAAMyL,EAAEnM,OACV,MAAM,IAAImN,MAAM,oCASlB,IANA,IAAIC,EAAO,EACTC,EAAO,EACPC,EAAQ,EACRC,EAAc,EACdC,EAAc,EAEPtN,EAAI,EAAGA,EAAIQ,EAAGR,IACrBkN,GAAQzB,EAAEzL,GACVmN,GAAQlB,EAAEjM,GACVoN,GAAS3B,EAAEzL,GAAKiM,EAAEjM,GAClBqN,GAAW7H,KAAAoH,IAAInB,EAAEzL,GAAM,GACvBsN,GAAW9H,KAAAoH,IAAIX,EAAEjM,GAAM,GAGzB,IAAMuN,EAAY/M,EAAI4M,EAAQF,EAAOC,EAC/BK,EAAchI,KAAK2B,MAAM3G,EAAI6M,EAAW7H,KAAAoH,IAAGM,EAAQ,KAAM1M,EAAI8M,EAAW9H,KAAAoH,IAAGO,EAAQ,KAEzF,OAAoB,IAAhBK,EACK,EAGFD,EAAYC,CACrB,CAEO,SAASrB,EAAoBL,GAClC,IAAIhM,EAAS0F,KAAKiI,MAAM3B,GACpB4B,EAAY,GAChB,GAAI5N,EAAS,EAAG,CACd,IACsBsB,EADlBuM,EAAQ,EAAI7N,EAAOuB,E,goBAAAC,CACPwK,GAAM,IAAtB,IAAAzK,EAAAE,MAAAH,EAAAC,EAAAb,KAAAgB,MAAwB,KAAbiK,EAACrK,EAAAM,MACVgM,EAAUpI,KAAKmG,EAAIkC,EACrB,CAAC,OAAA7L,GAAAT,EAAAnC,EAAA4C,EAAA,SAAAT,EAAAU,GAAA,CACD,OAAO2L,CACT,CACE,OAAO5B,CAEX,CAEO,SAAS8B,EAAYd,GAG1B,IAFA,IAAMe,EAAcf,EAAMhN,OACtBc,EAAS,GACJZ,EAAI,EAAGA,EAAI6N,EAAa7N,GAAK,EAAG,CACvC,IAAM8N,EAAchB,EAAM9M,GACpB+N,EAAejB,EAAM9M,EAAI,IAAM8N,EAC/BE,EAAWlB,EAAM9M,EAAI,IAAM8N,EACjClN,EAAO0E,MAAMyI,EAAeD,EAAcE,GAAY,EACxD,CACA,OAAOpN,CACT,CAEO,SAASqN,EAAanB,GAE3B,IAAMrH,EAAMD,KAAKC,IAAGC,MAARF,KAAIG,EAAQmH,IAClBoB,EAASpB,EAAM3N,KAAI,SAACuC,GAAK,OAAK8D,KAAK2I,IAAIzM,EAAQ+D,EAAI,IAGnD2I,EAASF,EAAO/N,QAAO,SAACkO,EAAc3M,GAAK,OAAK2M,EAAe3M,CAAK,GAAE,GAG5E,OAAOwM,EAAO/O,KAAI,SAACuC,GAAK,OAAKA,EAAQ0M,CAAM,GAC7C,CAEO,SAASE,EAAiBxB,GAC/B,OAAqB,IAAjBA,EAAMhN,OACD,EAEKgN,EAAM3M,QAAO,SAACsM,EAAK8B,GAAI,OAAK9B,EAAM8B,CAAI,GAAE,GACvCzB,EAAMhN,MAEvB,CAEO,SAAS0O,EAAiB1B,EAAsB2B,GACrD,IAAMC,EAAY5B,EAAMhN,OAExB,GAAI4O,EAAY,EACd,OAAO5B,EAIT,IADA,IAAI6B,EAAc,EACT3O,EAAI,EAAGA,EAAI0O,EAAW1O,IAC7B2O,GAAO7B,EAAM9M,GAKf,IAHA,IAAI4O,EAAUD,EAAMD,EAEhBG,EAA8B,EACzB3I,EAAI,EAAGA,EAAIwI,EAAWxI,IAC7B2I,GAAuBrJ,KAAKoH,IAAIE,EAAM5G,GAAK0I,EAAS,GAMtD,IAJA,IAAME,EAAoBtJ,KAAK2B,KAAK0H,EAAsBH,GAEtDK,EAAe,GACfC,EAAiB,EACZC,EAAI,EAAGA,EAAIP,EAAWO,IAAK,CAClC,IAAMC,EAAc1J,KAAK2I,IAAIrB,EAAMmC,GAAKH,GACxCE,GAAkBE,EAClBH,EAAazJ,KAAK4J,EACpB,CAIA,IAFA,IAAIC,EAAI3J,KAAKoH,IAAI8B,EAAWD,GACxBW,EAAiB,CAAC,EACbC,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAClC,IAAMrQ,EAAM,KAAHmC,OAAQqE,KAAKoC,MAAOmH,EAAaM,GAAKL,EAAkBG,IAC5DC,EAAevN,eAAe7C,KACjCoQ,EAAepQ,GAAO,CACpB2P,IAAK,EACL/O,IAAK,IAGTwP,EAAepQ,GAAK2P,KAAO7B,EAAMuC,GACjCD,EAAepQ,GAAKY,KAAO,CAC7B,CAEA,IAAIgB,EAAS,GACb,IAAK,IAAM5B,KAAOoQ,EAAgB,CAChC,IAAME,EAAYF,EAAepQ,GACjC4B,EAAO0E,KAAKE,KAAKoC,MAAM0H,EAAUX,IAAMW,EAAU1P,KACnD,CAGA,OADAgB,EAAOwB,MAAK,SAAChC,EAAGC,GAAC,OAAKD,EAAIC,CAAC,IACpBO,CACT,C","sources":["webpack://bus/./src/tools/address.ts","webpack://bus/./src/tools/array.ts","webpack://bus/./src/tools/convert.ts","webpack://bus/./src/tools/index.ts","webpack://bus/./src/tools/labels.ts","webpack://bus/./src/tools/math.ts"],"sourcesContent":["import { generateLetterLabels } from './labels';\nimport { areItemsDifferent } from './array';\n\ninterface AddressPart {\n  suffixes?: string;\n  key: keyof ParsedAddress;\n  process: (e: string[] | null) => string[] | number[] | null;\n  type: number;\n}\n\ninterface ParsedAddress {\n  city: string[];\n  district: string[];\n  area: string[];\n  road: string[];\n  road_section: number[];\n  alley: number[];\n  alley_branch: number[];\n  doorplate: number[];\n  floornumber: string[];\n  exit: string[];\n  direction: string[];\n  [key: string]: string[] | number[] | null;\n}\n\ninterface FeatureCounts {\n  [key: string]: { count: number; chars: string; index: number };\n}\n\nexport function mergeAddressesIntoOne(addresses: Array<string>): ParsedAddress | string {\n  const parts: Array<AddressPart> = [\n    {\n      suffixes: '市',\n      key: 'city',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '區',\n      key: 'district',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '鄉鎮村里',\n      key: 'area',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '路街道',\n      key: 'road',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.replaceAll(/[\\(\\)\\（\\）]/gim, '').trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '段',\n      key: 'road_section',\n      process: function (e) {\n        var toNumber = function (char) {\n          switch (char) {\n            case '一':\n              return 1;\n              break;\n            case '二':\n              return 2;\n              break;\n            case '三':\n              return 3;\n              break;\n            case '四':\n              return 4;\n              break;\n            case '五':\n              return 5;\n              break;\n            case '六':\n              return 6;\n              break;\n            case '七':\n              return 7;\n              break;\n            case '八':\n              return 8;\n              break;\n            case '九':\n              return 9;\n              break;\n            case '十':\n              return 10;\n              break;\n          }\n          if (!isNaN(parseInt(char))) {\n            return parseInt(char);\n          }\n          return 0;\n        };\n        var len = String(e).length;\n        var numbers = [];\n        for (let i = 0; i < len; i++) {\n          var p = toNumber(String(e).charAt(i));\n          if (p === 10) {\n            if (numbers.length > 0) {\n              numbers = [numbers.reduce((a, b) => a + b, 0) * 10];\n            }\n          } else {\n            numbers = [numbers.reduce((a, b) => a + b, 0) + p];\n          }\n        }\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '巷',\n      key: 'alley',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[巷]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '弄',\n      key: 'alley_branch',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[弄]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '號',\n      key: 'doorplate',\n      process: function (e) {\n        var numbers = String(e).match(/[0-9]+/gim);\n        numbers =\n          numbers?.map((n) => {\n            if (n === null) {\n              return null;\n            } else {\n              return parseInt(n);\n            }\n          }) || null;\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '樓',\n      key: 'floornumber',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      key: 'exit',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 2\n    },\n    {\n      key: 'direction',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim().replace(/[往向]/gim, '');\n          });\n        }\n      },\n      type: 1\n    }\n  ];\n\n  function parseAddress(address: string): object {\n    function regex(suffixes, type) {\n      if (type === 0) {\n        return new RegExp(`([^市區鄉鎮村里路段街道巷弄號樓與]+[${suffixes}])`, 'gmi');\n      }\n      if (type === 1) {\n        return new RegExp(`([往向]+[東南西北])`, 'gmi');\n      }\n      if (type === 2) {\n        return new RegExp(`([0-9]+[號]出口)`, 'gmi');\n      }\n    }\n    var result = {};\n    for (var part of parts) {\n      var r = regex(part?.suffixes, part.type);\n      result[part.key] = part.process(String(address).match(r));\n    }\n    return result;\n  }\n\n  function mergeAddresses(addresses: Array<string>): object {\n    var result = {};\n    for (var address of addresses) {\n      var parsedAddress = parseAddress(address);\n      for (var part of parts) {\n        if (!result.hasOwnProperty(part.key)) {\n          result[part.key] = [];\n        }\n        result[part.key] = result[part.key].concat(parsedAddress[part.key]);\n      }\n    }\n    for (var key in result) {\n      result[key] = Array.from(new Set(result[key]))\n        .filter((e) => (e ? true : false))\n        .sort(function (a, b) {\n          if (typeof a === 'number' && typeof b === 'number') {\n            return a - b;\n          } else {\n            return String(a).charCodeAt(0) - String(b).charCodeAt(0);\n          }\n        });\n    }\n    return result;\n  }\n  return mergeAddresses(addresses);\n}\n\nexport function addressToString(address: ParsedAddress): string {\n  return `${address.city.join('')}${address.district.join('')}${address.road.join('、')}${\n    address.road_section.sort(function (a, b) {\n      return a - b;\n    }).length > 0\n      ? address.road_section.join('、') + '段'\n      : ''\n  }${\n    address.alley.length > 0\n      ? address.alley\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '巷'\n      : ''\n  }${\n    address.alley_branch.length > 0\n      ? address.alley_branch\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '弄'\n      : ''\n  }${\n    address.doorplate.length > 0\n      ? address.doorplate\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '號'\n      : ''\n  }${address.floornumber.length > 0 ? address.floornumber.join('、') + '樓' : ''}${address.direction.length > 0 ? '（朝' + address.direction.join('、') + '）' : ''}`;\n}\n\nexport function extractCommonFeaturesFromAddresses(addresses: Array<string>): string {\n  // Create an object to store feature occurrences\n  const featureCounts: { [key: string]: { count: number; chars: string; index: number } } = {};\n\n  // Create a set to store unique simplified addresses\n  const simplifiedSet = new Set<string>();\n\n  // Iterate through each address\n  for (const address of addresses) {\n    // Extract common features by splitting the address\n    const features = String(address)\n      .split('')\n      .filter((feature) => feature.trim() !== '');\n\n    // Join the extracted features to create a simplified address\n    const simplifiedAddress = features.join('');\n\n    // Add the simplified address to the set\n    simplifiedSet.add(simplifiedAddress);\n\n    // Count occurrences of each feature\n    let index = 0;\n    for (const feature of features) {\n      // Check if the feature is a digit\n      if (!isNaN(parseInt(feature))) {\n        // Create a key for the digit feature\n        const digitKey = `digit_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[digitKey] = {\n          count: (featureCounts[digitKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      } else {\n        // Create a key for non-digit features\n        const featureKey = `chars_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[featureKey] = {\n          count: (featureCounts[featureKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      }\n      index += 1;\n    }\n  }\n\n  // Set threshold and limit for filtering features\n  const threshold = addresses.length * 0.6;\n  const limit = addresses.length * 1;\n\n  // Convert the feature counts object to an array of [feature, count] pairs\n  const sortedFeatures = Object.entries(featureCounts)\n    .filter((pair) => threshold <= pair[1].count && pair[1].count <= limit)\n    .sort((a, b) => a[1].index - b[1].index);\n\n  // Extract the features from the sorted array\n  const commonFeatures = sortedFeatures.map((pair) => pair[1].chars);\n\n  return commonFeatures.join('');\n}\n\nexport function generateLabelFromAddresses(addresses: Array<ParsedAddress>): Array<string> {\n  let result = [];\n  let filledProperties = {};\n  for (const address of addresses) {\n    for (const key in address) {\n      if (!filledProperties.hasOwnProperty(key)) {\n        filledProperties[key] = 0;\n      }\n      if (address[key].length > 0) {\n        filledProperties[key] = filledProperties[key] + 1;\n      }\n    }\n  }\n  let commonProperties = Object.entries(filledProperties)\n    .map((property) => {\n      return { key: property[0], value: property[1] };\n    })\n    .filter((e) => {\n      return e.value === addresses.length ? true : false;\n    })\n    .sort(function (a, b) {\n      return a.value - b.value;\n    });\n  if (commonProperties.length > 0) {\n    for (const commonProperty of commonProperties) {\n      let components = [];\n      for (const address of addresses) {\n        components.push(address[commonProperty.key].join(''));\n      }\n      if (areItemsDifferent(components)) {\n        result.push({ components: components, len: Math.max(...components.map((e) => e.length)) });\n      }\n    }\n  }\n\n  if (result.length > 0) {\n    result = result.sort(function (a, b) {\n      return a.len - b.len;\n    });\n    return result[0].components;\n  } else {\n    const addressesLength = addresses.length;\n    return generateLetterLabels(addressesLength);\n  }\n}\n","// Function to split data based on delta\n\n/**\n * Splits data into groups based on delta between consecutive elements.\n *\n * @param {Array<[number, number]>} data - Array of tuples where each tuple contains two numbers.\n * @returns {Array<Array<[number, number]>>} - Array of groups, each containing arrays of tuples.\n */\n\nexport function splitDataByDelta(data: Array<[number, number]>): Array<Array<[number, number]>> {\n  const result: Array<Array<[number, number]>> = [];\n  let currentGroup: Array<[number, number]> = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (i === 0 || data[i][0] - data[i - 1][0] > 0) {\n      if (currentGroup.length > 0) {\n        result.push(currentGroup);\n      }\n      currentGroup = [data[i]];\n    } else {\n      currentGroup.push(data[i]);\n    }\n  }\n\n  if (currentGroup.length > 0) {\n    result.push(currentGroup);\n  }\n\n  return result;\n}\n\nexport function areItemsDifferent(arr: Array): boolean {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        return false; // Found a duplicate\n      }\n    }\n  }\n  return true; // No duplicates found\n}\n\n/**\n * Get common items from the two arrays\n * @param arrayA - The first array\n * @param arrayB - The second array\n * @returns An array of the common items\n */\n\nexport function getIntersection(arrayA: Array, arrayB: Array): Array {\n  let result = [];\n  if (arrayA.length <= arrayB.length) {\n    for (const item of arrayA) {\n      if (arrayB.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  } else {\n    for (const item of arrayB) {\n      if (arrayA.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  }\n  return result;\n}\n","export function convertPositionsToDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6378.137;\n  const dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\n  const dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c;\n  return d * 1000; // measured in meters\n}\n\nexport function convertBytes(contentLength: number): string {\n  const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let i = 0;\n\n  while (contentLength >= 1024 && i < units.length - 1) {\n    contentLength /= 1024;\n    i++;\n  }\n\n  return `${contentLength.toFixed(2)} ${units[i]}`;\n}\n\nexport function convertNumberToLetters(number: number): string {\n  let result = '';\n  while (number > 0) {\n    let remainder = (number - 1) % 26; // Adjust for 1-based indexing\n    let letter = String.fromCharCode(remainder + 65); // A=65 in ASCII\n    result = letter + result;\n    number = Math.floor((number - 1) / 26); // Update number for next iteration\n  }\n  return result;\n}","export const md5 = require('md5');\n\nexport function compareThings(a: any, b: any): boolean {\n  function anyToString(any: any): string {\n    return JSON.stringify({ e: any });\n  }\n  const ax = anyToString(a);\n  const bx = anyToString(b);\n  const length: number = 32;\n  const axLength: number = ax.length;\n  const bxLength: number = bx.length;\n  if (axLength === bxLength) {\n    if (axLength > length || bxLength > length) {\n      const hash_a: string = md5(ax);\n      const hash_b: string = md5(bx);\n\n      let equal: boolean = true;\n      for (let i = 0; i < 8; i++) {\n        const a_i: string = hash_a.charAt(i);\n        const b_i: string = hash_b.charAt(i);\n        if (a_i === b_i) {\n          continue;\n        } else {\n          equal = false;\n          break;\n        }\n      }\n      return equal;\n    } else {\n      if (ax === bx) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  } else {\n    return false;\n  }\n}\n\nexport function generateIdentifier(prefix: string = ''): string {\n  const characterSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n  let result = `${prefix}_`;\n  const length: number = 16;\n  for (let i = 0; i < length; i++) {\n    const randomNumber = Math.round(Math.random() * characterSet.length);\n    result += characterSet.substring(randomNumber, randomNumber + 1);\n  }\n  return result;\n}\n\nexport function getNoCacheParameter(interval: number): string {\n  const time = new Date().getTime();\n  const number = (time / interval).toFixed(0) * interval;\n  const string = number.toString(36);\n  return string;\n}\n\nexport function releaseFile(content: string, type: string = 'application/json', fileName: string): void {\n  const blob = new Blob([content], { type: type });\n  const fileObj = new File([blob], fileName, { type: type });\n  if (navigator.canShare && navigator.canShare({ files: [fileObj] })) {\n    navigator\n      .share({\n        files: [fileObj]\n      })\n      .catch((error) => {});\n  } else {\n    const blobURL = URL.createObjectURL(blob);\n    const downloadLink = document.createElement('a');\n    downloadLink.href = blobURL;\n    downloadLink.download = fileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    downloadLink.remove();\n    setTimeout(() => {\n      URL.revokeObjectURL(blobURL);\n    }, 10 * 1000);\n  }\n}\n\nexport function isRunningStandalone(): boolean {\n  return window.matchMedia('(display-mode: standalone)').matches;\n}\n\nexport function supportTouch(): boolean {\n  if ('ontouchstart' in window || navigator.maxTouchPoints) {\n    // Touch events are supported\n    return true;\n  } else {\n    // Touch events are not supported\n    return false;\n  }\n}\n\nexport function booleanToString(x: boolean): 'true' | 'false' {\n  if (typeof x === 'boolean') {\n    if (x) {\n      return 'true';\n    } else {\n      return 'false';\n    }\n  }\n}\n","import { convertNumberToLetters } from './convert';\nimport { convertToUnitVector } from './math';\n\nexport function generateLetterLabels(quantity: number): Array<string> {\n  let result = [];\n  for (let i = 0; i < quantity; i++) {\n    result.push(`地點${convertNumberToLetters(i + 1)}`);\n  }\n  return result;\n}\n\nexport function generateDirectionLabels(setsOfVectors: Array<Array<[number, number]>>): Array<string> {\n  let result = [];\n  const unknownVector = [0, 0];\n  // cardinal directions\n  const NorthVector = [0, 1];\n  const EastVector = [1, 0];\n  const WestVector = [-1, 0];\n  const SouthVector = [0, -1];\n  // intercardinal directions\n  const NorthEastVector = [Math.sqrt(2) / 2, Math.sqrt(2) / 2]; // 45 degrees\n  const SouthEastVector = [Math.sqrt(2) / 2, -Math.sqrt(2) / 2]; // 135 degrees\n  const SouthWestVector = [-Math.sqrt(2) / 2, -Math.sqrt(2) / 2]; // 225 degrees\n  const NorthWestVector = [-Math.sqrt(2) / 2, Math.sqrt(2) / 2]; // 315 degrees\n\n  const directions = [\n    {\n      vector: unknownVector,\n      label: '未知'\n    },\n    {\n      vector: NorthVector,\n      label: '北'\n    },\n    {\n      vector: EastVector,\n      label: '東'\n    },\n    {\n      vector: SouthVector,\n      label: '南'\n    },\n    {\n      vector: WestVector,\n      label: '西'\n    },\n    {\n      vector: NorthEastVector,\n      label: '東北'\n    },\n    {\n      vector: SouthEastVector,\n      label: '東南'\n    },\n    {\n      vector: SouthWestVector,\n      label: '西南'\n    },\n    {\n      vector: NorthWestVector,\n      label: '西北'\n    }\n  ];\n\n  for (const vectorSet of setsOfVectors) {\n    let x = 0;\n    let y = 0;\n    for (const vector of vectorSet) {\n      x += vector[0];\n      y += vector[1];\n    }\n    const meanVector = convertToUnitVector([x, y]);\n    let result2 = [];\n    for (const direction of directions) {\n      const dotProduct = direction.vector[0] * meanVector[0] + direction.vector[1] * meanVector[1];\n      result2.push({ label: direction.label, dotProduct: dotProduct });\n    }\n    result2 = result2.sort(function (a, b) {\n      return b.dotProduct - a.dotProduct;\n    });\n    const bestMatch = result2[0];\n    result.push(bestMatch.label);\n  }\n  return result;\n}\n","export function calculateStandardDeviation(arr: Array<number>): number {\n  // Step 1: Calculate the mean\n  const mean = arr.reduce((acc, val) => acc + val, 0) / arr.length;\n  // Step 2: Calculate the squared difference between each element and the mean\n  const squaredDifferences = arr.map((val) => Math.pow(val - mean, 2));\n  // Step 3: Find the mean of those squared differences\n  const meanOfSquaredDifferences = squaredDifferences.reduce((acc, val) => acc + val, 0) / arr.length;\n  // Step 4: Take the square root of that mean\n  const standardDeviation = Math.sqrt(meanOfSquaredDifferences);\n  return standardDeviation;\n}\n\nexport function standardizeArray(array: Array<number>): Array<number> {\n  // Calculate the mean of the array\n  const mean = array.reduce((acc, val) => acc + val, 0) / array.length;\n\n  // Calculate the standard deviation\n  const stdDev = calculateStandardDeviation(array);\n\n  // Standardize the array\n  return array.map((val) => (val - mean) / stdDev);\n}\n\n// Function to calculate Pearson correlation coefficient\nexport function pearsonCorrelation(x: Array<number>, y: Array<number>): number {\n  const n = x.length;\n  if (n !== y.length) {\n    throw new Error('Arrays must have the same length');\n  }\n\n  let sumX = 0,\n    sumY = 0,\n    sumXY = 0,\n    sumXSquared = 0,\n    sumYSquared = 0;\n\n  for (let i = 0; i < n; i++) {\n    sumX += x[i];\n    sumY += y[i];\n    sumXY += x[i] * y[i];\n    sumXSquared += x[i] ** 2;\n    sumYSquared += y[i] ** 2;\n  }\n\n  const numerator = n * sumXY - sumX * sumY;\n  const denominator = Math.sqrt((n * sumXSquared - sumX ** 2) * (n * sumYSquared - sumY ** 2));\n\n  if (denominator === 0) {\n    return 0; // Correlation is undefined in this case\n  }\n\n  return numerator / denominator;\n}\n\nexport function convertToUnitVector(vector: Array<number>): Array<number> {\n  let length = Math.hypot(vector);\n  let newVector = [];\n  if (length > 0) {\n    let scale = 1 / length;\n    for (const x of vector) {\n      newVector.push(x * scale);\n    }\n    return newVector;\n  } else {\n    return vector;\n  }\n}\n\nexport function smoothArray(array: Array<number>): Array<number> {\n  const arrayLength = array.length;\n  let result = [];\n  for (let i = 1; i < arrayLength; i += 3) {\n    const currentItem = array[i];\n    const previousItem = array[i - 1] || currentItem;\n    const nextItem = array[i + 1] || currentItem;\n    result.push((previousItem + currentItem + nextItem) / 3);\n  }\n  return result;\n}\n\nexport function softmaxArray(array: Array<number>): Array<number> {\n  // Step 1: Exponentiate each element (for numerical stability, subtract the max value)\n  const max = Math.max(...array);\n  const expArr = array.map((value) => Math.exp(value - max));\n\n  // Step 2: Sum all the exponentiated values\n  const sumExp = expArr.reduce((accumulation, value) => accumulation + value, 0);\n\n  // Step 3: Normalize each value\n  return expArr.map((value) => value / sumExp);\n}\n\nexport function calculateAverage(array: Array<number>): number {\n  if (array.length === 0) {\n    return 0;\n  } else {\n    const sum = array.reduce((acc, curr) => acc + curr, 0);\n    return sum / array.length;\n  }\n}\n\nexport function aggregateNumbers(array: Array<number>, exponent: number): Array<number> {\n  const arrLength = array.length;\n\n  if (arrLength < 3) {\n    return array;\n  }\n\n  let sum: number = 0;\n  for (let i = 0; i < arrLength; i++) {\n    sum += array[i];\n  }\n  let average = sum / arrLength;\n\n  let SquaredDeviationSum: number = 0;\n  for (let j = 0; j < arrLength; j++) {\n    SquaredDeviationSum += Math.pow(array[j] - average, 2);\n  }\n  const standardDeviation = Math.sqrt(SquaredDeviationSum / arrLength);\n\n  let exponentials = [];\n  let exponentialSum = 0;\n  for (let k = 0; k < arrLength; k++) {\n    const exponential = Math.exp(array[k] / standardDeviation);\n    exponentialSum += exponential;\n    exponentials.push(exponential);\n  }\n\n  let P = Math.pow(arrLength, exponent);\n  let groupedNumbers = {};\n  for (let l = 0; l < arrLength; l++) {\n    const key = `k_${Math.floor((exponentials[l] / exponentialSum) * P)}`;\n    if (!groupedNumbers.hasOwnProperty(key)) {\n      groupedNumbers[key] = {\n        sum: 0,\n        len: 0\n      };\n    }\n    groupedNumbers[key].sum += array[l];\n    groupedNumbers[key].len += 1;\n  }\n\n  let result = [];\n  for (const key in groupedNumbers) {\n    const thisGroup = groupedNumbers[key];\n    result.push(Math.floor(thisGroup.sum / thisGroup.len));\n  }\n\n  result.sort((a, b) => a - b);\n  return result;\n}\n"],"names":["mergeAddressesIntoOne","addresses","parts","suffixes","key","process","e","map","t","trim","type","replaceAll","toNumber","char","isNaN","parseInt","len","String","length","numbers","i","p","charAt","reduce","a","b","_numbers","match","n","replace","parseAddress","address","result","_i","_parts","_part","part","r","RegExp","concat","_step","_iterator","_createForOfIteratorHelper","s","done","parsedAddress","value","_i2","_parts2","hasOwnProperty","err","f","Array","from","Set","filter","sort","charCodeAt","mergeAddresses","addressToString","city","join","district","road","road_section","alley","alley_branch","doorplate","floornumber","direction","extractCommonFeaturesFromAddresses","_step2","featureCounts","simplifiedSet","_iterator2","features","split","feature","simplifiedAddress","add","_step3","index","_iterator3","_featureCounts$featur","featureKey","count","chars","_featureCounts$digitK","digitKey","threshold","limit","Object","entries","pair","generateLabelFromAddresses","_step4","filledProperties","_iterator4","commonProperties","property","_step5","_iterator5","_step6","commonProperty","components","_iterator6","push","areItemsDifferent","Math","max","apply","_toConsumableArray","addressesLength","generateLetterLabels","splitDataByDelta","data","currentGroup","arr","j","getIntersection","arrayA","arrayB","item","indexOf","convertPositionsToDistance","lat1","lon1","lat2","lon2","dLat","PI","dLon","sin","cos","atan2","sqrt","convertBytes","contentLength","units","toFixed","convertNumberToLetters","number","remainder","fromCharCode","floor","md5","require","compareThings","anyToString","any","JSON","stringify","ax","bx","axLength","bxLength","hash_a","hash_b","equal","generateIdentifier","characterSet","arguments","undefined","randomNumber","round","random","substring","getNoCacheParameter","interval","Date","getTime","toString","releaseFile","content","fileName","blob","Blob","fileObj","File","navigator","canShare","files","share","error","blobURL","URL","createObjectURL","downloadLink","document","createElement","href","download","body","appendChild","click","remove","setTimeout","revokeObjectURL","isRunningStandalone","window","matchMedia","matches","supportTouch","maxTouchPoints","booleanToString","x","quantity","generateDirectionLabels","setsOfVectors","directions","vector","label","vectorSet","y","meanVector","convertToUnitVector","result2","dotProduct","bestMatch","calculateStandardDeviation","mean","acc","val","meanOfSquaredDifferences","pow","standardizeArray","array","stdDev","pearsonCorrelation","Error","sumX","sumY","sumXY","sumXSquared","sumYSquared","numerator","denominator","hypot","newVector","scale","smoothArray","arrayLength","currentItem","previousItem","nextItem","softmaxArray","expArr","exp","sumExp","accumulation","calculateAverage","curr","aggregateNumbers","exponent","arrLength","sum","average","SquaredDeviationSum","standardDeviation","exponentials","exponentialSum","k","exponential","P","groupedNumbers","l","thisGroup"],"sourceRoot":""}