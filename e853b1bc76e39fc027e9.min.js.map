{"version":3,"file":"e853b1bc76e39fc027e9.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,MAAO,GAAIH,GACQ,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,GACf,CATD,CASGK,MAAM,I,4BCwBF,SAASC,EAAkBC,GAUhC,OARoBA,EACjBC,QAAQ,eAAgB,IACxBA,QAAQ,IAAK,IACbC,MAAM,MACNC,KAAI,SAACC,GAEJ,OAAOA,EAAMF,MAAM,KAAKC,IAAIE,WAC9B,GAEJ,C,4/BCzCAP,KAAKQ,UAAY,SAAUC,GACzB,IAAMC,EAIR,SAAiCC,GAC/B,IAC2BC,EADvBF,EAAiC,CAAC,EAAEG,EAAAC,EACrBH,GAAQ,IAA3B,IAAAE,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAA6B,KAAlBC,EAAIN,EAAAO,MACPC,EAAiB,CAAC,EACxBA,EAAeC,EAAIH,EAAKI,QACxBF,EAAeG,EAAItB,EAAkBiB,EAAKhB,KAC1CkB,EAAeI,EAAIN,EAAKO,OACxB,IAAMC,EAAW,KAAHC,OAAQT,EAAKI,SACtBZ,EAAOkB,eAAeF,KACzBhB,EAAOgB,GAAYN,EAEvB,CAAC,OAAAS,GAAAhB,EAAAJ,EAAAoB,EAAA,SAAAhB,EAAAiB,GAAA,CACD,OAAOpB,CACT,CAjBiBqB,CAAwBtB,EAAEuB,MACzChC,KAAKiC,YAAYvB,EACnB,E","sources":["webpack://bus/webpack/universalModuleDefinition","webpack://bus/./src/tools/convert.ts","webpack://bus/./src/data/apis/getBusShape/simplifyBusShape-worker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bus\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bus\"] = factory();\n\telse\n\t\troot[\"bus\"] = factory();\n})(self, () => {\nreturn ","export function convertPositionsToDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6378.137;\n  const dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\n  const dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c;\n  return d * 1000; // measured in meters\n}\n\nexport function convertBytes(contentLength: number): string {\n  const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let i = 0;\n\n  while (contentLength >= 1024 && i < units.length - 1) {\n    contentLength /= 1024;\n    i++;\n  }\n\n  return `${contentLength.toFixed(2)} ${units[i]}`;\n}\n\nexport function convertNumberToLetters(number: number): string {\n  let result = '';\n  while (number > 0) {\n    let remainder = (number - 1) % 26; // Adjust for 1-based indexing\n    let letter = String.fromCharCode(remainder + 65); // A=65 in ASCII\n    result = letter + result;\n    number = Math.floor((number - 1) / 26); // Update number for next iteration\n  }\n  return result;\n}\n\nexport function convertWKTToArray(wkt: string): Array<[number, number]> {\n  // Extract the part inside the parentheses and split by comma to get the coordinate pairs\n  const coordinates = wkt\n    .replace('LINESTRING (', '')\n    .replace(')', '')\n    .split(', ')\n    .map((coord) => {\n      // For each coordinate pair, split by space and parse as float\n      return coord.split(' ').map(parseFloat);\n    });\n  return coordinates;\n}\n","import { convertWKTToArray } from '../../../tools/convert';\nimport { BusShape, SimplifiedBusShape } from './index';\n\nself.onmessage = function (e) {\n  const result = simplifyBusShape_worker(e.data);\n  self.postMessage(result); // Send the result back to the main thread\n};\n\nfunction simplifyBusShape_worker(BusShape: BusShape): SimplifiedBusShape {\n  let result: SimplifiedBusShapeItem = {};\n  for (const item of BusShape) {\n    const simplifiedItem = {};\n    simplifiedItem.r = item.RouteID;\n    simplifiedItem.c = convertWKTToArray(item.wkt);\n    simplifiedItem.g = item.GoBack;\n    const routeKey = `r_${item.RouteID}`;\n    if (!result.hasOwnProperty(routeKey)) {\n      result[routeKey] = simplifiedItem;\n    }\n  }\n  return result;\n}\n"],"names":["root","factory","exports","module","define","amd","self","convertWKTToArray","wkt","replace","split","map","coord","parseFloat","onmessage","e","result","BusShape","_step","_iterator","_createForOfIteratorHelper","s","n","done","item","value","simplifiedItem","r","RouteID","c","g","GoBack","routeKey","concat","hasOwnProperty","err","f","simplifyBusShape_worker","data","postMessage"],"sourceRoot":""}