{"version":3,"file":"24c160770518e73bacea.js","mappings":"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","sources":["webpack://bus/./src/interface/route/index.ts"],"sourcesContent":["import { IntegratedRoute, integratedStopItem, integrateRoute } from '../../data/route/index';\nimport { getIconHTML } from '../icons/index';\nimport { getDataReceivingProgress } from '../../data/apis/loader';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../tools/index';\nimport { getTextWidth } from '../../tools/graphic';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../tools/query-selector';\nimport { getUpdateRate } from '../../data/analytics/update-rate/index';\nimport { isFolderContentSaved } from '../../data/folder/index';\nimport { GeneratedElement, pushPageHistory, closePreviousPage, openPreviousPage, GroupStyles, querySize, GroupScrollTops, GroupScrollTopOffsets } from '../index';\nimport { promptMessage } from '../prompt/index';\nimport { indexToDay, timeObjectToString } from '../../tools/time';\nimport { logRecentView } from '../../data/recent-views/index';\nimport { stopHasNotifcationSchedules } from '../../data/notification/index';\n\nconst RouteField = documentQuerySelector('.css_route_field');\nconst RouteHeadElement = elementQuerySelector(RouteField, '.css_route_head');\nconst RouteNameElement = elementQuerySelector(RouteHeadElement, '.css_route_name');\nconst RouteButtonRightElement = elementQuerySelector(RouteHeadElement, '.css_route_button_right');\nconst RouteUpdateTimerElement = elementQuerySelector(RouteHeadElement, '.css_route_update_timer_box .css_route_update_timer');\nconst RouteGroupTabsElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tabs');\nconst RouteGroupTabsTrayElement = elementQuerySelector(RouteGroupTabsElement, '.css_route_group_tabs_tray');\nconst RouteGroupTabLineTrackElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tab_line_track');\nconst RouteGroupTabLineElement = elementQuerySelector(RouteGroupTabLineTrackElement, '.css_route_group_tab_line');\nconst RouteGroupsElement = elementQuerySelector(RouteField, '.css_route_groups');\n\nlet previousIntegration = {} as IntegratedRoute;\nlet previousAnimation: boolean = true;\nlet previousSkeletonScreen: boolean = false;\n\nlet routeSliding_initialIndex: number = 0;\nlet routeSliding_targetIndex: number = 0;\nlet routeSliding_groupQuantity: number = 0;\nlet routeSliding_groupStyles: GroupStyles = {};\nlet routeSliding_fieldWidth: number = 0;\nlet routeSliding_fieldHeight: number = 0;\nlet routeSliding_sliding: boolean = false;\n\nlet routeRefreshTimer_retryInterval: number = 10 * 1000;\nlet routeRefreshTimer_baseInterval: number = 15 * 1000;\nlet routeRefreshTimer_minInterval: number = 5 * 1000;\nlet routeRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet routeRefreshTimer_dynamic: boolean = true;\nlet routeRefreshTimer_streaming: boolean = false;\nlet routeRefreshTimer_lastUpdate: number = 0;\nlet routeRefreshTimer_nextUpdate: number = 0;\nlet routeRefreshTimer_refreshing: boolean = false;\nlet routeRefreshTimer_currentRequestID: string = '';\nlet routeRefreshTimer_currentProgress: number = -1;\nlet routeRefreshTimer_targetProgress: number = -1;\nlet routeRefreshTimer_streamStarted: boolean = false;\nvar routeRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nlet routeItemElementVisibilityCheck_groupScrollTopOffsets: GroupScrollTopOffsets = {};\n\nlet currentRouteIDSet_RouteID: number = 0;\nlet currentRouteIDSet_PathAttributeId: Array<number> = [];\n\nlet tabPadding: number = 20;\n\nexport function initializeRouteSliding(): void {\n  RouteGroupsElement.addEventListener(\n    'touchstart',\n    function () {\n      routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n    },\n    { passive: true }\n  );\n\n  RouteGroupsElement.addEventListener(\n    'scroll',\n    function (event: Event) {\n      routeSliding_sliding = true;\n      const target = event.target as HTMLElement;\n      const currentIndex = target.scrollLeft / routeSliding_fieldWidth;\n      if (currentIndex > routeSliding_initialIndex) {\n        routeSliding_targetIndex = routeSliding_initialIndex + 1;\n      } else {\n        routeSliding_targetIndex = routeSliding_initialIndex - 1;\n      }\n      const initialSize = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`] || { width: 0, offset: 0 };\n      const targetSize = routeSliding_groupStyles[`g_${routeSliding_targetIndex}`] || { width: 0, offset: 0 };\n      const tabWidth = initialSize.width + (targetSize.width - initialSize.width) * Math.abs(currentIndex - routeSliding_initialIndex);\n      const offset = (initialSize.offset + (targetSize.offset - initialSize.offset) * Math.abs(currentIndex - routeSliding_initialIndex)) * -1 + routeSliding_fieldWidth * 0.5 - tabWidth * 0.5;\n\n      updateRouteCSS(routeSliding_groupQuantity, offset, tabWidth - tabPadding, currentIndex);\n\n      if (currentIndex === routeSliding_targetIndex) {\n        routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n        routeSliding_sliding = false;\n      }\n    },\n    { passive: true }\n  );\n}\n\nexport function ResizeRouteField(): void {\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  RouteField.style.setProperty('--b-cssvar-route-field-width', `${FieldWidth}px`);\n  RouteField.style.setProperty('--b-cssvar-route-field-height', `${FieldHeight}px`);\n}\n\nexport function updateRouteCSS(groupQuantity: number, offset: number, tabLineWidth: number, percentage: number): void {\n  RouteGroupsElement.style.setProperty('--b-cssvar-route-group-quantity', groupQuantity.toString());\n  RouteGroupTabLineElement.style.setProperty('--b-cssvar-route-tab-line-width-scale', (tabLineWidth / 10).toString());\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-tabs-tray-offset', `${offset.toFixed(5)}px`);\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-percentage', percentage.toFixed(5));\n}\n\nfunction updateUpdateTimer(): void {\n  const smoothingFactor = 0.1;\n  const time = new Date().getTime();\n  if (routeRefreshTimer_refreshing) {\n    routeRefreshTimer_targetProgress = -1 + getDataReceivingProgress(routeRefreshTimer_currentRequestID);\n    routeRefreshTimer_currentProgress += (routeRefreshTimer_targetProgress - routeRefreshTimer_currentProgress) * smoothingFactor;\n  } else {\n    routeRefreshTimer_targetProgress = -1 * Math.min(1, Math.max(0, Math.abs(time - routeRefreshTimer_lastUpdate) / routeRefreshTimer_dynamicInterval));\n    routeRefreshTimer_currentProgress = routeRefreshTimer_targetProgress;\n  }\n  RouteUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', routeRefreshTimer_currentProgress.toString());\n  window.requestAnimationFrame(function () {\n    if (routeRefreshTimer_streaming) {\n      updateUpdateTimer();\n    }\n  });\n}\n\nfunction generateElementOfThreadBox(): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_thread_box');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_thread\"></div><div class=\"css_route_group_thread_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfItem(threadBoxIdentifier: string): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_item');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_item_head\"><div class=\"css_route_group_item_name\"></div><div class=\"css_route_group_item_capsule\"><div class=\"css_route_group_item_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div><div class=\"css_route_group_item_stretch\" onclick=\"bus.route.stretchRouteItemBody('${identifier}', '${threadBoxIdentifier}')\">${getIconHTML('keyboard_arrow_down')}</div><div class=\"css_route_group_item_capsule_separator\"></div></div></div><div class=\"css_route_group_item_body\" displayed=\"false\"><div class=\"css_route_group_item_buttons\"><div class=\"css_route_group_item_button\" highlighted=\"true\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 0)\" code=\"0\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('directions_bus')}</div>公車</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 1)\" code=\"1\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('departure_board')}</div>抵達時間</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 2)\" code=\"2\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('route')}</div>路線</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"save-to-folder\" onclick=\"bus.folder.openSaveToFolder('stop-on-route', ['${identifier}', null, null])\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('folder')}</div>儲存至資料夾</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"schedule-notification\" onclick=\"bus.notification.openScheduleNotification('stop-on-route', ['${identifier}', null, null, null])\" enabled=\"true\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('notifications')}</div>設定到站通知</div></div><div class=\"css_route_group_item_buses\" displayed=\"true\"></div><div class=\"css_route_group_item_overlapping_routes\" displayed=\"false\"></div><div class=\"css_route_group_item_bus_arrival_times\" displayed=\"false\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfGroup(): GeneratedElement {\n  // const identifier = generateIdentifier('g');\n  const element = document.createElement('div');\n  element.classList.add('css_route_group');\n  // element.id = identifier;\n  const tracksElement = document.createElement('div');\n  tracksElement.classList.add('css_route_group_tracks');\n\n  const threadTrackElement = document.createElement('div');\n  threadTrackElement.classList.add('css_route_group_threads_track');\n\n  const itemsTrackElement = document.createElement('div');\n  itemsTrackElement.classList.add('css_route_group_items_track');\n\n  tracksElement.appendChild(threadTrackElement);\n  tracksElement.appendChild(itemsTrackElement);\n  element.appendChild(tracksElement);\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction generateElementOfTab(): GeneratedElement {\n  var identifier = generateIdentifier('t');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_tab');\n  element.id = identifier;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction setUpRouteFieldSkeletonScreen(Field: HTMLElement): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const defaultItemQuantity: number = Math.floor(FieldHeight / 50) + 5;\n  const defaultGroupQuantity = 2;\n  let groupedItems: IntegratedRoute['groupedItems'] = {};\n  for (let i = 0; i < defaultGroupQuantity; i++) {\n    const groupKey: string = `g_${i}`;\n    groupedItems[groupKey] = [];\n    for (let j = 0; j < defaultItemQuantity; j++) {\n      groupedItems[groupKey].push({\n        name: '',\n        goBack: '0',\n        status: { code: 8, text: '', time: -6 },\n        buses: [],\n        overlappingRoutes: [],\n        busArrivalTimes: [],\n        sequence: j,\n        position: {\n          longitude: 0,\n          latitude: 0\n        },\n        nearest: false,\n        progress: 0,\n        segmentBuffer: {\n          isSegmentBuffer: false,\n          isStartingPoint: false,\n          isEndingPoint: false\n        },\n        id: 0\n      });\n    }\n  }\n  updateRouteField(\n    Field,\n    {\n      groupedItems: groupedItems,\n      groupQuantity: defaultGroupQuantity,\n      itemQuantity: {\n        g_0: defaultItemQuantity,\n        g_1: defaultItemQuantity\n      },\n      RouteName: '載入中',\n      RouteEndPoints: {\n        RouteDeparture: '載入中',\n        RouteDestination: '載入中'\n      },\n      RouteID: 0,\n      PathAttributeId: [],\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction checkItemElementVisibility(boxHeight: number, groupIndex: number, index: number, scrollTop: number): boolean {\n  const itemHeight = 50;\n  const groupKey = `g_${groupIndex}`;\n  const offsetedScrollTop = scrollTop + routeItemElementVisibilityCheck_groupScrollTopOffsets[groupKey];\n\n  if (routeSliding_initialIndex !== groupIndex && routeSliding_targetIndex !== groupIndex) {\n    return false;\n  }\n  const itemQuantityFromTop = Math.floor(offsetedScrollTop / itemHeight) - 1;\n  const itemQuantityWithinBox = Math.floor(boxHeight / itemHeight) + 1;\n  if (index < itemQuantityFromTop) {\n    return false;\n  }\n  if (index > itemQuantityFromTop + itemQuantityWithinBox) {\n    return false;\n  }\n  return true;\n}\n\nfunction updateRouteField(Field: HTMLElement, integration: IntegratedRoute, skeletonScreen: boolean, animation: boolean) {\n  function updateItem(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, groupIndex: number, index: number, scrollTop: number): void {\n    function updateStatus(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, groupIndex: number, index: number, scrollTop: number, animation: boolean): void {\n      /*\n      const thisItemElementRect = thisItemElement.getBoundingClientRect();\n      const top = thisItemElementRect.top;\n      const left = thisItemElementRect.left;\n      const bottom = thisItemElementRect.bottom;\n      const right = thisItemElementRect.right;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n      */\n      const thisThreadStatusElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread_status');\n      const currentThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_current_slide');\n      const nextThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_next_slide');\n\n      const thisItemStatusElement = elementQuerySelector(thisItemElement, '.css_route_group_item_status');\n      const currentItemSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n      const nextItemSlideElememt = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n\n      nextThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n\n      nextItemSlideElememt.setAttribute('code', thisItem.status.code.toString());\n      nextItemSlideElememt.innerText = thisItem.status.text;\n\n      if (animation && checkItemElementVisibility(routeSliding_fieldHeight, groupIndex, index, scrollTop)) {\n        currentThreadSlideElement.addEventListener(\n          'animationend',\n          function () {\n            currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n            currentThreadSlideElement.classList.remove('css_slide_fade_out');\n          },\n          { once: true }\n        );\n        currentItemSlideElement.addEventListener(\n          'animationend',\n          function () {\n            currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n            currentItemSlideElement.innerText = thisItem.status.text;\n            currentItemSlideElement.classList.remove('css_slide_fade_out');\n          },\n          { once: true }\n        );\n        currentThreadSlideElement.classList.add('css_slide_fade_out');\n        currentItemSlideElement.classList.add('css_slide_fade_out');\n      } else {\n        currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n\n        currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n        currentItemSlideElement.innerText = thisItem.status.text;\n      }\n    }\n\n    function updateSegmentBuffer(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n      thisThreadBoxElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n    }\n\n    function updateName(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_name').innerText = thisItem.name;\n    }\n\n    function updateBuses(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_buses').innerHTML = thisItem.buses.length === 0 ? '<div class=\"css_route_group_item_buses_message\">目前沒有公車可顯示</div>' : thisItem.buses.map((bus) => `<div class=\"css_route_group_item_bus\" on-this-route=\"${bus.onThisRoute}\"><div class=\"css_route_group_item_bus_title\"><div class=\"css_route_group_item_bus_icon\">${getIconHTML('directions_bus')}</div><div class=\"css_route_group_item_bus_car_number\">${bus.carNumber}</div></div><div class=\"css_route_group_item_bus_attributes\"><div class=\"css_route_group_item_bus_route\">路線：${bus.RouteName}</div><div class=\"css_route_group_item_bus_car_status\">狀態：${bus.status.text}</div><div class=\"css_route_group_item_bus_car_type\">類型：${bus.type}</div></div></div>`).join('');\n    }\n\n    function updateOverlappingRoutes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_overlapping_routes').innerHTML = thisItem.overlappingRoutes.length === 0 ? '<div class=\"css_route_group_item_overlapping_route_message\">目前沒有路線可顯示</div>' : thisItem.overlappingRoutes.map((route) => `<div class=\"css_route_group_item_overlapping_route\"><div class=\"css_route_group_item_overlapping_route_title\"><div class=\"css_route_group_item_overlapping_route_icon\">${getIconHTML('route')}</div><div class=\"css_route_group_item_overlapping_route_name\">${route.name}</div></div><div class=\"css_route_group_item_overlapping_route_endpoints\">${route.RouteEndPoints.html}</div><div class=\"css_route_group_item_overlapping_route_actions\"><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.route.switchRoute(${route.RouteID}, [${route.PathAttributeId.join(',')}])\">查看路線</div><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.folder.openSaveToFolder('route-on-route', [${route.RouteID}])\">收藏路線</div></div></div>`).join('');\n    }\n\n    function updateBusArrivalTimes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_bus_arrival_times').innerHTML = thisItem.busArrivalTimes.length === 0 ? '<div class=\"css_route_group_item_bus_arrival_message\">目前沒有抵達時間可顯示</div>' : thisItem.busArrivalTimes.map((busArrivalTime) => `<div class=\"css_route_group_item_bus_arrival_time\"><div class=\"css_route_group_item_bus_arrival_time_title\"><div class=\"css_route_group_item_bus_arrival_time_icon\">${getIconHTML('calendar_view_day')}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_name\">${busArrivalTime.personalSchedule.name}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_time\">週${indexToDay(busArrivalTime.day).name} ${timeObjectToString(busArrivalTime.personalSchedule.period.start)} - ${timeObjectToString(busArrivalTime.personalSchedule.period.end)}</div></div><div class=\"css_route_group_item_bus_arrival_time_chart\">${busArrivalTime.chart}</div></div>`).join('');\n    }\n\n    function updateNearest(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n      thisThreadBoxElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n    }\n\n    function updateThread(thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, animation: boolean): void {\n      const previousProgress = previousItem?.progress || 0;\n      const thisProgress = thisItem?.progress || 0;\n      const thisThreadElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread');\n      if (animation && !(previousProgress === 0) && thisProgress === 0 && Math.abs(thisProgress - previousProgress) > 0) {\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', `${100}%`);\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${100}%`);\n        thisThreadElement.addEventListener(\n          'transitionend',\n          function () {\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', `${0}%`);\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${0}%`);\n          },\n          { once: true }\n        );\n      } else {\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', `${0}%`);\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${thisProgress * 100}%`);\n      }\n    }\n\n    function updateStretch(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      if (skeletonScreen) {\n        const thisItemBodyElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body');\n        thisItemBodyElement.setAttribute('displayed', 'false');\n        thisItemElement.setAttribute('stretched', 'false');\n        thisThreadBoxElement.setAttribute('stretched', 'false');\n      }\n    }\n\n    function updateAnimation(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, animation: boolean): void {\n      thisItemElement.setAttribute('animation', booleanToString(animation));\n      thisThreadBoxElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      thisItemElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n      thisThreadBoxElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    function updateSaveToFolderButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const saveToFolderButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"save-to-folder\"]');\n      saveToFolderButtonElement.setAttribute('onclick', `bus.folder.openSaveToFolder('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}])`);\n      isFolderContentSaved('stop', thisItem.id).then((e) => {\n        saveToFolderButtonElement.setAttribute('highlighted', booleanToString(e));\n      });\n    }\n\n    function updateScheduleNotificationButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const scheduleNotificationButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"schedule-notification\"]');\n      scheduleNotificationButtonElement.setAttribute('onclick', `bus.notification.openScheduleNotification('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}, ${thisItem.status.time}])`);\n      const havingNotifcationSchedules = stopHasNotifcationSchedules(thisItem.id);\n      scheduleNotificationButtonElement.setAttribute('highlighted', booleanToString(havingNotifcationSchedules));\n    }\n\n    if (previousItem === null) {\n      updateStatus(thisItemElement, thisThreadBoxElement, thisItem, groupIndex, index, scrollTop, animation);\n      updateName(thisItemElement, thisItem);\n      updateBuses(thisItemElement, thisItem);\n      updateOverlappingRoutes(thisItemElement, thisItem);\n      updateBusArrivalTimes(thisItemElement, thisItem);\n      updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      updateThread(thisThreadBoxElement, thisItem, previousItem, animation);\n      updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateSaveToFolderButton(thisItemElement, thisItem);\n      updateScheduleNotificationButton(thisItemElement, thisItem);\n    } else {\n      if (!(thisItem.status.time === previousItem.status.time)) {\n        updateStatus(thisItemElement, thisThreadBoxElement, thisItem, groupIndex, index, scrollTop, animation);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.buses, thisItem.buses)) {\n        updateBuses(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.busArrivalTimes, thisItem.busArrivalTimes)) {\n        updateBusArrivalTimes(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.segmentBuffer, thisItem.segmentBuffer)) {\n        updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.nearest === thisItem.nearest)) {\n        updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.progress === thisItem.progress)) {\n        updateThread(thisThreadBoxElement, thisItem, previousItem, animation);\n      }\n      if (!(previousItem.id === thisItem.id)) {\n        updateName(thisItemElement, thisItem);\n        updateOverlappingRoutes(thisItemElement, thisItem);\n        updateSaveToFolderButton(thisItemElement, thisItem);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!(animation === previousAnimation)) {\n        updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      }\n      if (!(skeletonScreen === previousSkeletonScreen)) {\n        updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n        updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      }\n    }\n  }\n\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n\n  const groupQuantity = integration.groupQuantity;\n  const itemQuantity = integration.itemQuantity;\n  const groupedItems = integration.groupedItems;\n\n  routeSliding_groupQuantity = groupQuantity;\n  routeSliding_fieldWidth = FieldWidth;\n  routeSliding_fieldHeight = FieldHeight;\n\n  let cumulativeOffset = 0;\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const width = getTextWidth([integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `往${e}`)[i], 500, '17px', `\"Noto Sans TC\", sans-serif`) + tabPadding;\n    routeSliding_groupStyles[groupKey] = {\n      width: width,\n      offset: cumulativeOffset\n    };\n    cumulativeOffset += width;\n    if (!routeItemElementVisibilityCheck_groupScrollTopOffsets.hasOwnProperty(groupKey) || skeletonScreen) {\n      routeItemElementVisibilityCheck_groupScrollTopOffsets[groupKey] = 0;\n    }\n  }\n  const offset = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].offset * -1 + routeSliding_fieldWidth * 0.5 - routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width * 0.5;\n  if (!routeSliding_sliding) {\n    updateRouteCSS(routeSliding_groupQuantity, offset, routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width - tabPadding, routeSliding_initialIndex);\n  }\n\n  RouteNameElement.innerHTML = /*html*/ `<span>${integration.RouteName}</span>`;\n  RouteNameElement.setAttribute('animation', booleanToString(animation));\n  RouteNameElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabsElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabsElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabLineTrackElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabLineTrackElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n\n  RouteButtonRightElement.setAttribute('onclick', `bus.route.openRouteDetails(${integration.RouteID}, [${integration.PathAttributeId.join(',')}])`);\n\n  const currentGroupSeatQuantity = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group').length;\n  if (!(groupQuantity === currentGroupSeatQuantity)) {\n    const capacity = currentGroupSeatQuantity - groupQuantity;\n    if (capacity < 0) {\n      const RouteGroupsFragment = new DocumentFragment();\n      const RouteGroupTabsTrayFragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newGroupElement = generateElementOfGroup();\n        RouteGroupsFragment.appendChild(newGroupElement.element);\n        const newTabElement = generateElementOfTab();\n        RouteGroupTabsTrayFragment.appendChild(newTabElement.element);\n      }\n      RouteGroupsElement.append(RouteGroupsFragment);\n      RouteGroupTabsTrayElement.append(RouteGroupTabsTrayFragment);\n    } else {\n      const GroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n      const TabElements = elementQuerySelectorAll(Field, `.css_route_head .css_route_group_tabs .css_route_group_tabs_tray .css_route_group_tab`);\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const groupIndex = currentGroupSeatQuantity - 1 - o;\n        GroupElements[groupIndex].remove();\n        TabElements[groupIndex].remove();\n      }\n    }\n  }\n\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const currentItemSeatQuantity = elementQuerySelectorAll(elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_items_track'), `.css_route_group_item`).length;\n    if (!(itemQuantity[groupKey] === currentItemSeatQuantity)) {\n      const capacity = currentItemSeatQuantity - itemQuantity[groupKey];\n      if (capacity < 0) {\n        const RouteGroupItemsTrackElement = elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_items_track');\n        const RouteGroupThreadsTrackElement = elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_threads_track');\n        const RouteGroupItemsTrackFragment = new DocumentFragment();\n        const RouteGroupThreadsTrackFragment = new DocumentFragment();\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newThreadBoxElement = generateElementOfThreadBox();\n          const newItemElement = generateElementOfItem(newThreadBoxElement.id);\n          RouteGroupItemsTrackFragment.appendChild(newItemElement.element);\n          RouteGroupThreadsTrackFragment.appendChild(newThreadBoxElement.element);\n        }\n        RouteGroupItemsTrackElement.append(RouteGroupItemsTrackFragment);\n        RouteGroupThreadsTrackElement.append(RouteGroupThreadsTrackFragment);\n      } else {\n        const RouteGroupItemElements = elementQuerySelectorAll(elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_items_track'), `.css_route_group_item`);\n        const RouteGroupThreadElements = elementQuerySelectorAll(elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_threads_track'), `.css_route_group_thread_box`);\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          RouteGroupItemElements[itemIndex].remove();\n          RouteGroupThreadElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  const GroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const thisTabElement = elementQuerySelectorAll(Field, `.css_route_head .css_route_group_tabs .css_route_group_tabs_tray .css_route_group_tab`)[i];\n    thisTabElement.innerHTML = [integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `<span>往${e}</span>`)[i];\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-width', `${routeSliding_groupStyles[groupKey].width}px`);\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-index', `${i}`);\n    const thisGroupElement = GroupElements[i];\n    const thisGroupElementScrollTop = thisGroupElement.scrollTop;\n    const thisGroupItemsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_items_track');\n    const thisGroupThreadsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_threads_track');\n    const RouteGroupItemElements = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item');\n    const RouteGroupThreadElements = elementQuerySelectorAll(thisGroupThreadsTrackElement, `.css_route_group_thread_box`);\n\n    for (let j = 0; j < itemQuantity[groupKey]; j++) {\n      const thisItemElement = RouteGroupItemElements[j];\n      const thisThreadBoxElement = RouteGroupThreadElements[j];\n      const thisItem = groupedItems[groupKey][j];\n      if (previousIntegration.hasOwnProperty('groupedItems')) {\n        if (previousIntegration.groupedItems.hasOwnProperty(groupKey)) {\n          if (previousIntegration.groupedItems[groupKey][j]) {\n            const previousItem = previousIntegration.groupedItems[groupKey][j];\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, previousItem, i, j, thisGroupElementScrollTop);\n          } else {\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, i, j, thisGroupElementScrollTop);\n          }\n        } else {\n          updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, i, j, thisGroupElementScrollTop);\n        }\n      } else {\n        updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, i, j, thisGroupElementScrollTop);\n      }\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshRoute() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  const busArrivalTimeChartSize = querySize('route-bus-arrival-time-chart');\n  routeRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  routeRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  routeRefreshTimer_refreshing = true;\n  routeRefreshTimer_currentRequestID = generateIdentifier('r');\n  RouteUpdateTimerElement.setAttribute('refreshing', 'true');\n  const integration = await integrateRoute(currentRouteIDSet_RouteID, currentRouteIDSet_PathAttributeId, busArrivalTimeChartSize.width, busArrivalTimeChartSize.height, routeRefreshTimer_currentRequestID);\n  updateRouteField(RouteField, integration, false, playing_animation);\n  let updateRate = 0;\n  if (routeRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  routeRefreshTimer_lastUpdate = new Date().getTime();\n  if (routeRefreshTimer_dynamic) {\n    routeRefreshTimer_nextUpdate = Math.max(routeRefreshTimer_lastUpdate + routeRefreshTimer_minInterval, integration.dataUpdateTime + routeRefreshTimer_baseInterval / updateRate);\n  } else {\n    routeRefreshTimer_nextUpdate = routeRefreshTimer_lastUpdate + routeRefreshTimer_baseInterval;\n  }\n  routeRefreshTimer_dynamicInterval = Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - routeRefreshTimer_lastUpdate);\n  routeRefreshTimer_refreshing = false;\n  RouteUpdateTimerElement.setAttribute('refreshing', 'false');\n}\n\nexport function streamRoute(): void {\n  refreshRoute()\n    .then(function () {\n      if (routeRefreshTimer_streaming) {\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (routeRefreshTimer_streaming) {\n        promptMessage(`（路線）發生網路錯誤，將在${routeRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, routeRefreshTimer_retryInterval);\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function openRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  pushPageHistory('Route');\n  logRecentView('route', RouteID);\n  currentRouteIDSet_RouteID = RouteID;\n  currentRouteIDSet_PathAttributeId = PathAttributeId;\n  routeSliding_initialIndex = 0;\n  RouteField.setAttribute('displayed', 'true');\n  elementQuerySelector(RouteField, '.css_route_groups').scrollLeft = 0;\n  setUpRouteFieldSkeletonScreen(RouteField);\n  if (!routeRefreshTimer_streaming) {\n    routeRefreshTimer_streaming = true;\n    if (!routeRefreshTimer_streamStarted) {\n      routeRefreshTimer_streamStarted = true;\n      streamRoute();\n    } else {\n      refreshRoute();\n    }\n    routeRefreshTimer_currentProgress = -1;\n    routeRefreshTimer_targetProgress = -1;\n    updateUpdateTimer();\n  }\n  closePreviousPage();\n}\n\nexport function closeRoute(): void {\n  // revokePageHistory('Route');\n  RouteField.setAttribute('displayed', 'false');\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  routeRefreshTimer_targetProgress = -1;\n  openPreviousPage();\n}\n\nexport function switchRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  routeRefreshTimer_targetProgress = -1;\n  openRoute(RouteID, PathAttributeId);\n}\n\nexport function stretchRouteItemBody(itemElementID: string, threadBoxElementID: string): void {\n  const itemElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_items_track .css_route_group_item#${itemElementID}`);\n  const itemBodyElement = elementQuerySelector(itemElement, '.css_route_group_item_body');\n  const threadBoxElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_threads_track .css_route_group_thread_box#${threadBoxElementID}`);\n  const groupKey = `g_${routeSliding_initialIndex}`;\n  if (itemElement.getAttribute('stretched') === 'true') {\n    if (itemElement.getAttribute('animation') === 'true') {\n      itemBodyElement.addEventListener(\n        'transitionend',\n        function () {\n          itemBodyElement.setAttribute('displayed', 'false');\n        },\n        { once: true }\n      );\n    } else {\n      itemBodyElement.setAttribute('displayed', 'false');\n    }\n    itemElement.setAttribute('stretched', 'false');\n    threadBoxElement.setAttribute('stretched', 'false');\n    routeItemElementVisibilityCheck_groupScrollTopOffsets[groupKey] += 171;\n  } else {\n    itemBodyElement.setAttribute('displayed', 'true');\n    itemElement.setAttribute('stretched', 'true');\n    threadBoxElement.setAttribute('stretched', 'true');\n    routeItemElementVisibilityCheck_groupScrollTopOffsets[groupKey] -= 171;\n  }\n}\n\nexport function switchRouteBodyTab(itemID: string, tabCode: number): void {\n  const itemElement = elementQuerySelector(RouteGroupsElement, `.css_route_group_item#${itemID}`);\n  const buttons = elementQuerySelector(itemElement, '.css_route_group_item_buttons');\n  const button = elementQuerySelectorAll(buttons, '.css_route_group_item_button[highlighted=\"true\"][type=\"tab\"]');\n  for (const t of button) {\n    t.setAttribute('highlighted', 'false');\n  }\n  elementQuerySelector(buttons, `.css_route_group_item_button[code=\"${tabCode}\"]`).setAttribute('highlighted', 'true');\n  switch (tabCode) {\n    case 0:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      break;\n    case 1:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'true');\n      break;\n    case 2:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      break;\n    default:\n      break;\n  }\n}\n"],"names":["RouteField","documentQuerySelector","RouteHeadElement","elementQuerySelector","RouteNameElement","RouteButtonRightElement","RouteUpdateTimerElement","RouteGroupTabsElement","RouteGroupTabsTrayElement","RouteGroupTabLineTrackElement","RouteGroupTabLineElement","RouteGroupsElement","previousIntegration","previousAnimation","previousSkeletonScreen","routeSliding_initialIndex","routeSliding_targetIndex","routeSliding_groupQuantity","routeSliding_groupStyles","routeSliding_fieldWidth","routeSliding_fieldHeight","routeSliding_sliding","routeRefreshTimer_retryInterval","routeRefreshTimer_baseInterval","routeRefreshTimer_minInterval","routeRefreshTimer_dynamicInterval","routeRefreshTimer_dynamic","routeRefreshTimer_streaming","routeRefreshTimer_lastUpdate","routeRefreshTimer_nextUpdate","routeRefreshTimer_refreshing","routeRefreshTimer_currentRequestID","routeRefreshTimer_currentProgress","routeRefreshTimer_targetProgress","routeRefreshTimer_streamStarted","routeItemElementVisibilityCheck_groupScrollTopOffsets","currentRouteIDSet_RouteID","currentRouteIDSet_PathAttributeId","tabPadding","initializeRouteSliding","addEventListener","Math","round","scrollLeft","passive","event","currentIndex","target","initialSize","concat","width","offset","targetSize","tabWidth","abs","updateRouteCSS","ResizeRouteField","WindowSize","querySize","FieldWidth","FieldHeight","height","style","setProperty","groupQuantity","tabLineWidth","percentage","toString","toFixed","updateUpdateTimer","time","Date","getTime","getDataReceivingProgress","min","max","window","requestAnimationFrame","generateElementOfThreadBox","identifier","generateIdentifier","element","document","createElement","classList","add","id","setAttribute","innerHTML","generateElementOfItem","threadBoxIdentifier","getIconHTML","generateElementOfGroup","tracksElement","threadTrackElement","itemsTrackElement","appendChild","updateRouteField","Field","integration","skeletonScreen","animation","updateItem","thisItemElement","thisThreadBoxElement","thisItem","previousItem","groupIndex","index","scrollTop","updateStatus","thisThreadStatusElement","currentThreadSlideElement","nextThreadSlideElement","thisItemStatusElement","currentItemSlideElement","nextItemSlideElememt","status","code","innerText","text","boxHeight","groupKey","offsetedScrollTop","itemQuantityFromTop","floor","itemQuantityWithinBox","checkItemElementVisibility","remove","once","updateSegmentBuffer","booleanToString","segmentBuffer","isSegmentBuffer","updateName","name","updateBuses","buses","length","map","bus","onThisRoute","carNumber","RouteName","type","join","updateOverlappingRoutes","overlappingRoutes","route","RouteEndPoints","html","RouteID","PathAttributeId","updateBusArrivalTimes","busArrivalTimes","busArrivalTime","personalSchedule","indexToDay","day","timeObjectToString","period","start","end","chart","updateNearest","nearest","updateThread","previousProgress","progress","thisProgress","thisThreadElement","updateStretch","updateAnimation","updateSkeletonScreen","updateSaveToFolderButton","saveToFolderButtonElement","isFolderContentSaved","then","e","updateScheduleNotificationButton","scheduleNotificationButtonElement","havingNotifcationSchedules","stopHasNotifcationSchedules","compareThings","itemQuantity","groupedItems","cumulativeOffset","i","getTextWidth","RouteDestination","RouteDeparture","hasOwnProperty","currentGroupSeatQuantity","elementQuerySelectorAll","capacity","RouteGroupsFragment","DocumentFragment","RouteGroupTabsTrayFragment","o","newGroupElement","newTabElement","append","GroupElements","TabElements","currentItemSeatQuantity","RouteGroupItemsTrackElement","RouteGroupThreadsTrackElement","RouteGroupItemsTrackFragment","RouteGroupThreadsTrackFragment","newThreadBoxElement","newItemElement","RouteGroupItemElements","RouteGroupThreadElements","itemIndex","thisTabElement","thisGroupElement","thisGroupElementScrollTop","thisGroupItemsTrackElement","thisGroupThreadsTrackElement","j","refreshRoute","_refreshRoute","apply","arguments","playing_animation","getSettingOptionValue","refresh_interval_setting","busArrivalTimeChartSize","dynamic","baseInterval","integrateRoute","updateRate","getUpdateRate","dataUpdateTime","streamRoute","setTimeout","err","console","error","promptMessage","openRoute","pushPageHistory","logRecentView","defaultItemQuantity","push","goBack","sequence","position","longitude","latitude","isStartingPoint","isEndingPoint","g_0","g_1","setUpRouteFieldSkeletonScreen","closePreviousPage","closeRoute","openPreviousPage","switchRoute","stretchRouteItemBody","itemElementID","threadBoxElementID","itemElement","itemBodyElement","threadBoxElement","getAttribute","switchRouteBodyTab","itemID","tabCode","_step","buttons","_iterator","_createForOfIteratorHelper","s","n","done","value","f"],"sourceRoot":""}