{"version":3,"file":"51ca835e7ea16644e2dd.js","mappings":"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","sources":["webpack://bus/./src/interface/schedule-notification/index.ts","webpack://bus/./src/interface/storage/index.ts","webpack://bus/./src/interface/save-to-folder/index.ts","webpack://bus/./src/interface/search/index.ts","webpack://bus/./src/interface/settings/index.ts","webpack://bus/./src/interface/settings/options.ts"],"sourcesContent":["import { scheduleNotificationForStop, ScheduleNotificationOption, scheduleNotificationOptions } from '../../data/notification/index';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\nimport { getIconHTML } from '../icons/index';\nimport { GeneratedElement, pushPageHistory, revokePageHistory } from '../index';\nimport { promptMessage } from '../prompt/index';\n\nconst ScheduleNotificationField = documentQuerySelector('.css_schedule_notification_field');\nconst ScheduleNotificationBodyElement = elementQuerySelector(ScheduleNotificationField, '.css_schedule_notification_body');\nconst ScheduleNotificationListElement = elementQuerySelector(ScheduleNotificationBodyElement, '.css_schedule_notification_list');\n\ntype ScheduleNotificationType = 'stop-on-route' | 'stop-on-location';\n\nfunction generateElementOfItem(item: ScheduleNotificationOption, type: ScheduleNotificationType, parameters: Array): GeneratedElement {\n  // const identifier = generateIdentifier('i');\n  const element = document.createElement('div');\n  element.classList.add('css_schedule_notification_list_item');\n  // element.id = identifier;\n  switch (type) {\n    case 'stop-on-route':\n      element.setAttribute('onclick', `bus.notification.scheduleNotificationForStopItemOnRoute('${parameters[0]}', ${parameters[1]}, ${parameters[2]}, ${parameters[3]}, ${item.index})`);\n      break;\n    case 'stop-on-location':\n      element.setAttribute('onclick', `bus.notification.scheduleNotificationForStopItemOnLocation('${parameters[0]}', ${parameters[1]}, ${parameters[2]}, ${parameters[3]}, ${item.index})`);\n      break;\n    default:\n      break;\n  }\n  element.innerHTML = /*html*/ `<div class=\"css_schedule_notification_item_icon\">${getIconHTML(item.icon)}</div><div class=\"css_schedule_notification_item_name\">${item.name}</div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction initializeScheduleNotificationField(type: ScheduleNotificationType, parameters: Array<any>): void {\n  ScheduleNotificationListElement.innerHTML = '';\n  const fragment = new DocumentFragment();\n  for (const item of scheduleNotificationOptions) {\n    const newElement = generateElementOfItem(item, type, parameters);\n    fragment.append(newElement.element);\n  }\n  ScheduleNotificationListElement.append(fragment);\n}\n\nexport function openScheduleNotification(type: ScheduleNotificationType, parameters: Array<any>): void {\n  pushPageHistory('ScheduleNotification');\n  ScheduleNotificationField.setAttribute('displayed', 'true');\n  initializeScheduleNotificationField(type, parameters);\n}\n\nexport function closeScheduleNotification(): void {\n  revokePageHistory('ScheduleNotification');\n  ScheduleNotificationField.setAttribute('displayed', 'false');\n}\n\nexport function scheduleNotificationForStopItemOnRoute(itemElementID: string, StopID: number, RouteID: number, EstimateTime: number, index: number): void {\n  const itemElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_items_track .css_route_group_item#${itemElementID}`);\n  const scheduleNotificationButtonElement = elementQuerySelector(itemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"schedule-notification\"]');\n  promptMessage('處理中', 'manufacturing');\n  scheduleNotificationButtonElement.setAttribute('enabled', 'false');\n  closeScheduleNotification();\n  scheduleNotificationForStop(StopID, RouteID, EstimateTime, index).then((result) => {\n    switch (result) {\n      case 0:\n        promptMessage('設定失敗', 'error');\n        scheduleNotificationButtonElement.setAttribute('enabled', 'true');\n        break;\n      case 1:\n        promptMessage('設定成功', 'check_circle');\n        scheduleNotificationButtonElement.setAttribute('enabled', 'true');\n        scheduleNotificationButtonElement.setAttribute('highlighted', 'true');\n        break;\n      case 2:\n        promptMessage('在設定中註冊後才可設定到站通知', 'warning');\n        scheduleNotificationButtonElement.setAttribute('enabled', 'true');\n        break;\n      default:\n        break;\n    }\n  });\n}\n\nexport function scheduleNotificationForStopItemOnLocation(itemElementID: string, StopID: number, RouteID: number, EstimateTime: number, index: number): void {\n  const itemElement = documentQuerySelector(`.css_location_field .css_location_groups .css_location_group .css_location_group_items .css_location_group_item#${itemElementID}`);\n  const scheduleNotificationButtonElement = elementQuerySelector(itemElement, '.css_location_group_item_body .css_location_group_item_buttons .css_location_group_item_button[type=\"schedule-notification\"]');\n  promptMessage('處理中', 'manufacturing');\n  scheduleNotificationButtonElement.setAttribute('enabled', 'false');\n  closeScheduleNotification();\n  scheduleNotificationForStop(StopID, RouteID, EstimateTime, index).then((result) => {\n    switch (result) {\n      case 0:\n        promptMessage('設定失敗', 'error');\n        scheduleNotificationButtonElement.setAttribute('enabled', 'true');\n        break;\n      case 1:\n        promptMessage('設定成功', 'check_circle');\n        scheduleNotificationButtonElement.setAttribute('enabled', 'true');\n        scheduleNotificationButtonElement.setAttribute('highlighted', 'true');\n        break;\n      case 2:\n        promptMessage('在設定中註冊後才可設定到站通知', 'warning');\n        scheduleNotificationButtonElement.setAttribute('enabled', 'true');\n        break;\n      default:\n        break;\n    }\n  });\n}\n","import { getStoresSizeStatistics, StoreSize } from '../../data/analytics/storage-size';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\nimport { GeneratedElement } from '../index';\n\nconst StorageField = documentQuerySelector('.css_storage_field');\nconst StorageBodyElement = elementQuerySelector(StorageField, '.css_storage_body');\nconst StatisticsElement = elementQuerySelector(StorageBodyElement, '.css_storage_statistics');\n\nfunction generateElementOfItem(item: StoreSize): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_storage_statistics_item');\n  element.innerHTML = /*html*/ `<div class=\"css_storage_statistics_item_name\">${item.category.name}</div><div class=\"css_storage_statistics_item_value\">${item.size}</div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nasync function initializeStorageStatistics() {\n  const statistics = await getStoresSizeStatistics();\n  StatisticsElement.innerHTML = '';\n  const fragment = new DocumentFragment();\n  for (const key in statistics.categorizedSizes) {\n    const item = statistics.categorizedSizes[key];\n    const newItemElement = generateElementOfItem(item);\n    fragment.appendChild(newItemElement.element);\n  }\n  StatisticsElement.append(fragment);\n}\n\nexport function openStorage(): void {\n  StorageField.setAttribute('displayed', 'true');\n  initializeStorageStatistics();\n}\n\nexport function closeStorage(): void {\n  StorageField.setAttribute('displayed', 'false');\n}\n","import { FolderWithContent, isFolderContentSaved, listFoldersWithContent, saveRoute, saveStop } from '../../data/folder/index';\nimport { booleanToString } from '../../tools/index';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\nimport { getIconHTML } from '../icons/index';\nimport { GeneratedElement, pushPageHistory, revokePageHistory } from '../index';\nimport { promptMessage } from '../prompt/index';\n\ntype SaveToFolderType = 'stop-on-route' | 'stop-on-location' | 'route' | 'bus';\n\nconst SaveToFolderField = documentQuerySelector('.css_save_to_folder_field');\nconst SaveToFolderBodyElement = elementQuerySelector(SaveToFolderField, '.css_save_to_folder_body');\nconst SaveToFolderListElement = elementQuerySelector(SaveToFolderBodyElement, '.css_save_to_folder_list');\n\nfunction generateElementOfItem(item: FolderWithContent, type: SaveToFolderType, parameters: Array<any>): GeneratedElement {\n  // const identifier = generateIdentifier('i');\n  const element = document.createElement('div');\n  element.classList.add('css_save_to_folder_list_item');\n  // element.id = identifier;\n  switch (type) {\n    case 'stop-on-route':\n      element.setAttribute('onclick', `bus.folder.saveStopItemOnRoute('${parameters[0]}', '${item.id}', ${parameters[1]}, ${parameters[2]})`);\n      break;\n    case 'stop-on-location':\n      element.setAttribute('onclick', `bus.folder.saveStopItemOnLocation('${parameters[0]}', '${item.id}', ${parameters[1]}, ${parameters[2]})`);\n      break;\n    case 'route':\n      element.setAttribute('onclick', `bus.folder.saveRouteOnDetailsPage('${item.id}', ${parameters[0]})`);\n      break;\n    case 'route-on-route':\n      element.setAttribute('onclick', `bus.folder.saveRouteOnRoute('${item.id}', ${parameters[0]})`);\n      break;\n    case 'bus':\n      break;\n    default:\n      break;\n  }\n  element.innerHTML = /*html*/ `<div class=\"css_save_to_folder_item_icon\">${getIconHTML(item.icon)}</div><div class=\"css_save_to_folder_item_name\">${item.name}</div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nasync function initializeSaveToFolderField(type: SaveToFolderType, parameters: Array<any>) {\n  SaveToFolderListElement.innerHTML = '';\n  const foldersWithContent = await listFoldersWithContent();\n  for (const item of foldersWithContent) {\n    const newItemElement = generateElementOfItem(item, type, parameters);\n    SaveToFolderListElement.appendChild(newItemElement.element);\n  }\n}\n\nexport function openSaveToFolder(type: SaveToFolderType, parameters: Array<any>): void {\n  pushPageHistory('SaveToFolder');\n  SaveToFolderField.setAttribute('displayed', 'true');\n  initializeSaveToFolderField(type, parameters);\n}\n\nexport function closeSaveToFolder(): void {\n  revokePageHistory('SaveToFolder');\n  SaveToFolderField.setAttribute('displayed', 'false');\n}\n\nexport function saveStopItemOnRoute(itemElementID: string, folderID: string, StopID: number, RouteID: number): void {\n  const itemElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_items_track .css_route_group_item#${itemElementID}`);\n  const saveToFolderButtonElement = elementQuerySelector(itemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"save-to-folder\"]');\n  saveStop(folderID, StopID, RouteID).then((e) => {\n    if (e) {\n      isFolderContentSaved('stop', StopID).then((k) => {\n        if (k) {\n          saveToFolderButtonElement.setAttribute('highlighted', booleanToString(k));\n          promptMessage('已儲存至資料夾', 'folder');\n          closeSaveToFolder();\n        }\n      });\n    } else {\n      promptMessage('無法儲存', 'warning');\n    }\n  });\n}\n\nexport function saveStopItemOnLocation(itemElementID: string, folderID: string, StopID: number, RouteID: number): void {\n  const itemElement = documentQuerySelector(`.css_location_field .css_location_groups .css_location_group .css_location_group_items .css_location_group_item#${itemElementID}`);\n  const saveToFolderButtonElement = elementQuerySelector(itemElement, '.css_location_group_item_body .css_location_group_item_buttons .css_location_group_item_button[type=\"save-to-folder\"]');\n  saveStop(folderID, StopID, RouteID).then((e) => {\n    if (e) {\n      isFolderContentSaved('stop', StopID).then((k) => {\n        if (k) {\n          saveToFolderButtonElement.setAttribute('highlighted', booleanToString(k));\n          promptMessage('已儲存至資料夾', 'folder');\n          closeSaveToFolder();\n        }\n      });\n    } else {\n      promptMessage('無法儲存', 'warning');\n    }\n  });\n}\n\nexport function saveRouteOnDetailsPage(folderID: string, RouteID: number): void {\n  const actionButtonElement = documentQuerySelector('.css_route_details_field .css_route_details_body .css_route_details_groups .css_route_details_group[group=\"actions\"] .css_route_details_group_body .css_route_details_action_button[action=\"save-to-folder\"]');\n  saveRoute(folderID, RouteID).then((e) => {\n    if (e) {\n      isFolderContentSaved('route', RouteID).then((k) => {\n        if (k) {\n          actionButtonElement.setAttribute('highlighted', 'true');\n          promptMessage('已儲存至資料夾', 'folder');\n          closeSaveToFolder();\n        }\n      });\n    } else {\n      promptMessage('無法儲存', 'warning');\n    }\n  });\n}\n\nexport function saveRouteOnRoute(folderID: string, RouteID: number): void {\n  saveRoute(folderID, RouteID).then((e) => {\n    if (e) {\n      isFolderContentSaved('route', RouteID).then((k) => {\n        if (k) {\n          promptMessage('已儲存至資料夾', 'folder');\n          closeSaveToFolder();\n        }\n      });\n    } else {\n      promptMessage('無法儲存', 'warning');\n    }\n  });\n}\n","import { prepareForSearch, searchFor, SearchItem } from '../../data/search/index';\nimport { drawRoundedRect } from '../../tools/graphic';\nimport { supportTouch } from '../../tools/index';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\nimport { getCSSVariableValue } from '../../tools/style';\nimport { containPhoneticSymbols } from '../../tools/text';\nimport { dataDownloadCompleted } from '../home/index';\nimport { getIconHTML } from '../icons/index';\nimport { MaterialSymbols } from '../icons/material-symbols-type';\nimport { pushPageHistory, querySize, revokePageHistory } from '../index';\nimport { promptMessage } from '../prompt/index';\n\nconst searchField = documentQuerySelector('.css_search_field');\nconst searchHeadElement = elementQuerySelector(searchField, '.css_search_head');\nconst searchBodyElement = elementQuerySelector(searchField, '.css_search_body');\nconst searchInputElement = elementQuerySelector(searchHeadElement, '.css_search_search_input #search_input') as HTMLInputElement;\nconst searchInputCanvasElement = elementQuerySelector(searchHeadElement, '.css_search_search_input canvas');\nconst searchTypeFilterButtonElement = elementQuerySelector(searchHeadElement, '.css_search_button_right');\nconst searchResultsElement = elementQuerySelector(searchBodyElement, '.css_search_results');\nconst searchKeyboardElement = elementQuerySelector(searchBodyElement, '.css_search_keyboard');\n\nconst searchInputCanvasContext = searchInputCanvasElement.getContext('2d');\nconst searchInputPlaceholder = '搜尋路線、地點、公車';\nconst searchInputCanvasScale = window.devicePixelRatio;\n\nconst padding: number = 15 * searchInputCanvasScale;\nconst cursorWidth: number = 1.8 * searchInputCanvasScale;\nconst cursorBorderRadius: number = 0.9 * searchInputCanvasScale;\nconst selectionHighlightBorderRadius: number = 4 * searchInputCanvasScale;\nconst lineHeight: number = 25 * searchInputCanvasScale;\nconst fontSize: number = 20 * searchInputCanvasScale;\nconst fontFamily: string = '\"Noto Sans TC\", sans-serif';\n\nlet textColor: string = getCSSVariableValue('--b-cssvar-333333');\nlet placeholderTextColor: string = getCSSVariableValue('--b-cssvar-aeaeb2');\nlet cursorColor: string = getCSSVariableValue('--b-cssvar-main-color');\nlet textWidth: number = 0;\nlet textWidthToCursorStart: number = 0;\nlet selectedTextWidth: number = 0;\nlet selection: boolean = false;\nlet cursorOffset: number = 0;\nlet size = querySize('head-two-button');\nlet width = size.width * searchInputCanvasScale;\nlet height = size.height * searchInputCanvasScale;\nlet playingCursorAnimation: boolean = false;\n\nexport function getSearchInputValue(): string {\n  return String(searchInputElement.value);\n}\n\nexport function getSearchTypeFilterValue(): SearchItem['type'] | -1 {\n  return parseInt(searchTypeFilterButtonElement.getAttribute('type'));\n}\n\nexport function openSearch(): void {\n  if (dataDownloadCompleted) {\n    pushPageHistory('Search');\n    searchField.setAttribute('displayed', 'true');\n    openKeyboard();\n    prepareForSearch();\n  } else {\n    promptMessage('資料還在下載中', 'download_for_offline');\n  }\n}\n\nexport function closeSearch(): void {\n  revokePageHistory('Search');\n  closeKeyboard();\n  searchField.setAttribute('displayed', 'false');\n}\n\nexport function resizeSearchInputCanvas(): void {\n  size = querySize('head-two-button');\n  width = size.width;\n  height = size.height;\n  searchInputCanvasElement.width = width * searchInputCanvasScale;\n  searchInputCanvasElement.height = height * searchInputCanvasScale;\n  updateSearchInput(-1, -1);\n}\n\nfunction initializeKeyboard(): void {\n  const keyboardKeys: Array<[string, string, string, string, string]> = [\n    ['紅', '藍', '1', '2', '3'],\n    ['綠', '棕', '4', '5', '6'],\n    ['橘', '小', '7', '8', '9'],\n    ['鍵盤', '幹線', '清空', '0', '刪除']\n  ];\n  const result: Array<string> = [];\n  for (const row of keyboardKeys) {\n    for (const column of row) {\n      let eventScript = '';\n      let eventType = 'onmousedown';\n      let html = '';\n      switch (column) {\n        case '刪除':\n          eventScript = 'bus.search.deleteCharFromInout()';\n          html = getIconHTML('backspace');\n          break;\n        case '清空':\n          eventScript = 'bus.search.emptyInput()';\n          html = column;\n          break;\n        case '鍵盤':\n          eventScript = 'bus.search.openSystemKeyboard(event)';\n          html = getIconHTML('keyboard');\n          break;\n        default:\n          eventScript = `bus.search.typeTextIntoInput('${column}')`;\n          html = column;\n          break;\n      }\n\n      if (supportTouch()) {\n        eventType = 'ontouchstart';\n      }\n      result.push(`<button class=\"css_search_keyboard_key\" ${eventType}=\"${eventScript}\">${html}</button>`);\n    }\n  }\n  searchKeyboardElement.innerHTML = result.join('');\n}\n\nexport function openKeyboard(): void {\n  initializeKeyboard();\n  searchKeyboardElement.setAttribute('displayed', 'true');\n\n  playingCursorAnimation = true;\n  animateCursor();\n\n  updateSearchInput(-1, -1);\n}\n\nexport function closeKeyboard(): void {\n  searchKeyboardElement.setAttribute('displayed', 'false');\n  playingCursorAnimation = false;\n}\n\nexport function typeTextIntoInput(value): void {\n  const currentValue = getSearchInputValue();\n  const newValue = `${currentValue}${value}`;\n  searchInputElement.value = newValue;\n  updateSearchResult();\n  updateSearchInput(-1, -1);\n}\n\nexport function deleteCharFromInout(): void {\n  const currentValue = getSearchInputValue();\n  const newValue = currentValue.substring(0, currentValue.length - 1);\n  searchInputElement.value = newValue;\n  updateSearchResult();\n  updateSearchInput(-1, -1);\n}\n\nexport function emptyInput(): void {\n  searchInputElement.value = '';\n  updateSearchResult();\n  updateSearchInput(-1, -1);\n}\n\nexport function openSystemKeyboard(event: Event): void {\n  event.preventDefault();\n  searchInputElement.focus();\n}\n\nexport function updateSearchInput(cursorStart: number, cursorEnd: number): void {\n  let value = getSearchInputValue();\n  let empty = false;\n  if (value.length === 0) {\n    value = searchInputPlaceholder;\n    empty = true;\n    cursorStart = 0;\n    cursorEnd = 0;\n  } else {\n    if (cursorStart === -1 && cursorEnd === -1) {\n      cursorStart = value.length;\n      cursorEnd = cursorStart * 1;\n    }\n  }\n\n  size = querySize('head-two-button');\n  width = size.width * searchInputCanvasScale;\n  height = size.height * searchInputCanvasScale;\n  textColor = getCSSVariableValue('--b-cssvar-333333');\n  placeholderTextColor = getCSSVariableValue('--b-cssvar-aeaeb2');\n  cursorColor = getCSSVariableValue('--b-cssvar-main-color');\n\n  searchInputCanvasContext.font = `500 ${fontSize}px ${fontFamily}`;\n  searchInputCanvasContext.textAlign = 'center';\n  searchInputCanvasContext.textBaseline = 'middle';\n\n  textWidth = searchInputCanvasContext.measureText(value).width;\n  textWidthToCursorStart = searchInputCanvasContext.measureText(value.substring(0, cursorStart)).width;\n  selectedTextWidth = searchInputCanvasContext.measureText(value.substring(cursorStart, cursorEnd)).width;\n  cursorOffset = empty ? 1 : Math.max(1, textWidthToCursorStart);\n\n  searchInputCanvasContext.clearRect(0, 0, width, height);\n\n  if (cursorStart === cursorEnd) {\n    selection = true;\n    searchInputCanvasContext.globalAlpha = 1;\n    searchInputCanvasContext.fillStyle = empty ? placeholderTextColor : textColor;\n    searchInputCanvasContext.fillText(value, textWidth / 2 + (Math.min(cursorOffset, width - padding) - cursorOffset), height / 2);\n    drawRoundedRect(searchInputCanvasContext, Math.min(cursorOffset, width - padding), (height - lineHeight) / 2, cursorWidth, lineHeight, cursorBorderRadius, cursorColor);\n  } else {\n    selection = false;\n    searchInputCanvasContext.globalAlpha = 0.27;\n    drawRoundedRect(searchInputCanvasContext, Math.min(cursorOffset, width - padding), (height - lineHeight) / 2, selectedTextWidth, lineHeight, selectionHighlightBorderRadius, cursorColor);\n    searchInputCanvasContext.globalAlpha = 1;\n    searchInputCanvasContext.fillStyle = empty ? placeholderTextColor : textColor;\n    searchInputCanvasContext.fillText(value, textWidth / 2 + (Math.min(cursorOffset, width - padding) - cursorOffset), height / 2);\n    searchInputCanvasContext.globalAlpha = 0.08;\n    drawRoundedRect(searchInputCanvasContext, Math.min(cursorOffset, width - padding), (height - lineHeight) / 2, selectedTextWidth, lineHeight, selectionHighlightBorderRadius, cursorColor);\n  }\n}\n\nexport function updateSearchResult(): void {\n  const currentType = getSearchTypeFilterValue();\n  const currentValue = getSearchInputValue();\n  if (!containPhoneticSymbols(currentValue)) {\n    const typeToIcon: Array<MaterialSymbols> = ['route', 'location_on', 'directions_bus'];\n    const html: Array<string> = [];\n    const searchResults = searchFor(currentValue, currentType, 30);\n    for (const result of searchResults) {\n      const name = result.item.n;\n      const typeIcon = getIconHTML(typeToIcon[result.item.type]);\n      let onclickScript = '';\n      switch (result.item.type) {\n        case 0:\n          onclickScript = `bus.route.openRoute(${result.item.id}, [${result.item.pid.join(',')}])`;\n          break;\n        case 1:\n          onclickScript = `bus.location.openLocation('${result.item.hash}')`;\n          break;\n        case 2:\n          onclickScript = `bus.bus.openBus(${result.item.id})`;\n          break;\n        default:\n          break;\n      }\n      html.push(`<div class=\"css_search_search_result\" onclick=\"${onclickScript}\"><div class=\"css_search_search_result_type\">${typeIcon}</div><div class=\"css_search_search_result_route_name\">${name}</div></div>`);\n    }\n    searchResultsElement.innerHTML = html.join('');\n  }\n}\n\nexport function switchSearchTypeFilter(): void {\n  const currentType = getSearchTypeFilterValue();\n  let newType: number = -1;\n  if (currentType >= -1 && currentType < 2) {\n    newType = currentType + 1;\n  } else {\n    newType = -1;\n  }\n  const icons: Array<MaterialSymbols> = ['filter_list', 'route', 'location_on', 'directions_bus'];\n  searchTypeFilterButtonElement.innerHTML = getIconHTML(icons[newType + 1]);\n  searchTypeFilterButtonElement.setAttribute('type', newType.toString());\n  updateSearchResult();\n}\n\nfunction animateCursor(): void {\n  const x = performance.now();\n  const alpha = 1 - Math.pow(Math.sin((Math.PI * x) / 960), 4);\n  if (selection) {\n    searchInputCanvasContext.globalAlpha = alpha;\n    searchInputCanvasContext.clearRect(Math.min(cursorOffset, width - padding) - 1, 0, cursorWidth + 2, height);\n    drawRoundedRect(searchInputCanvasContext, Math.min(cursorOffset, width - padding), (height - lineHeight) / 2, cursorWidth, lineHeight, cursorBorderRadius, cursorColor);\n  }\n  if (playingCursorAnimation) {\n    window.requestAnimationFrame(animateCursor);\n  }\n}\n","import { exportData } from '../../data/export/index';\nimport { importData } from '../../data/import/index';\nimport { listSettings, Setting } from '../../data/settings/index';\nimport { getCommitURLOfCurrentVersion } from '../../data/settings/version';\nimport { askForPersistentStorage } from '../../data/storage/index';\nimport { generateIdentifier, releaseFile } from '../../tools/index';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\nimport { getIconHTML } from '../icons/index';\nimport { GeneratedElement, pushPageHistory, revokePageHistory } from '../index';\nimport { promptMessage } from '../prompt/index';\n\nconst SettingsField = documentQuerySelector('.css_settings_field');\nconst SettingsBodyElement = elementQuerySelector(SettingsField, '.css_settings_body');\nconst SettingsElement = elementQuerySelector(SettingsBodyElement, '.css_settings');\n\nfunction generateElementOfItem(item: Setting): GeneratedElement {\n  // const identifier = generateIdentifier('i');\n  const element = document.createElement('div');\n  element.classList.add('css_setting');\n  // element.id = identifier;\n  element.setAttribute('onclick', item.action);\n  element.setAttribute('type', item.type);\n  element.innerHTML = /*html*/ `<div class=\"css_setting_icon\">${getIconHTML(item.icon)}</div><div class=\"css_setting_name\">${item.name}</div><div class=\"css_setting_status\">${item.status}</div><div class=\"css_setting_arrow\">${getIconHTML('arrow_forward_ios')}</div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nasync function initializeSettingsField() {\n  const list = await listSettings();\n  SettingsElement.innerHTML = '';\n  const fragment = new DocumentFragment();\n  for (const item of list) {\n    const thisElement = generateElementOfItem(item);\n    fragment.appendChild(thisElement.element);\n  }\n  SettingsElement.append(fragment);\n}\n\nexport function openSettings(): void {\n  pushPageHistory('Settings');\n  SettingsField.setAttribute('displayed', 'true');\n  initializeSettingsField();\n}\n\nexport function closeSettings(): void {\n  revokePageHistory('Settings');\n  SettingsField.setAttribute('displayed', 'false');\n}\n\nexport async function downloadExportFile() {\n  const exportedData = await exportData();\n  releaseFile(exportedData, 'application/json', 'bus-export.json');\n}\n\nexport function openFileToImportData(): void {\n  const identifier = generateIdentifier('i');\n  const fileInput = document.createElement('input');\n  fileInput.setAttribute('type', 'file');\n  fileInput.setAttribute('accept', 'application/json');\n  fileInput.setAttribute('name', identifier);\n  fileInput.id = identifier;\n  fileInput.classList.add('css_import_file_input');\n  fileInput.addEventListener(\n    'change',\n    function (event) {\n      // Check if a file is selected\n      if (event.target.files.length === 0) {\n        documentQuerySelector(`body #${identifier}`).remove();\n      } else {\n        // Get the first file selected by the user\n        const file = event.target.files[0];\n        const reader = new FileReader();\n\n        // When the file is successfully read\n        reader.onload = function (e) {\n          // Get the file content as text\n          const fileTextContent = e.target.result;\n\n          // Import the data\n          importData(fileTextContent).then((f) => {\n            if (f) {\n              promptMessage('已匯入資料', 'check_circle');\n            } else {\n              promptMessage('無法匯入資料', 'error');\n            }\n            documentQuerySelector(`body #${identifier}`).remove();\n          });\n        };\n\n        // Read the file as text\n        reader.readAsText(file);\n      }\n    },\n    { once: true }\n  );\n  fileInput.addEventListener(\n    'cancel',\n    function () {\n      documentQuerySelector(`body #${identifier}`).remove();\n    },\n    { once: true }\n  );\n\n  document.body.append(fileInput);\n  documentQuerySelector(`body #${identifier}`).click();\n}\n\nexport function viewCommitOfCurrentVersion(): void {\n  const url = getCommitURLOfCurrentVersion();\n  window.open(url);\n}\n\nexport function showPromptToAskForPersistentStorage(): void {\n  askForPersistentStorage().then((e) => {\n    switch (e) {\n      case 'granted':\n        promptMessage('已開啟永久儲存', 'check_circle');\n        break;\n      case 'denied':\n        promptMessage('永久儲存權限已被拒絕', 'cancel');\n        break;\n      case 'unsupported':\n        promptMessage('此瀏覽器不支援永久儲存', 'warning');\n        break;\n      default:\n        promptMessage('發生錯誤', 'error');\n        break;\n    }\n  });\n}\n","import { changeSettingOption, getSetting, SettingSelect, SettingSelectOption } from '../../data/settings/index';\nimport { documentQuerySelector, documentQuerySelectorAll, elementQuerySelector } from '../../tools/query-selector';\nimport { closePreviousPage, GeneratedElement, openPreviousPage, pushPageHistory } from '../index';\n\nconst SettingsOptionsField = documentQuerySelector('.css_settings_options_field');\nconst SettingsOptionsBodyElement = elementQuerySelector(SettingsOptionsField, '.css_settings_options_body');\nconst SettingsOptionsOptionsElement = elementQuerySelector(SettingsOptionsBodyElement, '.css_settings_options');\nconst SettingsOptionsDescriptionElement = elementQuerySelector(SettingsOptionsBodyElement, '.css_options_description');\nconst SettingsOptionsHeadElement = elementQuerySelector(SettingsOptionsField, '.css_settings_options_head');\nconst SettingsOptionsTitleElement = elementQuerySelector(SettingsOptionsHeadElement, '.css_settings_options_title');\n\nfunction generateElementOfItem(setting: SettingSelect, item: SettingSelectOption, index: number): GeneratedElement {\n  // const identifier = generateIdentifier('i');\n  const element = document.createElement('div');\n  element.classList.add('css_option');\n  // element.id = identifier;\n  element.innerHTML = /*html*/ `<div class=\"css_option_name\">${item.name}</div><div class=\"css_option_checkbox\"><input type=\"checkbox\" onclick=\"bus.settings.settingsOptionsHandler(event, '${setting.key}', ${index})\" ${setting.option === index ? 'checked' : ''}/></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction initializeSettingsOptionsField(settingKey: string): void {\n  const setting = getSetting(settingKey) as SettingSelect;\n  SettingsOptionsTitleElement.innerText = setting.name;\n  SettingsOptionsDescriptionElement.innerText = setting.description;\n  SettingsOptionsOptionsElement.innerHTML = '';\n  const fragment = new DocumentFragment();\n  let index: number = 0;\n  for (const item of setting.options) {\n    const thisElement = generateElementOfItem(setting, item, index);\n    fragment.appendChild(thisElement.element);\n    index += 1;\n  }\n  SettingsOptionsOptionsElement.append(fragment);\n}\n\nexport function openSettingsOptions(settingKey: string): void {\n  pushPageHistory('SettingsOptions');\n  SettingsOptionsField.setAttribute('displayed', 'true');\n  initializeSettingsOptionsField(settingKey);\n  closePreviousPage();\n}\n\nexport function closeSettingsOptions(): void {\n  // revokePageHistory('SettingsOptions');\n  SettingsOptionsField.setAttribute('displayed', 'false');\n  openPreviousPage();\n}\n\nexport function settingsOptionsHandler(event: Event, settingKey: string, index: number): void {\n  const checkboxes = documentQuerySelectorAll('.css_settings_options_field .css_settings_options_body .css_settings_options .css_option .css_option_checkbox input[type=\"checkbox\"]');\n  for (const checkbox of checkboxes) {\n    checkbox.checked = false;\n  }\n  event.target.checked = true;\n  changeSettingOption(settingKey, index);\n}\n"],"names":["ScheduleNotificationField","documentQuerySelector","ScheduleNotificationBodyElement","elementQuerySelector","ScheduleNotificationListElement","generateElementOfItem","item","type","parameters","element","document","createElement","classList","add","setAttribute","index","innerHTML","getIconHTML","icon","name","id","openScheduleNotification","pushPageHistory","_step","fragment","DocumentFragment","_iterator","_createForOfIteratorHelper","scheduleNotificationOptions","s","n","done","newElement","value","append","err","e","f","initializeScheduleNotificationField","closeScheduleNotification","revokePageHistory","scheduleNotificationForStopItemOnRoute","itemElementID","StopID","RouteID","EstimateTime","itemElement","scheduleNotificationButtonElement","promptMessage","scheduleNotificationForStop","then","result","scheduleNotificationForStopItemOnLocation","StorageField","StorageBodyElement","StatisticsElement","category","size","_initializeStorageStatistics","statistics","getStoresSizeStatistics","key","categorizedSizes","newItemElement","appendChild","apply","arguments","openStorage","initializeStorageStatistics","closeStorage","SaveToFolderField","SaveToFolderBodyElement","SaveToFolderListElement","_initializeSaveToFolderField","listFoldersWithContent","openSaveToFolder","_x","_x2","initializeSaveToFolderField","closeSaveToFolder","saveStopItemOnRoute","folderID","saveToFolderButtonElement","saveStop","isFolderContentSaved","k","booleanToString","saveStopItemOnLocation","saveRouteOnDetailsPage","actionButtonElement","saveRoute","saveRouteOnRoute","searchField","searchHeadElement","searchBodyElement","searchInputElement","searchInputCanvasElement","searchTypeFilterButtonElement","searchResultsElement","searchKeyboardElement","searchInputCanvasContext","getContext","searchInputPlaceholder","searchInputCanvasScale","window","devicePixelRatio","padding","cursorWidth","cursorBorderRadius","selectionHighlightBorderRadius","lineHeight","fontSize","fontFamily","textColor","getCSSVariableValue","placeholderTextColor","cursorColor","textWidth","textWidthToCursorStart","selectedTextWidth","selection","cursorOffset","querySize","width","height","playingCursorAnimation","getSearchInputValue","String","getSearchTypeFilterValue","parseInt","getAttribute","openSearch","dataDownloadCompleted","_i","_keyboardKeys","length","column","eventScript","eventType","html","supportTouch","push","join","initializeKeyboard","animateCursor","updateSearchInput","prepareForSearch","closeSearch","resizeSearchInputCanvas","typeTextIntoInput","newValue","updateSearchResult","deleteCharFromInout","currentValue","substring","emptyInput","openSystemKeyboard","event","preventDefault","focus","cursorStart","cursorEnd","empty","font","textAlign","textBaseline","measureText","Math","max","clearRect","globalAlpha","fillStyle","fillText","min","drawRoundedRect","currentType","containPhoneticSymbols","_step2","typeToIcon","_iterator2","searchFor","typeIcon","onclickScript","pid","hash","switchSearchTypeFilter","newType","toString","x","performance","now","alpha","pow","sin","PI","requestAnimationFrame","SettingsField","SettingsBodyElement","SettingsElement","action","status","_initializeSettingsField","_asyncToGenerator","list","listSettings","thisElement","openSettings","initializeSettingsField","closeSettings","downloadExportFile","_downloadExportFile","exportedData","exportData","releaseFile","openFileToImportData","identifier","generateIdentifier","fileInput","addEventListener","target","files","remove","file","reader","FileReader","onload","fileTextContent","importData","readAsText","once","body","click","viewCommitOfCurrentVersion","url","getCommitURLOfCurrentVersion","open","showPromptToAskForPersistentStorage","askForPersistentStorage","SettingsOptionsField","SettingsOptionsBodyElement","SettingsOptionsOptionsElement","SettingsOptionsDescriptionElement","SettingsOptionsHeadElement","SettingsOptionsTitleElement","setting","option","openSettingsOptions","settingKey","getSetting","innerText","description","options","initializeSettingsOptionsField","closePreviousPage","closeSettingsOptions","openPreviousPage","settingsOptionsHandler","documentQuerySelectorAll","checked","changeSettingOption"],"sourceRoot":""}