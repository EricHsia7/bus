{"version":3,"file":"024e8a146fa1f354764c.js","mappings":"gvCA2BA,SAASA,EAAqBC,GAC5B,IACIC,EAAO,GACPC,EAAM,GACV,QAHiBC,EAAAA,EAAAA,IAAYH,IAI3B,IAAK,aACHC,EAAO,KACPC,EAAM,QACN,MACF,IAAK,gBACHD,EAAO,KACPC,EAAM,WACN,MACF,IAAK,sBAIL,IAAK,sBAIL,IAAK,mCAIL,IAAK,uCAIL,IAAK,0BACHD,EAAO,KACPC,EAAM,YACN,MACF,IAAK,wBACHD,EAAO,QACPC,EAAM,mBACN,MACF,IAAK,mBACHD,EAAO,OACPC,EAAM,cACN,MACF,IAAK,kBAIL,IAAK,0BAIL,IAAK,qBACHD,EAAO,MACPC,EAAM,UACN,MACF,QACED,EAAO,KACPC,EAAM,SAOV,MAJe,CACbD,KAAAA,EACAC,IAAAA,EAGJ,CAEO,SAAeE,IAAuB,OAAAC,EAAAC,MAAC,KAADC,UAAA,CA4C5C,SAAAF,I,MAAA,O,EA5CM,YAKL,IAJA,IAAIG,EAAmB,EACnBC,EAAmD,CAAC,EAClDC,GAAeC,EAAAA,EAAAA,MAEZC,EAAI,EAAGA,EAAIF,EAAcE,IAAK,CACrC,IAEiCC,EAD7BC,EAAuB,EAAEC,EAAAC,QADHC,EAAAA,EAAAA,IAAeL,IAER,IAAjC,IAAAG,EAAAG,MAAAL,EAAAE,EAAAI,KAAAC,MAAmC,KAAxBC,EAAOR,EAAAS,MACVC,QAAaC,EAAAA,EAAAA,IAAUZ,EAAGS,GAE1BI,EADeC,OAAOH,GACII,OAASN,EAAQM,OACjDnB,GAAoBiB,EACpBX,GAAwBW,CAC1B,CAAC,OAAAG,GAAAb,EAAAc,EAAAD,EAAA,SAAAb,EAAAe,GAAA,CACD,IAAMC,EAAehC,EAAqBa,GACpCoB,EAAkBD,EAAa7B,IAChCO,EAAwBwB,eAAeD,KAC1CvB,EAAwBuB,GAAmB,CACzCE,SAAUH,EACVI,KAAM,IAGV1B,EAAwBsB,EAAa7B,KAAKiC,KAAO1B,EAAwBsB,EAAa7B,KAAKiC,KAAOrB,CACpG,CAEA,IAAMsB,GAAYC,EAAAA,EAAAA,IAAa7B,GAE3B8B,EAAqC,CAAC,EAC1C,IAAK,IAAMpC,KAAOO,EAAyB,CACzC,IAAMsB,EAAetB,EAAwBP,GAAKgC,SAC5CK,EAAmB9B,EAAwBP,GAAKiC,KACtDG,EAAiBpC,GAAO,CACtBgC,SAAUH,EACVI,MAAME,EAAAA,EAAAA,IAAaE,GAEvB,CAOA,MALoC,CAClCH,UAAAA,EACAE,iBAAAA,EAIJ,EAACjC,E,8KAAAA,EAAAC,MAAA,KAAAC,UAAA,C,mjECtGD,IACIiC,EAA6C,GAC7CC,EAA0C,GAC1CC,GAAiD,EACjDC,EAAyD,EAEzDC,EAAuE,CACzEC,KAAM,CAAC,EACPC,UAAW,EACXC,GAAI,IAEFC,EAAoD,GACpDC,EAAwD,CAAC,EAE7D,SAASC,EAAuBL,GAC9B,IAKuBhC,EALnBsC,EAAkB,EAClBC,EAAyB,EACzBC,EAAe,EACfC,EAAsB,EACtBC,EAAa,EAAExC,EAAAC,EACA6B,GAAI,IAAvB,IAAA9B,EAAAG,MAAAL,EAAAE,EAAAI,KAAAC,MAAyB,KAAdG,EAAIV,EAAAS,MACPkC,EAAejC,EAAK,GACpBuB,EAAYvB,EAAK,GACvBgC,GAAc,EACdJ,GAAmBK,EACnBH,GAAgBP,EAChBM,GAA0BK,KAAKC,IAAIF,EAAc,GACjDF,GAAuBG,KAAKC,IAAIZ,EAAW,EAC7C,CAAC,OAAAlB,GAAAb,EAAAc,EAAAD,EAAA,SAAAb,EAAAe,GAAA,CAED,IAUwB6B,EAVlBC,EAAsBT,EAAkBI,EACxCM,EAAmBR,EAAeE,EAElCO,EAAuBV,EAAyBG,EAAaE,KAAKC,IAAIE,EAAqB,GAC3FG,EAAoBT,EAAsBC,EAAaE,KAAKC,IAAIG,EAAkB,GAElFG,EAAoBP,KAAKQ,KAAKH,GAC9BI,EAAiBT,KAAKQ,KAAKF,GAE7BI,EAAa,EAAEC,EAAApD,EACC6B,GAAI,IAAxB,IAAAuB,EAAAlD,MAAAyC,EAAAS,EAAAjD,KAAAC,MAA0B,KAAfiD,EAAKV,EAAArC,MAGd6C,IAFqBE,EAAM,GAEGT,IADZS,EAAM,GAC0CR,EACpE,CAAC,OAAAjC,GAAAwC,EAAAvC,EAAAD,EAAA,SAAAwC,EAAAtC,GAAA,CAiBD,MAZyC,CACvCwC,cAAe,CACbC,QAASX,EACTY,MAAOR,GAETlB,UAAW,CACTyB,QAASV,EACTW,MAAON,GAETvC,OAAQ4B,EACRkB,aAdFN,GAAcZ,IAEoBS,EAAoBE,GAexD,CAEA,SAASQ,EAAyBC,EAAuCC,GACvE,IAAMC,EAAmBF,EAAYhD,OAASiD,EAAYjD,OAEpDmD,GAA6BH,EAAYL,cAAcC,QAAUI,EAAYhD,OAASiD,EAAYN,cAAcC,QAAUK,EAAYjD,QAAUkD,EAChJE,GAA0BJ,EAAY7B,UAAUyB,QAAUI,EAAYhD,OAASiD,EAAY9B,UAAUyB,QAAUK,EAAYjD,QAAUkD,EAmB3I,MAZyC,CACvCP,cAAe,CACbC,QAASO,EACTN,OAR4BQ,EAAAA,EAAAA,IAAuBL,EAAYL,cAAcC,QAASI,EAAYL,cAAcE,MAAOG,EAAYhD,OAAQiD,EAAYN,cAAcC,QAASK,EAAYN,cAAcE,MAAOI,EAAYjD,SAU7NmB,UAAW,CACTyB,QAASQ,EACTP,OAXyBQ,EAAAA,EAAAA,IAAuBL,EAAY7B,UAAUyB,QAASI,EAAY7B,UAAU0B,MAAOG,EAAYhD,OAAQiD,EAAY9B,UAAUyB,QAASK,EAAY9B,UAAU0B,MAAOI,EAAYjD,SAa1MA,OAAQkD,EACRJ,aAZwBQ,EAAAA,EAAAA,IAAwBN,EAAYL,cAAcC,QAASI,EAAY7B,UAAUyB,QAASI,EAAYL,cAAcE,MAAOG,EAAY7B,UAAU0B,MAAOG,EAAYhD,OAAQgD,EAAYF,YAAaG,EAAYN,cAAcC,QAASK,EAAY9B,UAAUyB,QAASK,EAAYN,cAAcE,MAAOI,EAAY9B,UAAU0B,MAAOI,EAAYjD,OAAQiD,EAAYH,aAejY,CAEO,SAAeS,EAAqBC,GAAA,OAAAC,EAAA9E,MAAC,KAADC,UAAA,CAqE1C,SAAA6E,IAAA,OAAAA,EAAAC,GArEM,UAAqCC,GAC1C,IACMC,GADM,IAAIC,MACqBC,UAErC,IAAK/C,EAAuC,CAC1CA,GAAwC,EACxCF,EAA8B,GAC9BC,GAAkCiD,EAAAA,EAAAA,IAAmB,KACrD9C,EAAqC,CACnCC,KAAM,CAAC,EACPC,UAAWyC,EACXxC,GAAIN,GAENE,EAAiD,EAEjD,IADA,IAAMgD,EAA8BL,EAAa3D,OAAS,EACjDf,EAAI,EAAGA,EAzG0B,GAyGSA,IAAK,CACtD,IACMgF,EAAaN,EADS7B,KAAKoC,MAAMpC,KAAKqC,SAAWH,IAEvDnD,EAA4BuD,KAAKH,EAAWI,OAC9C,CACF,CAEA,IAC+BC,EAD/BC,EAAAlF,EACmBsE,GAAY,IAA/B,IAAAY,EAAAhF,MAAA+E,EAAAC,EAAA/E,KAAAC,MAAiC,KAAtBG,EAAI0E,EAAA3E,MACP6E,EAAS5E,EAAKyE,OACdI,EAAU,KAAHC,OAAQF,GACjB3D,EAA4B8D,QAAQH,IAAW,IAC5CvD,EAAmCC,KAAKZ,eAAemE,KAC1DxD,EAAmCC,KAAKuD,GAAW,IAErDxD,EAAmCC,KAAKuD,GAASL,KAAK,CAACQ,SAAShF,EAAK+D,cAAe7B,KAAKoC,OAAON,EAAmB3C,EAAmCE,WAAa,OAEvK,CAAC,OAAAlB,GAAAsE,EAAArE,EAAAD,EAAA,SAAAsE,EAAApE,GAAA,CAQD,GANIa,EAAiD,IAAO,UACpD6D,EAAAA,EAAAA,IAAU,EAAG/D,EAAiCgE,KAAKC,UAAU9D,MAGrED,GAAkD,GA3HO,GA6HwC,KAC/CgE,EAD+CC,EAAA5F,EAC1EwB,GAA2B,IAAhD,IAAAoE,EAAA1F,MAAAyF,EAAAC,EAAAzF,KAAAC,MAAkD,KAAvC+E,EAAMQ,EAAArF,MACT8E,EAAU,KAAHC,OAAQF,GACftD,EAAOD,EAAmCC,KAAKuD,GACjDS,EAAY,CAAC,EACXC,QAAqBtF,EAAAA,EAAAA,IAAU,EAAG4E,GACxC,GAAIU,EAAc,CAChB,IAAMC,EAAqBN,KAAKO,MAAMF,GACtCD,EAAUI,MAAQvC,EAAyBqC,EAAmBE,MAAO/D,EAAuBL,IAC5FgE,EAAU/D,UAAYiE,EAAmBjE,UACzC+D,EAAU9D,GAAKoD,CACjB,MACEU,EAAUI,MAAQ/D,EAAuBL,GACzCgE,EAAU/D,UAAYyC,EACtBsB,EAAU9D,GAAKoD,EAGjB,SADMK,EAAAA,EAAAA,IAAU,EAAGJ,EAASK,KAAKC,UAAUG,IACvC5D,EAA2BhB,eAAemE,GAAU,CACtD,IAAMc,EAAgBjE,EAA2BmD,GACjDpD,EAAsBmE,OAAOD,EAAe,EAAGL,EACjD,MACE7D,EAAsBoD,GAAWpD,EAAsBrB,OACvDqB,EAAsB+C,KAAKc,SAEvBO,EAAAA,EAAAA,IAAa,EAAG3E,EACxB,CAAC,OAAAb,GAAAgF,EAAA/E,EAAAD,EAAA,SAAAgF,EAAA9E,GAAA,CAEDY,GAAwC,CAC1C,CACF,KAACpC,MAAA,KAAAC,UAAA,CAEM,SAAe8G,IAAsC,OAAAC,EAAAhH,MAAC,KAADC,UAAA,CAoC3D,SAAA+G,IAAA,OAAAA,EAAAjC,GApCM,YACL,IAGsBkC,EAFhBC,GADM,IAAIhC,MAAOC,UACE,MACYgC,EAAAzG,QAAlBC,EAAAA,EAAAA,IAAe,IACZ,IAAtB,IAAAwG,EAAAvG,MAAAqG,EAAAE,EAAAtG,KAAAC,MAAwB,KAAblB,EAAGqH,EAAAjG,MACNoG,QAAalG,EAAAA,EAAAA,IAAU,EAAGtB,GAC1ByH,EAASlB,KAAKO,MAAMU,GACpBE,EAAgBD,EAAO7E,UACvB+E,EAASF,EAAO5E,GACtB,GAAI6E,EAAgBJ,EAClB,IAAK,IAAMpB,KAAWuB,EAAO9E,KAAM,CACjC,IAAMiF,EAAeH,EAAOvB,GACxBS,EAAY,CAAC,EACXC,QAAqBtF,EAAAA,EAAAA,IAAU,EAAG4E,GACxC,GAAIU,EAAc,CAChB,IAAMC,EAAqBN,KAAKO,MAAMF,GACtCD,EAAUI,MAAQvC,EAAyBqC,EAAmBE,MAAO/D,EAAuB4E,IAC5FjB,EAAU/D,UAAYiE,EAAmBjE,UACzC+D,EAAU9D,GAAKoD,MACjB,MACEU,EAAUI,MAAQ/D,EAAuB4E,GACzCjB,EAAU/D,UAAYyC,iBACtBsB,EAAU9D,GAAKoD,OAGjB,SADMK,EAAAA,EAAAA,IAAU,EAAGJ,EAASK,KAAKC,UAAUG,IACvC5D,EAA2BhB,eAAemE,GAAU,CACtD,IAAMc,EAAgBjE,EAA2BmD,GACjDpD,EAAsBmE,OAAOD,EAAe,EAAGL,EACjD,MACE7D,EAAsBoD,GAAWpD,EAAsBrB,OACvDqB,EAAsB+C,KAAKc,SAEvBO,EAAAA,EAAAA,IAAa,EAAGS,EACxB,CAEJ,CAAC,OAAAjG,GAAA6F,EAAA5F,EAAAD,EAAA,SAAA6F,EAAA3F,GAAA,CACH,KAACxB,MAAA,KAAAC,UAAA,CAEM,SAAewH,IAA8B,OAAAC,EAAA1H,MAAC,KAADC,UAAA,CAiBnD,SAAAyH,IAAA,OAAAA,EAAA3C,GAjBM,YACL,IAIsB4C,EAHhBT,GADM,IAAIhC,MAAOC,UACE,MAErByC,EAAgB,EAAEC,EAAAnH,QADHC,EAAAA,EAAAA,IAAe,IAEZ,IAAtB,IAAAkH,EAAAjH,MAAA+G,EAAAE,EAAAhH,KAAAC,MAAwB,KAAblB,EAAG+H,EAAA3G,MACNoG,QAAalG,EAAAA,EAAAA,IAAU,EAAGtB,GAChC,GAAIwH,EAAM,CACR,IAAMC,EAASlB,KAAKO,MAAMU,GACJC,EAAO7E,UACT0E,IAClBxE,EAAsB+C,KAAK4B,GAC3B1E,EAA2B/C,GAAOgI,EAClCA,GAAS,EAEb,CACF,CAAC,OAAAtG,GAAAuG,EAAAtG,EAAAD,EAAA,SAAAuG,EAAArG,GAAA,CACH,KAACxB,MAAA,KAAAC,UAAA,CAEM,SAAS6H,IACd,IACMZ,GADM,IAAIhC,MAAOC,UACE,MACzB,OAAOzC,EAAsBqF,QAAO,SAAC9G,GAAI,OAAKA,EAAKuB,UAAY0E,GAAgD,iBAA3BjG,EAAK0F,MAAMxC,WAAwB,GACzH,CAEO,SAAe6D,IAAkC,OAAAC,EAAAjI,MAAC,KAADC,UAAA,CAavD,SAAAgI,IAAA,OAAAA,EAAAlD,GAbM,YACL,IAGsBmD,EAFhBhB,GADM,IAAIhC,MAAOC,UACE,MACYgD,EAAAzH,QAAlBC,EAAAA,EAAAA,IAAe,IACZ,IAAtB,IAAAwH,EAAAvH,MAAAsH,EAAAC,EAAAtH,KAAAC,MAAwB,KAAblB,EAAGsI,EAAAlH,MACNoG,QAAalG,EAAAA,EAAAA,IAAU,EAAGtB,GAC1ByH,EAASlB,KAAKO,MAAMU,GACpBE,EAAgBD,EAAO7E,UACvB4F,EAAkBf,EAAOV,MAAMxC,aACjCmD,GAAiBJ,GAAyC,iBAApBkB,WAClCtB,EAAAA,EAAAA,IAAa,EAAGlH,GAE1B,CAAC,OAAA0B,GAAA6G,EAAA5G,EAAAD,EAAA,SAAA6G,EAAA3G,GAAA,CACH,KAACxB,MAAA,KAAAC,UAAA,CAED,IACIoI,EADAC,EAA+B,CAAC,EAIpC,GAA4B,oBAAjBC,aAA8B,CACvC,IAAMC,EAA4B,IAAID,aAAa,IAAIE,IAAI,oBAC3DJ,EAAOG,EAA0BH,MAC5BK,OACP,KAAO,CACL,IAAMC,EAAsB,IAAIC,OAAO,IAAIH,IAAI,mBAC/CJ,EAAOM,CACT,CAgBO,SAAeE,IAAa,OAAAC,EAAA9I,MAAC,KAADC,UAAA,CAiBnC,SAAA6I,IAFC,OAEDA,EAAA/D,GAjBO,YACL,IAAMgE,QAAmBjB,IACnBkB,GAAS5D,EAAAA,EAAAA,IAAmB,KAYlC,aAVqB,IAAI6D,SAAQ,SAACC,EAASC,GACzCb,EAA6BU,GAAUE,EAEvCb,EAAKe,QAAU,SAAU7H,GACvB4H,EAAO5H,EAAE8H,QACX,EAEAhB,EAAKiB,YAAY,CAACP,EAAYC,GAChC,GAGF,KAAChJ,MAAA,KAAAC,UAAA,CA5BDoI,EAAKkB,UAAY,SAAUhI,GACzB,IAAAiI,EAAAC,EAAyBlI,EAAEgB,KAAI,GAAxBmH,EAAMF,EAAA,GAAER,EAAMQ,EAAA,GACjBlB,EAA6BU,KAC/BV,EAA6BU,GAAQU,UAC9BpB,EAA6BU,GAExC,EAGAX,EAAKe,QAAU,SAAU7H,GACvBoI,QAAQC,MAAMrI,EAAE8H,QAClB,C,qjECjSA,IACIQ,EAA8C,GAC9CC,GAAqD,EACrDC,EAAiD,GACjDC,EAA0E,CAC5EzH,KAAM,CAAC,EACPC,UAAW,EACXC,GAAI,IAEFwH,EAA6D,EAmCjE,SAASC,EAA2B3H,GAGlC,IAFA,IAAM4H,EAAa,IAAIC,YAAY,MAE1B9J,EADUiC,EAAKlB,OACE,EAAGf,GAAK,EAAGA,IAAK,CACxC,IAAMW,EAAOsB,EAAKjC,GACd+J,EAAO,EACPC,EAAS,EACTrJ,EAAK,IAAM,GACboJ,EAAOpJ,EAAK,GAAe,IAAVA,EAAK,GACtBqJ,EAAS,IAETD,EAAOpJ,EAAK,GACZqJ,EAAS,GAEX,IAAMC,EAAO,IAAIrF,KAAKmF,GAEtBF,EADgC,GAAlBI,EAAKC,WAAkBD,EAAKE,eACrBH,CACvB,CACA,OAAOI,MAAMC,KAAKR,EACpB,CAEA,SAASS,EAA6BvG,EAA2CC,GAE/E,IADA,IAAMuG,EAAc,IAAIT,YAAY,MAC3B9J,EAAI,KAAaA,GAAK,EAAGA,IAChCuK,EAAYvK,GAAK+D,EAAY/D,GAAKgE,EAAYhE,GAEhD,OAAOoK,MAAMC,KAAKE,EACpB,CAEO,SAAeC,EAAyBjG,GAAA,OAAAkG,EAAA/K,MAAC,KAADC,UAAA,CAuE9C,SAAA8K,IAAA,OAAAA,EAAAhG,GAvEM,UAAyCC,GAC9C,IAAMgG,EAAM,IAAI9F,KACVD,EAA2B+F,EAAI7F,UAC/B8F,EAAaD,EAAIE,SACnBC,GAAc,EAElB,IAAKrB,EAA2C,CAC9CA,GAA4C,EAC5CD,GAAsCzE,EAAAA,EAAAA,IAAmB,KACzD4E,EAAyC,CACvCvH,GAAIoH,EACJrH,UAAWyC,EACX1C,KAAM,CAAC,GAET0H,EAAqD,EACrD,IAAMmB,QAAyBC,EAAAA,EAAAA,IAAqB,CAAC,SACrDtB,EAAkCqB,EAAiBE,KAAI,SAAC/J,GAAC,OAAKA,EAAEkB,EAAE,GACpE,CAGA,IAAI8I,EAAAA,EAAAA,IAAqBP,GAAM,KACEzK,EADFE,EAAAC,EACVsE,GAAY,IAA/B,IAAAvE,EAAAG,MAAAL,EAAAE,EAAAI,KAAAC,MAAiC,KAAtBG,EAAIV,EAAAS,MACP6E,EAAS5E,EAAKyE,OACdI,EAAU,KAAHC,OAAQF,EAAM,KAAAE,OAAIkF,GAC3BlB,EAAgC/D,QAAQH,IAAW,IAChDmE,EAAuCzH,KAAKZ,eAAemE,KAC9DkE,EAAuCzH,KAAKuD,GAAW,IAEzDkE,EAAuCzH,KAAKuD,GAASL,KAAK,CAACQ,SAAShF,EAAK+D,cAAeC,KACxFgF,GAAsD,GAtGC,KAwGrDkB,GAAc,GAGpB,CAAC,OAAA7J,GAAAb,EAAAc,EAAAD,EAAA,SAAAb,EAAAe,GAAA,CAID,IAHI2J,GAAelB,EAAqD,GAAM,WACtE/D,EAAAA,EAAAA,IAAU,EAAG2D,EAAqC1D,KAAKC,UAAU4D,KAErEmB,EAAa,KACqC9H,EADrCS,EAAApD,EACMqJ,GAA+B,IAApD,IAAAjG,EAAAlD,MAAAyC,EAAAS,EAAAjD,KAAAC,MAAsD,KAA3C+E,EAAMxC,EAAArC,MACT8E,EAAU,KAAHC,OAAQF,EAAM,KAAAE,OAAIkF,GACzB1I,EAAOyH,EAAuCzH,KAAKuD,GACrDS,EAAY,CAAC,EACXC,QAAqBtF,EAAAA,EAAAA,IAAU,EAAG4E,GACxC,GAAIU,EAAc,CAChB,IAAMC,EAAqBN,KAAKO,MAAMF,GAChCgF,EAAWtB,EAA2B3H,GACtCkJ,EAAcb,EAA6BnE,EAAmBE,MAAO6E,GAC3EjF,EAAUI,MAAQ8E,EAClB,IAAMC,GAAcC,EAAAA,EAAAA,IAAaF,GACjClF,EAAUqF,IAAMF,EAAY,GAC5BnF,EAAUsF,IAAMH,EAAY,GAC5BnF,EAAUuF,IAAMb,EAChB1E,EAAU/D,UAAYiE,EAAmBjE,UACzC+D,EAAU9D,GAAKoD,CACjB,KAAO,CACL,IAAM2F,EAAWtB,EAA2B3H,GAC5CgE,EAAUI,MAAQ6E,EAClB,IAAME,GAAcC,EAAAA,EAAAA,IAAaH,GACjCjF,EAAUqF,IAAMF,EAAY,GAC5BnF,EAAUsF,IAAMH,EAAY,GAC5BnF,EAAUuF,IAAMb,EAChB1E,EAAU/D,UAAYyC,EACtBsB,EAAU9D,GAAKoD,CACjB,OACMK,EAAAA,EAAAA,IAAU,EAAGJ,EAASK,KAAKC,UAAUG,UACrCO,EAAAA,EAAAA,IAAa,EAAG+C,EACxB,CAAC,OAAAvI,GAAAwC,EAAAvC,EAAAD,EAAA,SAAAwC,EAAAtC,GAAA,CACDsI,GAA4C,CAC9C,CACF,CACF,KAAC9J,MAAA,KAAAC,UAAA,CAEM,SAAe8L,IAA0C,OAAAC,EAAAhM,MAAC,KAADC,UAAA,CAqC/D,SAAA+L,IAAA,OAAAA,EAAAjH,GArCM,YACL,IAIsBY,EAJhBqF,EAAM,IAAI9F,KACVD,EAAmB+F,EAAI7F,UACvB8F,EAAaD,EAAIE,SACctF,EAAAlF,QAAlBC,EAAAA,EAAAA,IAAe,IACZ,IAAtB,IAAAiF,EAAAhF,MAAA+E,EAAAC,EAAA/E,KAAAC,MAAwB,KAAblB,EAAG+F,EAAA3E,MACNoG,QAAalG,EAAAA,EAAAA,IAAU,EAAGtB,GAC1ByH,EAASlB,KAAKO,MAAMU,GACpBG,EAASF,EAAO5E,GACtB,IAAK,IAAMqD,KAAWuB,EAAO9E,KAAM,CACjC,IAAMiF,EAAeH,EAAOvB,GACxBS,EAAY,CAAC,EACXC,QAAqBtF,EAAAA,EAAAA,IAAU,EAAG4E,GACxC,GAAIU,EAAc,CAChB,IAAMC,EAAqBN,KAAKO,MAAMF,GAChCgF,EAAWtB,EAA2B1C,GAC5CjB,EAAUI,MAAQiE,EAA6BnE,EAAmBE,MAAO6E,GACzE,IAAME,GAAcC,EAAAA,EAAAA,IAAaH,EAASzF,OAAOU,EAAmBoF,IAAKpF,EAAmBmF,MAC5FrF,EAAUqF,IAAMF,EAAY,GAC5BnF,EAAUsF,IAAMH,EAAY,GAC5BnF,EAAUuF,IAAMrF,EAAmBqF,IACnCvF,EAAU/D,UAAYiE,EAAmBjE,UACzC+D,EAAU9D,GAAKoD,MACjB,KAAO,CACL,IAAM2F,EAAWtB,EAA2B1C,GAC5CjB,EAAUI,MAAQ6E,EAClB,IAAME,GAAcC,EAAAA,EAAAA,IAAaH,GACjCjF,EAAUqF,IAAMF,EAAY,GAC5BnF,EAAUsF,IAAMH,EAAY,GAC5BnF,EAAUuF,IAAMb,EAChB1E,EAAU/D,UAAYyC,EACtBsB,EAAU9D,GAAKoD,MACjB,OACMK,EAAAA,EAAAA,IAAU,EAAGJ,EAASK,KAAKC,UAAUG,UACrCO,EAAAA,EAAAA,IAAa,EAAGS,EACxB,CACF,CAAC,OAAAjG,GAAAsE,EAAArE,EAAAD,EAAA,SAAAsE,EAAApE,GAAA,CACH,KAACxB,MAAA,KAAAC,UAAA,CAEM,SAAegM,IAA4B,OAAAC,EAAAlM,MAAC,KAADC,UAAA,CAWjD,SAAAiM,IAAA,OAAAA,EAAAnH,GAXM,YACL,IAEsBsB,EADlBqD,EAAuC,GAAGpD,EAAA5F,QAD3BC,EAAAA,EAAAA,IAAe,IAEZ,IAAtB,IAAA2F,EAAA1F,MAAAyF,EAAAC,EAAAzF,KAAAC,MAAwB,KAAblB,EAAGyG,EAAArF,MACNoG,QAAalG,EAAAA,EAAAA,IAAU,EAAGtB,GAChC,GAAIwH,EAAM,CACR,IAAMC,EAASlB,KAAKO,MAAMU,GAC1BsC,EAAOjE,KAAK4B,EACd,CACF,CAAC,OAAA/F,GAAAgF,EAAA/E,EAAAD,EAAA,SAAAgF,EAAA9E,GAAA,CACD,OAAOkI,CACT,KAAC1J,MAAA,KAAAC,UAAA,CAED,IACIoI,EADA8D,EAAoC,CAAC,EAIzC,GAA4B,oBAAjB5D,aAA8B,CACvC,IAAMC,EAA4B,IAAID,aAAa,IAAIE,IAAI,oBAC3DJ,EAAOG,EAA0BH,MAC5BK,OACP,KAAO,CACL,IAAMC,EAAsB,IAAIC,OAAO,IAAIH,IAAI,mBAC/CJ,EAAOM,CACT,CAgBO,SAAeyD,EAAkBC,EAAAC,GAAA,OAAAC,EAAAvM,MAAC,KAADC,UAAA,CAcvC,SAAAsM,IAAA,OAAAA,EAAAxH,GAdM,UAAkCyH,EAAoBC,GAC3D,IAAMzD,GAAS5D,EAAAA,EAAAA,IAAmB,KAE5BsH,QAA0BC,EAAAA,EAAAA,MAC1BC,QAAiCX,IASvC,aAPqB,IAAIhD,SAAQ,SAACC,EAASC,GACzCgD,EAAkCnD,GAAUE,EAC5Cb,EAAKe,QAAU,SAAU7H,GACvB4H,EAAO5H,EAAE8H,QACX,EACAhB,EAAKiB,YAAY,CAACoD,EAAmBE,EAA0BJ,EAAYC,EAAazD,GAC1F,GAEF,KAAChJ,MAAA,KAAAC,UAAA,CA3BDoI,EAAKkB,UAAY,SAAUhI,GACzB,IAAAiI,EAAAC,EAAyBlI,EAAEgB,KAAI,GAAxBmH,EAAMF,EAAA,GAAER,EAAMQ,EAAA,GACjB2C,EAAkCnD,KACpCmD,EAAkCnD,GAAQU,UACnCyC,EAAkCnD,GAE7C,EAGAX,EAAKe,QAAU,SAAU7H,GACvBoI,QAAQC,MAAMrI,EAAE8H,QAClB,C,u4CC7MO,SAAewD,EAAehI,EAAAwH,GAAA,OAAAS,EAAA9M,MAAC,KAADC,UAAA,CA+BpC,SAAA6M,IAAA,OAAAA,EAAA/H,GA/BM,UAA+BgI,EAAuBxC,GAC3D,IAAM3K,EAAM,KAAHmG,QAAQiH,EAAAA,EAAAA,IAAazC,EAAM,eAG9B3C,EAAgB,GAFR2C,EAAKC,WACHD,EAAKE,aAEfwC,QAAwC/L,EAAAA,EAAAA,IAAU,EAAGtB,GAC3D,GAAIqN,EAAiC,CACnC,IAAMC,EAAoC/G,KAAKO,MAAMuG,GACrDC,EAAkCvG,MAAMwG,KAAOJ,EAC/CG,EAAkC3K,KAAKqF,IAAUmF,EACjD,IAAMK,EAAcF,EAAkC3K,KAAKqF,GACvDwF,EAAcF,EAAkCvG,MAAMkF,MACxDqB,EAAkCvG,MAAMkF,IAAMuB,GAE5CA,EAAcF,EAAkCvG,MAAMiF,MACxDsB,EAAkCvG,MAAMiF,IAAMwB,SAE1ClH,EAAAA,EAAAA,IAAU,EAAGtG,EAAKuG,KAAKC,UAAU8G,GACzC,KAAO,CACL,IAAMG,EAAyB,CAAC,EAC1B9K,EAAO,IAAI6H,YAAY,MAC7B7H,EAAKqF,IAAUmF,EACfM,EAAuB9K,KAAOmI,MAAMC,KAAKpI,GACzC8K,EAAuB1G,MAAQ,CAC7BwG,IAAKJ,EACLlB,IAAKkB,EACLnB,IAAK,GAEPyB,EAAuB9C,KAAO,CAACA,EAAK+C,cAAe/C,EAAKgD,WAAa,EAAGhD,EAAKiD,iBACvEtH,EAAAA,EAAAA,IAAU,EAAGtG,EAAKuG,KAAKC,UAAUiH,GACzC,CACF,KAACrN,MAAA,KAAAC,UAAA,CAEM,SAAewN,IAAwB,OAAAC,EAAA1N,MAAC,KAADC,UAAA,CA6B7C,SAAAyN,IAAA,OAAAA,EAAA3I,GA7BM,YACL,IAAM4I,EAAU,IAAIzI,KACpByI,EAAQC,SAAS,GACjBD,EAAQE,WAAW,GACnBF,EAAQG,WAAW,GACnBH,EAAQI,gBAAgB,GAGxB,IAFA,IAAMC,GAAYC,EAAAA,EAAAA,IAAWN,GAAS,EAAsB,EAAG,GACzDjE,EAAmC,GAChCpJ,EAAI,EAAGA,GA3Ca,EA2CSA,IAAK,CACzC,IAAMiK,GAAO0D,EAAAA,EAAAA,IAAWD,EAAW1N,EAAG,EAAG,GACnCV,EAAM,KAAHmG,QAAQiH,EAAAA,EAAAA,IAAazC,EAAM,eAC9B0C,QAAwC/L,EAAAA,EAAAA,IAAU,EAAGtB,GAC3D,GAAIqN,EAAiC,CACnC,IAAMC,EAAoC/G,KAAKO,MAAMuG,GACrDvD,EAAOjE,KAAKyH,EACd,KAAO,CACL,IAAMgB,EAA2B,CAAC,EAC5B3L,EAAO,IAAI6H,YAAY,MAC7B8D,EAAyB3L,KAAOmI,MAAMC,KAAKpI,GAC3C2L,EAAyBvH,MAAQ,CAC/BwG,IAAK,EACLtB,IAAK,EACLD,IAAK,GAEPsC,EAAyB3D,KAAO,CAACA,EAAK+C,cAAe/C,EAAKgD,WAAa,EAAGhD,EAAKiD,WAC/E9D,EAAOjE,KAAKyI,EACd,CACF,CACA,OAAOxE,CACT,KAAC1J,MAAA,KAAAC,UAAA,CAEM,SAAekO,IAA4B,OAAAC,EAAApO,MAAC,KAADC,UAAA,CAajD,SAAAmO,IAAA,OAAAA,EAAArJ,GAbM,YACL,IAIsBxE,EAFhByK,GAAM,IAAI9F,MAAOC,UACc1E,EAAAC,QAAlBC,EAAAA,EAAAA,IAAe,IACZ,IAAtB,IAAAF,EAAAG,MAAAL,EAAAE,EAAAI,KAAAC,MAAwB,KAAblB,EAAGW,EAAAS,MACNoG,QAAalG,EAAAA,EAAAA,IAAU,EAAGtB,GAC1ByH,EAASlB,KAAKO,MAAMU,GAEtB4D,GADSqD,EAAAA,EAAAA,IAAyBhH,EAAOkD,KAAK,GAAIlD,EAAOkD,KAAK,GAAIlD,EAAOkD,KAAK,IACnEpF,UAPQmJ,eAQfxH,EAAAA,EAAAA,IAAa,EAAGlH,GAE1B,CAAC,OAAA0B,GAAAb,EAAAc,EAAAD,EAAA,SAAAb,EAAAe,GAAA,CACH,KAACxB,MAAA,KAAAC,UAAA,CAEM,SAAesO,EAAiBjC,EAAAkC,EAAAC,GAAA,OAAAC,EAAA1O,MAAC,KAADC,UAAA,CAgBtC,SAAAyO,IAAA,OAAAA,EAAA3J,GAhBM,UAAiC4J,EAAeC,EAAgBC,GACrE,IAAMC,EAAS,IAAIlG,OAAO,IAAIH,IAAI,mBAC5BsG,QAA6BtB,IAanC,aAXqB,IAAIxE,SAAQ,SAACC,EAASC,GACzC2F,EAAOvF,UAAY,SAAUhI,GAC3B2H,EAAQ3H,EAAEgB,MACVuM,EAAOE,WACT,EACAF,EAAO1F,QAAU,SAAU7H,GACzB4H,EAAO5H,EAAE8H,SACTyF,EAAOE,WACT,EACAF,EAAOxF,YAAY,CAACyF,EAAsBJ,EAAOC,EAAQC,GAC3D,GAEF,KAAC7O,MAAA,KAAAC,UAAA,C","sources":["webpack://bus/./src/data/analytics/storage-size.ts","webpack://bus/./src/data/analytics/update-rate/index.ts","webpack://bus/./src/data/analytics/bus-arrival-time/index.ts","webpack://bus/./src/data/analytics/data-usage/index.ts"],"sourcesContent":["import { convertBytes } from '../../tools/convert';\nimport { getStoreKey, getStoresLength, lfGetItem, lfListItemKeys } from '../storage/index';\n\ninterface StoreCategory {\n  name: string;\n  key: string;\n}\n\ninterface StoreSizeInBytes {\n  category: StoreCategory;\n  size: number;\n}\n\ntype CategorizedSizesInBytes = { [key: string]: StoreSizeInBytes };\n\nexport interface StoreSize {\n  category: StoreCategory;\n  size: number;\n}\n\nexport type CategorizedSizes = { [key: string]: StoreSize };\n\nexport interface StoreSizeStatistics {\n  categorizedSizes: CategorizedSizes;\n  totalSize: number;\n}\n\nfunction storeIndexToCategory(store: number): StoreCategory {\n  const storeKey = getStoreKey(store);\n  let name = '';\n  let key = '';\n  switch (storeKey) {\n    case 'cacheStore':\n      name = '快取';\n      key = 'cache';\n      break;\n    case 'settingsStore':\n      name = '設定';\n      key = 'settings';\n      break;\n    case 'dataUsageStatsStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'updateRateDataStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'updateRateDataWriteAheadLogStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'busArrivalTimeDataWriteAheadLogStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'busArrivalTimeDataStore':\n      name = '分析';\n      key = 'analytics';\n      break;\n    case 'personalScheduleStore':\n      name = '個人化行程';\n      key = 'personalSchedule';\n      break;\n    case 'recentViewsStore':\n      name = '最近檢視';\n      key = 'recentViews';\n      break;\n    case 'folderListStore':\n      name = '資料夾';\n      key = 'folders';\n      break;\n    case 'folderContentIndexStore':\n      name = '資料夾';\n      key = 'folders';\n      break;\n    case 'folderContentStore':\n      name = '資料夾';\n      key = 'folders';\n      break;\n    default:\n      name = '其他';\n      key = 'others';\n      break;\n  }\n  const result = {\n    name,\n    key\n  };\n  return result;\n}\n\nexport async function getStoresSizeStatistics(): Promise<StoreSizeStatistics> {\n  let totalSizeInBytes = 0;\n  let categorizedSizesInBytes: CategorizedSizesInBytes = {};\n  const storesLength = getStoresLength();\n\n  for (let i = 0; i < storesLength; i++) {\n    const keysInStore = await lfListItemKeys(i);\n    let thisStoreSizeInBytes = 0;\n    for (const itemKey of keysInStore) {\n      const item = await lfGetItem(i, itemKey);\n      const itemInString = String(item);\n      const itemLength = itemInString.length + itemKey.length;\n      totalSizeInBytes += itemLength;\n      thisStoreSizeInBytes += itemLength;\n    }\n    const thisCategory = storeIndexToCategory(i);\n    const thisCategoryKey = thisCategory.key;\n    if (!categorizedSizesInBytes.hasOwnProperty(thisCategoryKey)) {\n      categorizedSizesInBytes[thisCategoryKey] = {\n        category: thisCategory,\n        size: 0\n      };\n    }\n    categorizedSizesInBytes[thisCategory.key].size = categorizedSizesInBytes[thisCategory.key].size + thisStoreSizeInBytes;\n  }\n\n  const totalSize = convertBytes(totalSizeInBytes);\n\n  let categorizedSizes: CategorizedSizes = {};\n  for (const key in categorizedSizesInBytes) {\n    const thisCategory = categorizedSizesInBytes[key].category;\n    const thisCategorySize = categorizedSizesInBytes[key].size;\n    categorizedSizes[key] = {\n      category: thisCategory,\n      size: convertBytes(thisCategorySize)\n    };\n  }\n\n  const result: StoreSizeStatistics = {\n    totalSize,\n    categorizedSizes\n  };\n\n  return result;\n}\n","import { generateIdentifier } from '../../../tools/index';\nimport { lfSetItem, lfGetItem, lfListItemKeys, lfRemoveItem } from '../../storage/index';\nimport { EstimateTime } from '../../apis/getEstimateTime/index';\nimport { mergePearsonCorrelation, mergeStandardDeviation } from '../../../tools/math';\n\nexport type UpdateRateData = [estimateTime: number, timestamp: number]; // EstimateTime (seconds), timestamp (seconds)\n\nexport interface UpdateRateDataGroupStats {\n  estimate_time: {\n    average: number;\n    stdev: number;\n  };\n  timestamp: {\n    average: number;\n    stdev: number;\n  };\n  correlation: number;\n  length: number;\n}\n\nexport interface UpdateRateDataGroup {\n  stats: UpdateRateDataGroupStats;\n  timestamp: number;\n  id: number; // stop id\n}\n\nexport type UpdateRateDataGroupArray = Array<UpdateRateDataGroup>;\n\nexport interface UpdateRateDataWriteAheadLogGroup {\n  data: Array<UpdateRateData>;\n  timestamp: number;\n  id: string;\n}\n\nconst updateRateData_sampleQuantity: number = 16;\nlet updateRateData_trackedStops: Array<number> = [];\nlet updateRateData_writeAheadLog_id: string = '';\nlet updateRateData_writeAheadLog_tracking: boolean = false;\nlet updateRateData_writeAheadLog_currentDataLength: number = 0;\nconst updateRateData_writeAheadLog_maxDataLength: number = 90;\nlet updateRateData_writeAheadLog_group: UpdateRateDataWriteAheadLogGroup = {\n  data: {},\n  timestamp: 0,\n  id: ''\n};\nlet updateRateData_groups: Array<UpdateRateDataGroup> = [];\nlet updateRateData_groupsIndex: { [key: string]: number } = {};\n\nfunction getUpdateRateDataStats(data: Array<UpdateRateData>): UpdateRateDataGroupStats {\n  let sumEstimateTime = 0;\n  let sumEstimateTimeSquared = 0;\n  let sumTimestamp = 0;\n  let sumTimestampSquared = 0;\n  let dataLength = 0;\n  for (const item of data) {\n    const estimateTime = item[0];\n    const timestamp = item[1];\n    dataLength += 1;\n    sumEstimateTime += estimateTime;\n    sumTimestamp += timestamp;\n    sumEstimateTimeSquared += Math.pow(estimateTime, 2);\n    sumTimestampSquared += Math.pow(timestamp, 2);\n  }\n\n  const averageEstimateTime = sumEstimateTime / dataLength;\n  const averageTimestamp = sumTimestamp / dataLength;\n\n  const estimateTimeVariance = sumEstimateTimeSquared / dataLength - Math.pow(averageEstimateTime, 2);\n  const timestampVariance = sumTimestampSquared / dataLength - Math.pow(averageTimestamp, 2);\n\n  const estimateTimeSTDEV = Math.sqrt(estimateTimeVariance);\n  const timestampSTDEV = Math.sqrt(timestampVariance);\n\n  let covariance = 0;\n  for (const item2 of data) {\n    const estimateTime = item2[0];\n    const timestamp = item2[1];\n    covariance += (estimateTime - averageEstimateTime) * (timestamp - averageTimestamp);\n  }\n  covariance /= dataLength;\n\n  const correlation = covariance / (estimateTimeSTDEV * timestampSTDEV);\n\n  const result: UpdateRateDataGroupStats = {\n    estimate_time: {\n      average: averageEstimateTime,\n      stdev: estimateTimeSTDEV\n    },\n    timestamp: {\n      average: averageTimestamp,\n      stdev: timestampSTDEV\n    },\n    length: dataLength,\n    correlation: correlation\n  };\n  return result;\n}\n\nfunction mergeUpdateRateDataStats(targetStats: UpdateRateDataGroupStats, sourceStats: UpdateRateDataGroupStats): UpdateRateDataGroupStats {\n  const mergedDataLength = targetStats.length + sourceStats.length;\n\n  const mergedAverageEstimateTime = (targetStats.estimate_time.average * targetStats.length + sourceStats.estimate_time.average * sourceStats.length) / mergedDataLength;\n  const mergedAverageTimestamp = (targetStats.timestamp.average * targetStats.length + sourceStats.timestamp.average * sourceStats.length) / mergedDataLength;\n\n  const mergedEstimateTimeSTDEV = mergeStandardDeviation(targetStats.estimate_time.average, targetStats.estimate_time.stdev, targetStats.length, sourceStats.estimate_time.average, sourceStats.estimate_time.stdev, sourceStats.length);\n  const mergedTimestampSTDEV = mergeStandardDeviation(targetStats.timestamp.average, targetStats.timestamp.stdev, targetStats.length, sourceStats.timestamp.average, sourceStats.timestamp.stdev, sourceStats.length);\n\n  const mergedCorrelation = mergePearsonCorrelation(targetStats.estimate_time.average, targetStats.timestamp.average, targetStats.estimate_time.stdev, targetStats.timestamp.stdev, targetStats.length, targetStats.correlation, sourceStats.estimate_time.average, sourceStats.timestamp.average, sourceStats.estimate_time.stdev, sourceStats.timestamp.stdev, sourceStats.length, sourceStats.correlation);\n\n  const result: UpdateRateDataGroupStats = {\n    estimate_time: {\n      average: mergedAverageEstimateTime,\n      stdev: mergedEstimateTimeSTDEV\n    },\n    timestamp: {\n      average: mergedAverageTimestamp,\n      stdev: mergedTimestampSTDEV\n    },\n    length: mergedDataLength,\n    correlation: mergedCorrelation\n  };\n  return result;\n}\n\nexport async function collectUpdateRateData(EstimateTime: EstimateTime) {\n  const now = new Date();\n  const currentTimestamp: number = now.getTime();\n  // Initialize\n  if (!updateRateData_writeAheadLog_tracking) {\n    updateRateData_writeAheadLog_tracking = true;\n    updateRateData_trackedStops = [];\n    updateRateData_writeAheadLog_id = generateIdentifier('u');\n    updateRateData_writeAheadLog_group = {\n      data: {},\n      timestamp: currentTimestamp,\n      id: updateRateData_writeAheadLog_id\n    };\n    updateRateData_writeAheadLog_currentDataLength = 0;\n    const EstimateTimeLength1: number = EstimateTime.length - 1;\n    for (let i = 0; i < updateRateData_sampleQuantity; i++) {\n      const randomIndex: number = Math.floor(Math.random() * EstimateTimeLength1);\n      const randomItem = EstimateTime[randomIndex];\n      updateRateData_trackedStops.push(randomItem.StopID);\n    }\n  }\n\n  // Record EstimateTime\n  for (const item of EstimateTime) {\n    const stopID = item.StopID;\n    const stopKey = `s_${stopID}`;\n    if (updateRateData_trackedStops.indexOf(stopID) > -1) {\n      if (!updateRateData_writeAheadLog_group.data.hasOwnProperty(stopKey)) {\n        updateRateData_writeAheadLog_group.data[stopKey] = [];\n      }\n      updateRateData_writeAheadLog_group.data[stopKey].push([parseInt(item.EstimateTime), Math.floor((currentTimestamp - updateRateData_writeAheadLog_group.timestamp) / 1000)]);\n    }\n  }\n\n  if (updateRateData_writeAheadLog_currentDataLength % 15 === 0) {\n    await lfSetItem(4, updateRateData_writeAheadLog_id, JSON.stringify(updateRateData_writeAheadLog_group));\n  }\n\n  updateRateData_writeAheadLog_currentDataLength += 1;\n\n  if (updateRateData_writeAheadLog_currentDataLength > updateRateData_writeAheadLog_maxDataLength) {\n    for (const stopID of updateRateData_trackedStops) {\n      const stopKey = `s_${stopID}`;\n      const data = updateRateData_writeAheadLog_group.data[stopKey];\n      let dataGroup = {} as UpdateRateDataGroup;\n      const existingData = await lfGetItem(3, stopKey);\n      if (existingData) {\n        const existingDataObject = JSON.parse(existingData) as UpdateRateDataGroup;\n        dataGroup.stats = mergeUpdateRateDataStats(existingDataObject.stats, getUpdateRateDataStats(data));\n        dataGroup.timestamp = existingDataObject.timestamp;\n        dataGroup.id = stopID;\n      } else {\n        dataGroup.stats = getUpdateRateDataStats(data);\n        dataGroup.timestamp = currentTimestamp;\n        dataGroup.id = stopID;\n      }\n      await lfSetItem(3, stopKey, JSON.stringify(dataGroup));\n      if (updateRateData_groupsIndex.hasOwnProperty(stopKey)) {\n        const existingIndex = updateRateData_groupsIndex[stopKey];\n        updateRateData_groups.splice(existingIndex, 1, dataGroup);\n      } else {\n        updateRateData_groups[stopKey] = updateRateData_groups.length;\n        updateRateData_groups.push(dataGroup);\n      }\n      await lfRemoveItem(4, updateRateData_writeAheadLog_id);\n    }\n\n    updateRateData_writeAheadLog_tracking = false;\n  }\n}\n\nexport async function recoverUpdateRateDataFromWriteAheadLog() {\n  const now = new Date().getTime();\n  const oneWeekAgo = now - 60 * 60 * 7 * 1000;\n  const keys = await lfListItemKeys(4);\n  for (const key of keys) {\n    const json = await lfGetItem(4, key);\n    const object = JSON.parse(json) as UpdateRateDataWriteAheadLogGroup;\n    const thisTimestamp = object.timestamp;\n    const thisID = object.id;\n    if (thisTimestamp > oneWeekAgo) {\n      for (const stopKey in object.data) {\n        const thisStopData = object[stopKey];\n        let dataGroup = {} as UpdateRateDataGroup;\n        const existingData = await lfGetItem(3, stopKey);\n        if (existingData) {\n          const existingDataObject = JSON.parse(existingData) as UpdateRateDataGroup;\n          dataGroup.stats = mergeUpdateRateDataStats(existingDataObject.stats, getUpdateRateDataStats(thisStopData));\n          dataGroup.timestamp = existingDataObject.timestamp;\n          dataGroup.id = stopID;\n        } else {\n          dataGroup.stats = getUpdateRateDataStats(thisStopData);\n          dataGroup.timestamp = currentTimestamp;\n          dataGroup.id = stopID;\n        }\n        await lfSetItem(3, stopKey, JSON.stringify(dataGroup));\n        if (updateRateData_groupsIndex.hasOwnProperty(stopKey)) {\n          const existingIndex = updateRateData_groupsIndex[stopKey];\n          updateRateData_groups.splice(existingIndex, 1, dataGroup);\n        } else {\n          updateRateData_groups[stopKey] = updateRateData_groups.length;\n          updateRateData_groups.push(dataGroup);\n        }\n        await lfRemoveItem(4, thisID);\n      }\n    }\n  }\n}\n\nexport async function initializeUpdateRateDataGroups() {\n  const now = new Date().getTime();\n  const oneWeekAgo = now - 60 * 60 * 7 * 1000;\n  const keys = await lfListItemKeys(3);\n  let index: number = 0;\n  for (const key of keys) {\n    const json = await lfGetItem(3, key);\n    if (json) {\n      const object = JSON.parse(json) as UpdateRateDataGroup;\n      const thisTimestamp = object.timestamp;\n      if (thisTimestamp > oneWeekAgo) {\n        updateRateData_groups.push(object);\n        updateRateData_groupsIndex[key] = index;\n        index += 1;\n      }\n    }\n  }\n}\n\nexport function listUpdateRateDataGroups(): Array<UpdateRateDataGroup> {\n  const now = new Date().getTime();\n  const oneWeekAgo = now - 60 * 60 * 7 * 1000;\n  return updateRateData_groups.filter((item) => item.timestamp > oneWeekAgo && typeof item.stats.correlation === 'number');\n}\n\nexport async function discardExpiredUpdateRateDataGroups() {\n  const now = new Date().getTime();\n  const oneWeekAgo = now - 60 * 60 * 7 * 1000;\n  const keys = await lfListItemKeys(3);\n  for (const key of keys) {\n    const json = await lfGetItem(3, key);\n    const object = JSON.parse(json) as UpdateRateDataGroup;\n    const thisTimestamp = object.timestamp;\n    const thisCorrelation = object.stats.correlation;\n    if (thisTimestamp <= oneWeekAgo || typeof thisCorrelation !== 'number') {\n      await lfRemoveItem(3, key);\n    }\n  }\n}\n\nlet getUpdateRateWorkerResponses = {};\nvar port;\n\n// Check if SharedWorker is supported, and fall back to Worker if not\nif (typeof SharedWorker !== 'undefined') {\n  const getUpdateRateSharedWorker = new SharedWorker(new URL('./getUpdateRate-worker.ts', import.meta.url)); // Reusable shared worker\n  port = getUpdateRateSharedWorker.port; // Access the port for communication\n  port.start(); // Start the port (required by some browsers)\n} else {\n  const getUpdateRateWorker = new Worker(new URL('./getUpdateRate-worker.ts', import.meta.url)); // Fallback to standard worker\n  port = getUpdateRateWorker; // Use Worker directly for communication\n}\n\n// Handle messages from the worker\nport.onmessage = function (e) {\n  const [result, taskID] = e.data;\n  if (getUpdateRateWorkerResponses[taskID]) {\n    getUpdateRateWorkerResponses[taskID](result); // Resolve the correct promise\n    delete getUpdateRateWorkerResponses[taskID]; // Clean up the response handler\n  }\n};\n\n// Handle errors\nport.onerror = function (e) {\n  console.error(e.message);\n};\n\nexport async function getUpdateRate(): Promise<number> {\n  const dataGroups = await listUpdateRateDataGroups();\n  const taskID = generateIdentifier('t');\n\n  const result = await new Promise((resolve, reject) => {\n    getUpdateRateWorkerResponses[taskID] = resolve; // Store the resolve function for this taskID\n\n    port.onerror = function (e) {\n      reject(e.message);\n    };\n\n    port.postMessage([dataGroups, taskID]); // Send the task to the worker\n  });\n\n  return result;\n}\n\n/*\nexport async function getUpdateRateInTime(): Promise<string> {\n  let totalWeight: number = 0;\n  let totalAverageChange: number = 0;\n  let weightedAverageChange: number = 0;\n  const dataGroup = await listUpdateRateDataGroups();\n  for (const dataSet of dataGroup) {\n    const groups = splitDataByDelta(dataSet);\n    for (const group of groups) {\n      const firstColumn: Array<number> = group.map((item) => item[0]);\n      const secondColumn: Array<number> = group.map((item) => item[1]);\n      const rowCount: number = firstColumn.length;\n      let timeStampUponChanges: Array<number> = [];\n      for (let i = 1; i < rowCount; i++) {\n        const change: number = Math.abs(firstColumn[i] - firstColumn[i - 1]);\n        if (change > 0) {\n          timeStampUponChanges.push(secondColumn[i]);\n        }\n      }\n      const timeStampUponChangesLength: number = timeStampUponChanges.length;\n      let totalChange: number = 0;\n      let average: number = 0;\n      for (let i = 1; i < timeStampUponChangesLength; i++) {\n        const change: number = Math.abs(timeStampUponChanges[i] - timeStampUponChanges[i - 1]); // measured in seconds\n        totalChange += change;\n      }\n      average = totalChange / (timeStampUponChangesLength - 1);\n      totalAverageChange += isNaN(average) ? 0 : average * rowCount;\n      totalWeight += isNaN(average) ? 0 : rowCount;\n    }\n  }\n  weightedAverageChange = totalAverageChange / totalWeight;\n  return isNaN(weightedAverageChange) ? '!' : formatTime(weightedAverageChange, 0);\n}\n*/\n","import { generateIdentifier } from '../../../tools/index';\nimport { findExtremum } from '../../../tools/math';\nimport { WeekDayIndex } from '../../../tools/time';\nimport { EstimateTime } from '../../apis/getEstimateTime/index';\nimport { listAllFolderContent } from '../../folder/index';\nimport { isInPersonalSchedule, listPersonalSchedules } from '../../personal-schedule/index';\nimport { PersonalSchedule } from '../../personal-schedule/index';\nimport { lfGetItem, lfListItemKeys, lfSetItem, lfRemoveItem } from '../../storage/index';\n\nconst busArrivalTimeData_writeAheadLog_maxDataLength: number = 32;\nlet busArrivalTimeData_writeAheadLog_id: string = '';\nlet busArrivalTimeData_writeAheadLog_tracking: boolean = false;\nlet busArrivalTimeData_trackedStops: Array<number> = [];\nlet busArrivalTimeData_writeAheadLog_group: BusArrivalTimeDataWriteAheadLog = {\n  data: {},\n  timestamp: 0,\n  id: ''\n};\nlet busArrivalTimeData_writeAheadLog_currentDataLength: number = 0;\n\nexport type BusArrivalTimeData = [estimateTime: number, timestamp: number]; // EstimateTime (seconds), timestamp (milliseconds)\n\nexport type BusArrivalTimeDataGroupStats = Array<number>;\n\nexport interface BusArrivalTimeDataGroup {\n  stats: BusArrivalTimeDataGroupStats;\n  day: WeekDayIndex;\n  max: number;\n  min: number;\n  timestamp: number;\n  id: number; // stop id\n}\n\nexport type BusArrivalTimeDataGroupArray = Array<BusArrivalTimeDataGroup>;\n\nexport interface BusArrivalTimeDataWriteAheadLog {\n  data: {\n    [key: string]: Array<BusArrivalTimeData>;\n  };\n  timestamp: number;\n  id: string;\n}\n\nexport interface BusArrivalTime {\n  personalSchedule: PersonalSchedule;\n  chart: string; // svg\n  day: WeekDayIndex;\n}\n\nexport interface BusArrivalTimes {\n  [stopKey: string]: Array<BusArrivalTime>;\n}\n\nfunction getBusArrivalTimeDataStats(data: Array<BusArrivalTimeData>): BusArrivalTimeDataGroupStats {\n  const statsArray = new Uint32Array(60 * 24); // one day in minutes\n  const dataLength = data.length;\n  for (let i = dataLength - 1; i >= 0; i--) {\n    const item = data[i];\n    let time = 0;\n    let offset = 0;\n    if (item[0] >= 0) {\n      time = item[1] + item[0] * 1000;\n      offset = 1;\n    } else {\n      time = item[1];\n      offset = 0;\n    }\n    const date = new Date(time);\n    const index = date.getHours() * 60 + date.getMinutes();\n    statsArray[index] += offset;\n  }\n  return Array.from(statsArray);\n}\n\nfunction mergeBusArrivalTimeDataStats(targetStats: BusArrivalTimeDataGroupStats, sourceStats: BusArrivalTimeDataGroupStats): BusArrivalTimeDataGroupStats {\n  const mergedArray = new Uint32Array(60 * 24);\n  for (let i = 60 * 24 - 1; i >= 0; i--) {\n    mergedArray[i] = targetStats[i] + sourceStats[i];\n  }\n  return Array.from(mergedArray);\n}\n\nexport async function collectBusArrivalTimeData(EstimateTime: EstimateTime) {\n  const now = new Date();\n  const currentTimestamp: number = now.getTime();\n  const currentDay = now.getDay();\n  let needToReset = false;\n  // Initialize\n  if (!busArrivalTimeData_writeAheadLog_tracking) {\n    busArrivalTimeData_writeAheadLog_tracking = true;\n    busArrivalTimeData_writeAheadLog_id = generateIdentifier('b');\n    busArrivalTimeData_writeAheadLog_group = {\n      id: busArrivalTimeData_writeAheadLog_id,\n      timestamp: currentTimestamp,\n      data: {}\n    };\n    busArrivalTimeData_writeAheadLog_currentDataLength = 0;\n    const allFolderContent = await listAllFolderContent(['stop']);\n    busArrivalTimeData_trackedStops = allFolderContent.map((e) => e.id);\n  }\n\n  // Record EstimateTime\n  if (isInPersonalSchedule(now)) {\n    for (const item of EstimateTime) {\n      const stopID = item.StopID;\n      const stopKey = `s_${stopID}_${currentDay}`;\n      if (busArrivalTimeData_trackedStops.indexOf(stopID) > -1) {\n        if (!busArrivalTimeData_writeAheadLog_group.data.hasOwnProperty(stopKey)) {\n          busArrivalTimeData_writeAheadLog_group.data[stopKey] = [];\n        }\n        busArrivalTimeData_writeAheadLog_group.data[stopKey].push([parseInt(item.EstimateTime), currentTimestamp]);\n        busArrivalTimeData_writeAheadLog_currentDataLength += 1;\n        if (busArrivalTimeData_writeAheadLog_currentDataLength > busArrivalTimeData_writeAheadLog_maxDataLength) {\n          needToReset = true;\n        }\n      }\n    }\n    if (needToReset || busArrivalTimeData_writeAheadLog_currentDataLength % 8 === 0) {\n      await lfSetItem(5, busArrivalTimeData_writeAheadLog_id, JSON.stringify(busArrivalTimeData_writeAheadLog_group));\n    }\n    if (needToReset) {\n      for (const stopID of busArrivalTimeData_trackedStops) {\n        const stopKey = `s_${stopID}_${currentDay}`;\n        const data = busArrivalTimeData_writeAheadLog_group.data[stopKey];\n        let dataGroup = {} as BusArrivalTimeDataGroup;\n        const existingData = await lfGetItem(6, stopKey);\n        if (existingData) {\n          const existingDataObject = JSON.parse(existingData) as BusArrivalTimeDataGroup;\n          const newStats = getBusArrivalTimeDataStats(data);\n          const mergedStats = mergeBusArrivalTimeDataStats(existingDataObject.stats, newStats);\n          dataGroup.stats = mergedStats;\n          const newExtremum = findExtremum(mergedStats);\n          dataGroup.min = newExtremum[0];\n          dataGroup.max = newExtremum[1];\n          dataGroup.day = currentDay;\n          dataGroup.timestamp = existingDataObject.timestamp;\n          dataGroup.id = stopID;\n        } else {\n          const newStats = getBusArrivalTimeDataStats(data);\n          dataGroup.stats = newStats;\n          const newExtremum = findExtremum(newStats);\n          dataGroup.min = newExtremum[0];\n          dataGroup.max = newExtremum[1];\n          dataGroup.day = currentDay;\n          dataGroup.timestamp = currentTimestamp;\n          dataGroup.id = stopID;\n        }\n        await lfSetItem(6, stopKey, JSON.stringify(dataGroup));\n        await lfRemoveItem(5, busArrivalTimeData_writeAheadLog_id);\n      }\n      busArrivalTimeData_writeAheadLog_tracking = false;\n    }\n  }\n}\n\nexport async function recoverBusArrivalTimeDataFromWriteAheadLog() {\n  const now = new Date();\n  const currentTimestamp = now.getTime();\n  const currentDay = now.getDay();\n  const keys = await lfListItemKeys(5);\n  for (const key of keys) {\n    const json = await lfGetItem(5, key);\n    const object = JSON.parse(json) as BusArrivalTimeDataWriteAheadLog;\n    const thisID = object.id;\n    for (const stopKey in object.data) {\n      const thisStopData = object[stopKey];\n      let dataGroup = {} as BusArrivalTimeDataGroup;\n      const existingData = await lfGetItem(6, stopKey);\n      if (existingData) {\n        const existingDataObject = JSON.parse(existingData) as BusArrivalTimeDataGroup;\n        const newStats = getBusArrivalTimeDataStats(thisStopData);\n        dataGroup.stats = mergeBusArrivalTimeDataStats(existingDataObject.stats, newStats);\n        const newExtremum = findExtremum(newStats.concat(existingDataObject.max, existingDataObject.min));\n        dataGroup.min = newExtremum[0];\n        dataGroup.max = newExtremum[1];\n        dataGroup.day = existingDataObject.day;\n        dataGroup.timestamp = existingDataObject.timestamp;\n        dataGroup.id = stopID;\n      } else {\n        const newStats = getBusArrivalTimeDataStats(thisStopData);\n        dataGroup.stats = newStats;\n        const newExtremum = findExtremum(newStats);\n        dataGroup.min = newExtremum[0];\n        dataGroup.max = newExtremum[1];\n        dataGroup.day = currentDay;\n        dataGroup.timestamp = currentTimestamp;\n        dataGroup.id = stopID;\n      }\n      await lfSetItem(6, stopKey, JSON.stringify(dataGroup));\n      await lfRemoveItem(5, thisID);\n    }\n  }\n}\n\nexport async function listBusArrivalTimeDataGroups(): Promise<BusArrivalTimeDataGroupArray> {\n  const keys = await lfListItemKeys(6);\n  let result: BusArrivalTimeDataGroupArray = [];\n  for (const key of keys) {\n    const json = await lfGetItem(6, key);\n    if (json) {\n      const object = JSON.parse(json) as BusArrivalTimeDataGroup;\n      result.push(object);\n    }\n  }\n  return result;\n}\n\nlet getBusArrivalTimesWorkerResponses = {};\nvar port;\n\n// Check if SharedWorker is supported, and fall back to Worker if not\nif (typeof SharedWorker !== 'undefined') {\n  const getUpdateRateSharedWorker = new SharedWorker(new URL('./getBusArrivalTimes-worker.ts', import.meta.url)); // Reusable shared worker\n  port = getUpdateRateSharedWorker.port; // Access the port for communication\n  port.start(); // Start the port (required by some browsers)\n} else {\n  const getUpdateRateWorker = new Worker(new URL('./getBusArrivalTimes-worker.ts', import.meta.url)); // Fallback to standard worker\n  port = getUpdateRateWorker; // Use Worker directly for communication\n}\n\n// Handle messages from the worker\nport.onmessage = function (e) {\n  const [result, taskID] = e.data;\n  if (getBusArrivalTimesWorkerResponses[taskID]) {\n    getBusArrivalTimesWorkerResponses[taskID](result); // Resolve the correct promise\n    delete getBusArrivalTimesWorkerResponses[taskID]; // Clean up the response handler\n  }\n};\n\n// Handle errors\nport.onerror = function (e) {\n  console.error(e.message);\n};\n\nexport async function getBusArrivalTimes(chartWidth: number, chartHeight: number): Promise<BusArrivalTimes> {\n  const taskID = generateIdentifier('t');\n\n  const personalSchedules = await listPersonalSchedules();\n  const busArrivalTimeDataGroups = await listBusArrivalTimeDataGroups();\n\n  const result = await new Promise((resolve, reject) => {\n    getBusArrivalTimesWorkerResponses[taskID] = resolve; // Store the resolve function for this taskID\n    port.onerror = function (e) {\n      reject(e.message);\n    };\n    port.postMessage([personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID]); // Send the task to the worker\n  });\n  return result;\n}\n","import { createDateObjectFromDate, dateToString, offsetDate, TimeStampPeriod } from '../../../tools/time';\nimport { lfSetItem, lfGetItem, lfListItemKeys, lfRemoveItem } from '../../storage/index';\n\nexport interface DataUsageStatsChunk {\n  date: [year: number, month: number, day: number];\n  data: Array<number>;\n  stats: {\n    sum: number;\n    max: number;\n    min: number;\n  };\n}\n\nexport type DataUsageStatsChunkArray = Array<DataUsageStatsChunk>;\n\nexport interface DataUsageStats {\n  stats: {\n    sum: number;\n    max: number;\n    min: number;\n  };\n  period: TimeStampPeriod;\n  chart: string;\n}\n\nexport const DataUsagePeriod = 7; // days\n\nexport async function recordDataUsage(contentLength: number, date: Date) {\n  const key = `d_${dateToString(date, 'YYYY_MM_DD')}`;\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const index = hours * 60 + minutes;\n  const existingDataUsageStatsChunkJSON = await lfGetItem(2, key);\n  if (existingDataUsageStatsChunkJSON) {\n    const existingDataUsageStatsChunkObject = JSON.parse(existingDataUsageStatsChunkJSON) as DataUsageStatsChunk;\n    existingDataUsageStatsChunkObject.stats.sum += contentLength;\n    existingDataUsageStatsChunkObject.data[index] += contentLength;\n    const changedData = existingDataUsageStatsChunkObject.data[index];\n    if (changedData > existingDataUsageStatsChunkObject.stats.max) {\n      existingDataUsageStatsChunkObject.stats.max = changedData;\n    }\n    if (changedData < existingDataUsageStatsChunkObject.stats.min) {\n      existingDataUsageStatsChunkObject.stats.min = changedData;\n    }\n    await lfSetItem(2, key, JSON.stringify(existingDataUsageStatsChunkObject));\n  } else {\n    const newDataUsageStatsChunk = {} as DataUsageStatsChunk;\n    const data = new Uint32Array(60 * 24);\n    data[index] += contentLength;\n    newDataUsageStatsChunk.data = Array.from(data);\n    newDataUsageStatsChunk.stats = {\n      sum: contentLength,\n      max: contentLength,\n      min: 0\n    };\n    newDataUsageStatsChunk.date = [date.getFullYear(), date.getMonth() + 1, date.getDate()];\n    await lfSetItem(2, key, JSON.stringify(newDataUsageStatsChunk));\n  }\n}\n\nexport async function listDataUsageStatsChunks(): Promise<DataUsageStatsChunkArray> {\n  const endDate = new Date();\n  endDate.setHours(0);\n  endDate.setMinutes(0);\n  endDate.setSeconds(0);\n  endDate.setMilliseconds(0);\n  const startDate = offsetDate(endDate, -1 * DataUsagePeriod, 0, 0);\n  const result: DataUsageStatsChunkArray = [];\n  for (let i = 1; i <= DataUsagePeriod; i++) {\n    const date = offsetDate(startDate, i, 0, 0);\n    const key = `d_${dateToString(date, 'YYYY_MM_DD')}`;\n    const existingDataUsageStatsChunkJSON = await lfGetItem(2, key);\n    if (existingDataUsageStatsChunkJSON) {\n      const existingDataUsageStatsChunkObject = JSON.parse(existingDataUsageStatsChunkJSON) as DataUsageStatsChunk;\n      result.push(existingDataUsageStatsChunkObject);\n    } else {\n      const blankDataUsageStatsChunk = {} as DataUsageStatsChunk;\n      const data = new Uint32Array(60 * 24);\n      blankDataUsageStatsChunk.data = Array.from(data);\n      blankDataUsageStatsChunk.stats = {\n        sum: 0,\n        max: 0,\n        min: 0\n      };\n      blankDataUsageStatsChunk.date = [date.getFullYear(), date.getMonth() + 1, date.getDate()];\n      result.push(blankDataUsageStatsChunk);\n    }\n  }\n  return result;\n}\n\nexport async function discardExpiredDataUsageStats() {\n  const millisecondsPerDay = 60 * 60 * 24 * 1000;\n  const expirationPeriod = millisecondsPerDay * DataUsagePeriod;\n  const now = new Date().getTime();\n  const keys = await lfListItemKeys(2);\n  for (const key of keys) {\n    const json = await lfGetItem(2, key);\n    const object = JSON.parse(json) as DataUsageStatsChunk;\n    const date = createDateObjectFromDate(object.date[0], object.date[1], object.date[2]);\n    if (now - date.getTime() > expirationPeriod) {\n      await lfRemoveItem(2, key);\n    }\n  }\n}\n\nexport async function getDataUsageStats(width: number, height: number, padding: number): Promise<DataUsageStats> {\n  const worker = new Worker(new URL('./getDataUsageStats-worker.ts', import.meta.url));\n  const dataUsageStatsChunks = await listDataUsageStatsChunks();\n  // Wrap worker communication in a promise\n  const result = await new Promise((resolve, reject) => {\n    worker.onmessage = function (e) {\n      resolve(e.data); // Resolve the promise with the worker's result\n      worker.terminate(); // Terminate the worker when done\n    };\n    worker.onerror = function (e) {\n      reject(e.message); // Reject the promise on error\n      worker.terminate(); // Terminate the worker if an error occurs\n    };\n    worker.postMessage([dataUsageStatsChunks, width, height, padding]); // Send data to the worker\n  });\n  return result;\n}\n"],"names":["storeIndexToCategory","store","name","key","getStoreKey","getStoresSizeStatistics","_getStoresSizeStatistics","apply","arguments","totalSizeInBytes","categorizedSizesInBytes","storesLength","getStoresLength","i","_step","thisStoreSizeInBytes","_iterator","_createForOfIteratorHelper","lfListItemKeys","s","n","done","itemKey","value","item","lfGetItem","itemLength","String","length","err","e","f","thisCategory","thisCategoryKey","hasOwnProperty","category","size","totalSize","convertBytes","categorizedSizes","thisCategorySize","updateRateData_trackedStops","updateRateData_writeAheadLog_id","updateRateData_writeAheadLog_tracking","updateRateData_writeAheadLog_currentDataLength","updateRateData_writeAheadLog_group","data","timestamp","id","updateRateData_groups","updateRateData_groupsIndex","getUpdateRateDataStats","sumEstimateTime","sumEstimateTimeSquared","sumTimestamp","sumTimestampSquared","dataLength","estimateTime","Math","pow","_step2","averageEstimateTime","averageTimestamp","estimateTimeVariance","timestampVariance","estimateTimeSTDEV","sqrt","timestampSTDEV","covariance","_iterator2","item2","estimate_time","average","stdev","correlation","mergeUpdateRateDataStats","targetStats","sourceStats","mergedDataLength","mergedAverageEstimateTime","mergedAverageTimestamp","mergeStandardDeviation","mergePearsonCorrelation","collectUpdateRateData","_x","_collectUpdateRateData","_asyncToGenerator","EstimateTime","currentTimestamp","Date","getTime","generateIdentifier","EstimateTimeLength1","randomItem","floor","random","push","StopID","_step3","_iterator3","stopID","stopKey","concat","indexOf","parseInt","lfSetItem","JSON","stringify","_step4","_iterator4","dataGroup","existingData","existingDataObject","parse","stats","existingIndex","splice","lfRemoveItem","recoverUpdateRateDataFromWriteAheadLog","_recoverUpdateRateDataFromWriteAheadLog","_step5","oneWeekAgo","_iterator5","json","object","thisTimestamp","thisID","thisStopData","initializeUpdateRateDataGroups","_initializeUpdateRateDataGroups","_step6","index","_iterator6","listUpdateRateDataGroups","filter","discardExpiredUpdateRateDataGroups","_discardExpiredUpdateRateDataGroups","_step7","_iterator7","thisCorrelation","port","getUpdateRateWorkerResponses","SharedWorker","getUpdateRateSharedWorker","URL","start","getUpdateRateWorker","Worker","getUpdateRate","_getUpdateRate","dataGroups","taskID","Promise","resolve","reject","onerror","message","postMessage","onmessage","_e$data","_slicedToArray","result","console","error","busArrivalTimeData_writeAheadLog_id","busArrivalTimeData_writeAheadLog_tracking","busArrivalTimeData_trackedStops","busArrivalTimeData_writeAheadLog_group","busArrivalTimeData_writeAheadLog_currentDataLength","getBusArrivalTimeDataStats","statsArray","Uint32Array","time","offset","date","getHours","getMinutes","Array","from","mergeBusArrivalTimeDataStats","mergedArray","collectBusArrivalTimeData","_collectBusArrivalTimeData","now","currentDay","getDay","needToReset","allFolderContent","listAllFolderContent","map","isInPersonalSchedule","newStats","mergedStats","newExtremum","findExtremum","min","max","day","recoverBusArrivalTimeDataFromWriteAheadLog","_recoverBusArrivalTimeDataFromWriteAheadLog","listBusArrivalTimeDataGroups","_listBusArrivalTimeDataGroups","getBusArrivalTimesWorkerResponses","getBusArrivalTimes","_x2","_x3","_getBusArrivalTimes","chartWidth","chartHeight","personalSchedules","listPersonalSchedules","busArrivalTimeDataGroups","recordDataUsage","_recordDataUsage","contentLength","dateToString","existingDataUsageStatsChunkJSON","existingDataUsageStatsChunkObject","sum","changedData","newDataUsageStatsChunk","getFullYear","getMonth","getDate","listDataUsageStatsChunks","_listDataUsageStatsChunks","endDate","setHours","setMinutes","setSeconds","setMilliseconds","startDate","offsetDate","blankDataUsageStatsChunk","discardExpiredDataUsageStats","_discardExpiredDataUsageStats","createDateObjectFromDate","millisecondsPerDay","getDataUsageStats","_x4","_x5","_getDataUsageStats","width","height","padding","worker","dataUsageStatsChunks","terminate"],"sourceRoot":""}