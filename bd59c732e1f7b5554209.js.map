{"version":3,"file":"bd59c732e1f7b5554209.js","mappings":"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","sources":["webpack://bus/./src/data/notification/apis/cancelNotification/index.ts","webpack://bus/./src/data/notification/apis/loader.ts","webpack://bus/./src/data/notification/apis/registerNotificationClient/index.ts","webpack://bus/./src/data/notification/apis/rotateNotificationSecret/index.ts","webpack://bus/./src/data/notification/apis/scheduleNotification/index.ts","webpack://bus/./src/data/notification/index.ts","webpack://bus/./src/data/notification/apis/getNotificationAPIURL/index.ts","webpack://bus/./src/data/recent-views/index.ts","webpack://bus/./src/data/personal-schedule/index.ts","webpack://bus/./src/data/notification/apis/getNotificationRequestBody/index.ts"],"sourcesContent":["import { NotificationClientID, NotificationSecret, NotificationSchedule, removeNotificationSchedule } from '../../index';\nimport { getNotificationAPIURL } from '../getNotificationAPIURL/index';\nimport { getNotificationRequestBody } from '../getNotificationRequestBody/index';\nimport { makeNotificationRequest } from '../loader';\n\nexport async function cancelNotification(schedule_id: NotificationSchedule['schedule_id']): Promise<boolean> {\n  if (NotificationClientID === '' || NotificationSecret === '' || schedule_id === undefined) {\n    return false;\n  }\n  const url = getNotificationAPIURL('cancel', [schedule_id]);\n  const requestBody = getNotificationRequestBody('cancel', [schedule_id]);\n  const response = await makeNotificationRequest('cancel', url, requestBody);\n  if (response === false) {\n    return false;\n  } else {\n    if (response.code === 200 && response.method === 'cancel') {\n      await removeNotificationSchedule(schedule_id);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","type NotificationResponseCode = 200 | 400 | 401 | 404 | 500;\n\ninterface NotificationResponseCancel {\n  result: string;\n  code: NotificationResponseCode;\n  method: 'cancel';\n}\n\ninterface NotificationResponseRegister {\n  result: string;\n  code: NotificationResponseCode;\n  method: 'register';\n  client_id: string | 'null';\n  secret: string | 'null';\n}\n\ninterface NotificationResponseSchedule {\n  result: string;\n  code: NotificationResponseCode;\n  method: 'schedule';\n  schedule_id: string | 'null';\n}\n\ninterface NotificationResponseRotate {\n  result: string;\n  code: NotificationResponseCode;\n  method: 'rotate';\n  secret: string | 'null';\n}\n\ninterface NotificationResponseReschedule {\n  result: string;\n  code: NotificationResponseCode;\n  method: 'reschedule';\n}\n\nexport type NotificationResponse = NotificationResponseCancel | NotificationResponseRegister | NotificationResponseSchedule | NotificationResponseRotate | NotificationResponseReschedule;\n\nexport async function makeNotificationRequest(method: NotificationResponse['method'], url: string | false, body: object | false): Promise<NotificationResponse | false> {\n  try {\n    if (url === false || body === false) {\n      return false;\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    };\n\n    // Send the request\n    const response = await fetch(url, requestOptions);\n\n    if (!response.ok) {\n      // Log additional details for debugging\n      const errorText = await response.text();\n      console.error('API request failed', {\n        status: response.status,\n        statusText: response.statusText,\n        body: errorText\n      });\n      return false;\n    }\n\n    // Attempt to parse the JSON response\n    try {\n      const text = await response.text();\n      const json = JSON.parse(text);\n      switch (method) {\n        case 'cancel':\n          return json as NotificationResponseCancel;\n          break;\n        case 'register':\n          return json as NotificationResponseRegister;\n          break;\n        case 'schedule':\n          return json as NotificationResponseSchedule;\n          break;\n        case 'rotate':\n          return json as NotificationResponseRotate;\n          break;\n        case 'reschedule':\n          return json as NotificationResponseReschedule;\n          break;\n        default:\n          return false;\n          break;\n      }\n    } catch (jsonError) {\n      console.error('Failed to parse JSON response', jsonError);\n      throw new Error('Invalid JSON response from server');\n    }\n  } catch (error) {\n    // Catch and log errors\n    console.error('Error making request:', error);\n    return false;\n  }\n}\n","import { saveNotificationClient, setNotificationClientID, setNotificationSecret } from '../..';\nimport { getNotificationAPIURL } from '../getNotificationAPIURL/index';\nimport { getNotificationRequestBody } from '../getNotificationRequestBody/index';\nimport { makeNotificationRequest } from '../loader';\n\nexport async function registerNotificationClient(registrationKey: string): Promise<boolean> {\n  if (!registrationKey) {\n    return false;\n  }\n  const url = getNotificationAPIURL('register');\n  const requestBody = getNotificationRequestBody('register', [registrationKey]);\n  const response = await makeNotificationRequest('register', url, requestBody);\n  if (response === false) {\n    return false;\n  } else {\n    if (response.code === 200 && response.method === 'register') {\n      setNotificationClientID(response.client_id)\n      setNotificationSecret(response.secret)\n      await saveNotificationClient();\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { NotificationClientID, NotificationSecret, saveNotificationClient, setNotificationSecret } from '../../index';\nimport { getNotificationAPIURL } from '../getNotificationAPIURL/index';\nimport { getNotificationRequestBody } from '../getNotificationRequestBody/index';\nimport { makeNotificationRequest } from '../loader';\n\nexport async function rotateNotificationSecret(): Promise<boolean> {\n  if (NotificationClientID === '' || NotificationSecret === '') {\n    return false;\n  }\n  const url = getNotificationAPIURL('rotate');\n  const requestBody = getNotificationRequestBody('rotate', []);\n  const response = await makeNotificationRequest('rotate', url, requestBody);\n  if (response === false) {\n    return false;\n  } else {\n    if (response.code === 200 && response.method === 'rotate') {\n      setNotificationSecret(response.secret);\n      await saveNotificationClient();\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { NotificationClientID, NotificationSecret, NotificationSchedule, saveNotificationSchedule } from '../../index';\nimport { getNotificationAPIURL } from '../getNotificationAPIURL/index';\nimport { getNotificationRequestBody } from '../getNotificationRequestBody/index';\nimport { makeNotificationRequest } from '../loader';\nimport { rotateNotificationSecret } from '../rotateNotificationSecret/index';\n\nexport async function scheduleNotification(stop_id: NotificationSchedule['stop_id'], location_name: NotificationSchedule['location_name'], route_id: NotificationSchedule['route_id'], route_name: NotificationSchedule['route_name'], direction: NotificationSchedule['direction'], estimate_time: NotificationSchedule['estimate_time'], time_formatting_mode: NotificationSchedule['time_formatting_mode'], time_offset: NotificationSchedule['time_offset'], scheduled_time: string | number | Date): Promise<string | false> {\n  if (NotificationClientID === '' || NotificationSecret === '' || stop_id === undefined || location_name === undefined || route_id === undefined || route_name === undefined || direction === undefined || estimate_time === undefined || !(typeof time_formatting_mode === 'number') || scheduled_time === undefined) {\n    return false;\n  }\n  let processed_schedule_time = new Date();\n  switch (typeof scheduled_time) {\n    case 'string':\n      processed_schedule_time = new Date(scheduled_time);\n      break;\n    case 'number':\n      processed_schedule_time = new Date(scheduled_time);\n      break;\n    default:\n      if (scheduled_time instanceof Date) {\n        processed_schedule_time = scheduled_time;\n      } else {\n        return false;\n      }\n      break;\n  }\n  const url = getNotificationAPIURL('schedule');\n  const requestBody = getNotificationRequestBody('schedule', [stop_id, location_name, route_id, route_name, direction, estimate_time, time_formatting_mode, time_offset, processed_schedule_time.toISOString()]);\n  const response = await makeNotificationRequest('schedule', url, requestBody);\n  if (response === false) {\n    return false;\n  } else {\n    if (response.code === 200 && response.method === 'schedule') {\n      if (Math.random() > 0.8) {\n        await rotateNotificationSecret();\n      }\n      await saveNotificationSchedule(response.schedule_id, stop_id, location_name, route_id, route_name, direction, estimate_time, time_formatting_mode, time_offset, processed_schedule_time.getTime());\n      return response.schedule_id;\n    } else {\n      return false;\n    }\n  }\n}\n","import { MaterialSymbols } from '../../interface/icons/material-symbols-type';\nimport { generateIdentifier, isValidURL } from '../../tools/index';\nimport { getLocation, SimplifiedLocation, SimplifiedLocationItem } from '../apis/getLocation/index';\nimport { getRoute, SimplifiedRoute, SimplifiedRouteItem } from '../apis/getRoute/index';\nimport { getStop, SimplifiedStop, SimplifiedStopItem } from '../apis/getStop/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime, getDataUpdateTime } from '../apis/loader';\nimport { getSettingOptionValue } from '../settings/index';\nimport { lfGetItem, lfListItemKeys, lfRemoveItem, lfSetItem } from '../storage/index';\nimport { scheduleNotification } from './apis/scheduleNotification/index';\n\nexport interface NotificationClient {\n  provider: string;\n  client_id: string;\n  secret: string;\n}\n\nexport interface NotificationSchedule {\n  schedule_id: string;\n  stop_id: number;\n  location_name: string;\n  route_id: number;\n  route_name: string;\n  direction: string;\n  estimate_time: number;\n  time_formatting_mode: number;\n  time_offset: number;\n  scheduled_time: number;\n}\n\nexport let NotificationProvider: NotificationClient['provider'] = ''; // base url\nexport let NotificationClientID: NotificationClient['client_id'] = '';\nexport let NotificationSecret: NotificationClient['secret'] = '';\n\nlet NotifcationSchedules: Array<NotificationSchedule> = [];\nlet NotifcationSchedulesIndex: {\n  [key: NotificationSchedule['schedule_id']]: number;\n} = {};\nlet NotifcationSchedulesStopIDIndex: {\n  [key: string]: Array<number>;\n} = {};\n\nexport async function saveNotificationClient() {\n  const currentClient: NotificationClient = {\n    provider: NotificationProvider,\n    client_id: NotificationClientID,\n    secret: NotificationSecret\n  };\n  await lfSetItem(9, 'n_client', JSON.stringify(currentClient));\n}\n\nexport async function loadNotificationClient() {\n  const existingClient = await lfGetItem(9, 'n_client');\n  if (existingClient) {\n    const existingClientObject = JSON.parse(existingClient) as NotificationClient;\n    NotificationProvider = existingClientObject.provider;\n    NotificationClientID = existingClientObject.client_id;\n    NotificationSecret = existingClientObject.secret;\n  }\n}\n\nexport function getNotificationClientStatus(): boolean {\n  if (NotificationClientID === '' || NotificationSecret === '') {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function setNotificationProvider(provider: NotificationClient['provider']): void {\n  if (isValidURL(provider)) {\n    const url = new URL(provider);\n    NotificationProvider = `${url.protocol}//${url.hostname}`;\n  } else {\n    throw new Error('The provider is not valid.');\n  }\n}\n\nexport function getNotificationProvider(): NotificationClient['provider'] {\n  return String(NotificationProvider);\n}\n\nexport function setNotificationClientID(client_id: NotificationClient['client_id']): void {\n  if (!(client_id === undefined)) {\n    NotificationClientID = String(client_id);\n  }\n}\n\nexport function setNotificationSecret(secret: NotificationClient['secret']): void {\n  if (!(secret === undefined)) {\n    NotificationSecret = String(secret);\n  }\n}\n\nexport async function initializeNotificationSchedules() {\n  const now = new Date().getTime();\n  const keys = await lfListItemKeys(10);\n  let index: number = 0;\n  for (const key of keys) {\n    const thisScheduleJSON = await lfGetItem(10, key);\n    const thisSchedule = JSON.parse(thisScheduleJSON) as NotificationSchedule;\n    const thisScheduledTime = thisSchedule.scheduled_time;\n    // if (thisScheduledTime > now) {\n      const thisScheduleID = thisSchedule.schedule_id;\n      const thisScheduleStopID = thisSchedule.stop_id;\n      const thisScheduleStopKey = `s_${thisScheduleStopID}`;\n      NotifcationSchedules.push(thisSchedule);\n      NotifcationSchedulesIndex[thisScheduleID] = index;\n      if (!NotifcationSchedulesStopIDIndex.hasOwnProperty(thisScheduleStopKey)) {\n        NotifcationSchedulesStopIDIndex[thisScheduleStopKey] = [];\n      }\n      NotifcationSchedulesStopIDIndex[thisScheduleStopKey].push(index);\n      index += 1;\n    // }\n  }\n}\n\nexport async function saveNotificationSchedule(schedule_id: NotificationSchedule['schedule_id'], stop_id: NotificationSchedule['stop_id'], location_name: NotificationSchedule['location_name'], route_id: NotificationSchedule['route_id'], route_name: NotificationSchedule['route_name'], direction: NotificationSchedule['direction'], estimate_time: NotificationSchedule['estimate_time'], time_formatting_mode: NotificationSchedule['time_formatting_mode'], time_offset: NotificationSchedule['time_offset'], scheduled_time: NotificationSchedule['scheduled_time']) {\n  const thisNotificationSchedule: NotificationSchedule = {\n    schedule_id: schedule_id,\n    stop_id: stop_id,\n    location_name: location_name,\n    route_id: route_id,\n    route_name: route_name,\n    direction: direction,\n    estimate_time: estimate_time,\n    time_formatting_mode: time_formatting_mode,\n    time_offset: time_offset,\n    scheduled_time: scheduled_time\n  };\n  const thisNotificationScheduleStopKey = `s_${stop_id}`;\n  const thisNotificationScheduleIndex = NotifcationSchedules.length; // length - 1 + 1\n  NotifcationSchedules.push(thisNotificationSchedule);\n  NotifcationSchedulesIndex[schedule_id] = thisNotificationScheduleIndex;\n  if (!NotifcationSchedulesStopIDIndex.hasOwnProperty(thisNotificationScheduleStopKey)) {\n    NotifcationSchedulesStopIDIndex[thisNotificationScheduleStopKey] = [];\n  }\n  NotifcationSchedulesStopIDIndex[thisNotificationScheduleStopKey].push(thisNotificationScheduleIndex);\n  await lfSetItem(10, schedule_id, JSON.stringify(thisNotificationSchedule));\n}\n\nexport function getNotificationSchedule(schedule_id: NotificationSchedule['schedule_id']): NotificationSchedule | false {\n  if (NotifcationSchedulesIndex.hasOwnProperty(schedule_id)) {\n    const thisScheduleIndex = NotifcationSchedulesIndex[schedule_id];\n    const thisSchedule = NotifcationSchedules[thisScheduleIndex];\n    const thisScheduledTime = thisSchedule.scheduled_time;\n    const now = new Date().getTime();\n    if (thisScheduledTime > now) {\n      return thisSchedule;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\nexport async function updateNotificationSchedule(schedule_id: NotificationSchedule['schedule_id'], estimate_time: NotificationSchedule['estimate_time'], scheduled_time: NotificationSchedule['scheduled_time']) {\n  if (NotifcationSchedulesIndex.hasOwnProperty(schedule_id)) {\n    const existingScheduleIndex = NotifcationSchedulesIndex[schedule_id];\n    const existingSchedule = NotifcationSchedules[existingScheduleIndex];\n    const updatedSchedule: NotificationSchedule = Object.assign(existingSchedule, {\n      estimate_time: estimate_time,\n      scheduled_time: scheduled_time\n    });\n    NotifcationSchedules.splice(existingScheduleIndex, 1, updatedSchedule);\n    await lfSetItem(10, schedule_id, JSON.stringify(updatedSchedule));\n  }\n}\n\nexport async function removeNotificationSchedule(schedule_id: NotificationSchedule['schedule_id']) {\n  if (NotifcationSchedulesIndex.hasOwnProperty(schedule_id)) {\n    const existingScheduleIndex = NotifcationSchedulesIndex[schedule_id];\n    const existingSchedule = NotifcationSchedules[existingScheduleIndex];\n    const thisScheduleStopID = existingSchedule.stop_id;\n    const thisScheduleStopKey = `s_${thisScheduleStopID}`;\n    NotifcationSchedules.splice(existingScheduleIndex, 1, null);\n    NotifcationSchedulesStopIDIndex[thisScheduleStopKey].splice(NotifcationSchedulesStopIDIndex[thisScheduleStopKey].indexOf(existingScheduleIndex), 1);\n    delete NotifcationSchedulesIndex[schedule_id];\n    await lfRemoveItem(10, schedule_id);\n  }\n}\n\nexport function listNotifcationSchedules(): Array<NotificationSchedule> {\n  const now = new Date().getTime();\n  let result: Array<NotificationSchedule> = [];\n  for (const thisSchedule of NotifcationSchedules) {\n    if (!(thisSchedule === null)) {\n      const thisScheduledTime = thisSchedule.scheduled_time;\n      if (thisScheduledTime > now) {\n        result.push(thisSchedule);\n      }\n    }\n  }\n  return result;\n}\n\nexport function listNotifcationSchedulesOfStop(StopID: NotificationSchedule['stop_id']): Array<NotificationSchedule> {\n  let result: Array<NotificationSchedule> = [];\n  const now = new Date().getTime();\n  const thisStopKey = `s_${StopID}`;\n  if (NotifcationSchedulesStopIDIndex.hasOwnProperty(thisStopKey)) {\n    const indexes = NotifcationSchedulesStopIDIndex[thisStopKey];\n    for (const index of indexes) {\n      const thisSchedule = NotifcationSchedules[index];\n      if (!(thisSchedule === null)) {\n        const thisScheduledTime = thisSchedule.scheduled_time;\n        if (thisScheduledTime > now) {\n          result.push(thisSchedule);\n        }\n      }\n    }\n  }\n  return result;\n}\n\nexport function stopHasNotifcationSchedules(StopID: NotificationSchedule['stop_id']): boolean {\n  const now = new Date().getTime();\n  const thisStopKey = `s_${StopID}`;\n  if (NotifcationSchedulesStopIDIndex.hasOwnProperty(thisStopKey)) {\n    const indexes = NotifcationSchedulesStopIDIndex[thisStopKey];\n    for (const index of indexes) {\n      const thisSchedule = NotifcationSchedules[index];\n      if (!(thisSchedule === null)) {\n        const thisScheduledTime = thisSchedule.scheduled_time;\n        if (thisScheduledTime > now) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nexport async function discardExpiredNotificationSchedules() {\n  const now = new Date().getTime();\n  for (const schedule_id in NotifcationSchedulesIndex) {\n    const existingScheduleIndex = NotifcationSchedulesIndex[schedule_id];\n    const existingSchedule = NotifcationSchedules[existingScheduleIndex];\n    const thisScheduledTime = existingSchedule.scheduled_time;\n    if (thisScheduledTime <= now) {\n      const thisScheduleStopID = existingSchedule.stop_id;\n      const thisScheduleStopKey = `s_${thisScheduleStopID}`;\n      NotifcationSchedules.splice(existingScheduleIndex, 1, null);\n      NotifcationSchedulesStopIDIndex[thisScheduleStopKey].splice(NotifcationSchedulesStopIDIndex[thisScheduleStopKey].indexOf(existingScheduleIndex), 1);\n      delete NotifcationSchedulesIndex[schedule_id];\n      await lfRemoveItem(10, schedule_id);\n    }\n  }\n}\n\nexport interface IntegratedNotificationScheduleItem {\n  name: NotificationSchedule['location_name'];\n  stop_id: NotificationSchedule['stop_id'];\n  estimate_time: NotificationSchedule['estimate_time'];\n  schedule_id: NotificationSchedule['schedule_id'];\n  scheduled_time: NotificationSchedule['scheduled_time'];\n  route: {\n    name: NotificationSchedule['route_name'];\n    direction: NotificationSchedule['direction'];\n    id: NotificationSchedule['route_id'];\n    pathAttributeId: SimplifiedRouteItem['pid'];\n  };\n  is_first: boolean;\n  date: string;\n  hours: string;\n  minutes: string;\n}\n\nexport interface IntegratedNotificationSchedules {\n  items: Array<IntegratedNotificationScheduleItem>;\n  itemQuantity: number;\n  dataUpdateTime: number;\n}\n\nexport async function integrateNotifcationSchedules(requestID: string): Promise<IntegratedNotificationSchedules> {\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  const notificationSchedules = listNotifcationSchedules();\n  const now = new Date().getTime();\n\n  let items: Array<IntegratedNotificationScheduleItem> = [];\n\n  for (const item of notificationSchedules) {\n    let integratedItem = {} as IntegratedNotificationScheduleItem;\n    const thisItemName = item.location_name;\n    integratedItem.name = thisItemName;\n\n    const thisItemStopID = item.stop_id;\n    integratedItem.stop_id = thisItemStopID;\n\n    const thisItemEstimateTime = item.estimate_time;\n    integratedItem.estimate_time = thisItemEstimateTime;\n\n    const thisItemScheduleID = item.schedule_id;\n    integratedItem.schedule_id = thisItemScheduleID;\n\n    const thisItemScheduledTime = item.scheduled_time;\n    integratedItem.scheduled_time = thisItemScheduledTime;\n\n    const thisItemScheduledTimeDateInstance = new Date(thisItemScheduledTime);\n    const thisItemDate = thisItemScheduledTimeDateInstance.getDate();\n    const thisItemHours = thisItemScheduledTimeDateInstance.getHours();\n    const thisItemMinutes = thisItemScheduledTimeDateInstance.getMinutes();\n    integratedItem.date = String(thisItemDate).padStart(2, '0');\n    integratedItem.hours = String(thisItemHours).padStart(2, '0');\n    integratedItem.minutes = String(thisItemMinutes).padStart(2, '0');\n\n    integratedItem.route = {};\n    const thisRouteName = item.route_name;\n    integratedItem.route.name = thisRouteName;\n\n    const thisRouteID = item.route_id;\n    integratedItem.route.id = thisRouteID;\n\n    const thisRouteDirection = item.direction;\n    integratedItem.route.direction = thisRouteDirection;\n\n    // Collect data from Route\n    const thisNotificationScheduleRouteID = item.route_id;\n    const thisNotificationScheduleRouteKey = `r_${thisNotificationScheduleRouteID}`;\n    let thisNotificationScheduleRoute = {} as SimplifiedRouteItem;\n    if (Route.hasOwnProperty(thisNotificationScheduleRouteKey)) {\n      thisNotificationScheduleRoute = Route[thisNotificationScheduleRouteKey];\n    } else {\n      continue;\n    }\n    const thisNotificationScheduleRoutePathAttributeId = thisNotificationScheduleRoute.pid;\n    integratedItem.route.pathAttributeId = thisNotificationScheduleRoutePathAttributeId;\n\n    items.push(integratedItem);\n  }\n\n  items.sort(function (a, b) {\n    return a.scheduled_time - b.scheduled_time;\n  });\n\n  let items2: Array<IntegratedNotificationScheduleItem> = [];\n  let itemQuantity: IntegratedNotificationSchedules['itemQuantity'] = 0;\n  let groups: { [key: string]: true } = {};\n  for (let item of items) {\n    const groupKey = `g_${item.date}_${item.hours}`;\n    if (!groups.hasOwnProperty(groupKey)) {\n      groups[groupKey] = true;\n      item.is_first = true;\n    } else {\n      item.is_first = false;\n    }\n    items2.push(item);\n    itemQuantity += 1;\n  }\n\n  const result: IntegratedNotificationSchedules = {\n    items: items2,\n    itemQuantity: itemQuantity,\n    dataUpdateTime: Math.max(getDataUpdateTime(requestID), now)\n  };\n  deleteDataUpdateTime(requestID);\n  deleteDataReceivingProgress(requestID);\n  return result;\n}\n\nexport interface ScheduleNotificationOption {\n  name: string;\n  time_offset: number;\n  icon: MaterialSymbols;\n  index: number;\n}\n\nexport type ScheduleNotificationOptions = Array<ScheduleNotificationOption>;\n\nexport const scheduleNotificationOptions: ScheduleNotificationOptions = [\n  {\n    name: '到站前5分鐘',\n    time_offset: -5,\n    icon: 'clock_loader_10',\n    index: 0\n  },\n  {\n    name: '到站前10分鐘',\n    time_offset: -10,\n    icon: 'clock_loader_20',\n    index: 1\n  },\n  {\n    name: '到站前15分鐘',\n    time_offset: -15,\n    icon: 'clock_loader_40',\n    index: 2\n  },\n  {\n    name: '到站前20分鐘',\n    time_offset: -20,\n    icon: 'clock_loader_60',\n    index: 3\n  },\n  {\n    name: '到站前25分鐘',\n    time_offset: -25,\n    icon: 'clock_loader_80',\n    index: 4\n  },\n  {\n    name: '到站前30分鐘',\n    time_offset: -30,\n    icon: 'clock_loader_90',\n    index: 5\n  }\n];\n\nexport async function scheduleNotificationForStop(StopID: number, RouteID: number, EstimateTime: number, index: number): Promise<0 | 1 | 2> {\n  if (getNotificationClientStatus()) {\n    const time_formatting_mode = getSettingOptionValue('time_formatting_mode') as number;\n    const requestID = generateIdentifier('r');\n    const Stop = (await getStop(requestID)) as SimplifiedStop;\n    const Location = (await getLocation(requestID, false)) as SimplifiedLocation;\n    const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n\n    deleteDataReceivingProgress(requestID);\n    deleteDataUpdateTime(requestID);\n\n    // Collect data from Stop\n    const StopKey = `s_${StopID}`;\n    let thisStop = {} as SimplifiedStopItem;\n    if (Stop.hasOwnProperty(StopKey)) {\n      thisStop = Stop[StopKey];\n    } else {\n      return 0;\n    }\n    const thisStopLocationId = thisStop.stopLocationId;\n    const thisStopGoBack = thisStop.goBack;\n\n    // Collect data from Location\n    const thisLocationKey = `l_${thisStopLocationId}`;\n    let thisLocation = {} as SimplifiedLocationItem;\n    if (Location.hasOwnProperty(thisLocationKey)) {\n      thisLocation = Location[thisLocationKey];\n    } else {\n      return 0;\n    }\n    const thisLocationName = thisLocation.n;\n\n    // Collect data from Route\n    const RouteKey = `r_${RouteID}`;\n    let thisRoute = {} as SimplifiedRouteItem;\n    if (Route.hasOwnProperty(RouteKey)) {\n      thisRoute = Route[RouteKey];\n    } else {\n      return 0;\n    }\n\n    const thisRouteName = thisRoute.n;\n    const thisRouteDeparture = thisRoute.dep;\n    const thisRouteDestination = thisRoute.des;\n    const thisRouteDirection = [thisRouteDestination, thisRouteDeparture, ''][thisStopGoBack ? parseInt(thisStopGoBack) : 0];\n\n    // Collect data from scheduleNotificationOptions\n    const thisOption = scheduleNotificationOptions[index];\n    const timeOffset = thisOption.time_offset;\n\n    const now = new Date().getTime();\n    const scheduled_time = now + EstimateTime * 1000 + timeOffset * 60 * 1000;\n\n    const scheduling = await scheduleNotification(StopID, thisLocationName, RouteID, thisRouteName, thisRouteDirection, EstimateTime, time_formatting_mode, timeOffset, scheduled_time);\n    if (scheduling === false) {\n      return 0; // error\n    } else {\n      return 1; // successful\n    }\n  } else {\n    return 2; // no registration\n  }\n}\n","import { NotificationProvider, NotificationResponse } from '../../index';\n\nexport function getNotificationAPIURL(method: NotificationResponse['method']): string | false {\n  if (NotificationProvider === '') {\n    return false;\n  }\n  const url = new URL(NotificationProvider);\n  if (['cancel', 'register', 'schedule', 'rotate', 'reschedule'].indexOf(method) > -1) {\n    url.searchParams.set('method', method);\n    return url.toString();\n  } else {\n    return false;\n  }\n}\n","import { generateIdentifier } from '../../tools/index';\nimport { dateToRelativeTime } from '../../tools/time';\nimport { getCarInfo } from '../apis/getCarInfo/index';\nimport { getLocation } from '../apis/getLocation/index';\nimport { getRoute } from '../apis/getRoute/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime } from '../apis/loader';\nimport { lfGetItem, lfListItemKeys, lfRemoveItem, lfSetItem } from '../storage/index';\n\ninterface RecentViewRoute {\n  type: 'route';\n  time: string;\n  name: string;\n  id: number;\n}\n\ninterface RecentViewLocation {\n  type: 'location';\n  time: string;\n  name: string;\n  hash: string;\n}\n\ninterface RecentViewBus {\n  type: 'bus';\n  time: string;\n  name: string;\n  id: number;\n}\n\ninterface RecentViewEmpty {\n  type: 'empty';\n  time: string;\n  name: string;\n  id: number;\n}\n\nexport type RecentView = RecentViewRoute | RecentViewLocation | RecentViewBus | RecentViewEmpty;\n\nexport type RecentViewArray = Array<RecentView>;\n\nexport async function listRecentViews(): Promise<RecentViewArray> {\n  let result = [];\n  const now = new Date().getTime();\n  const keys = await lfListItemKeys(8);\n  for (const key of keys) {\n    const item = await lfGetItem(8, key);\n    const itemObject = JSON.parse(item) as RecentView;\n    const itemObjectTime = new Date(itemObject.time).getTime();\n    if (now - itemObjectTime <= 24 * 60 * 60 * 14 * 1000) {\n      result.push(itemObject);\n    }\n  }\n  if (result.length === 0) {\n    result.push({\n      type: 'empty',\n      time: new Date().toISOString(),\n      name: '沒有內容',\n      id: 0\n    });\n  }\n  return result;\n}\n\nexport async function discardExpiredRecentViews() {\n  const now = new Date().getTime();\n  const keys = await lfListItemKeys(8);\n  for (const key of keys) {\n    const item = await lfGetItem(8, key);\n    const itemObject = JSON.parse(item) as RecentView;\n    const itemObjectTime = new Date(itemObject.time).getTime();\n    if (now - itemObjectTime > 24 * 60 * 60 * 14 * 1000) {\n      await lfRemoveItem(8, key);\n    }\n  }\n}\n\nexport async function logRecentView(type: RecentView['type'], param: RecentViewRoute['id'] | RecentViewLocation['hash'] | RecentViewBus['id']) {\n  const requestID = generateIdentifier('r');\n  const key = `${type}_${param}`;\n  const time = new Date().toISOString();\n  switch (type) {\n    case 'route':\n      const existingRecentViewRoute = await lfGetItem(8, key);\n      if (existingRecentViewRoute) {\n        const existingRecentViewRouteObject = JSON.parse(existingRecentViewRoute);\n        existingRecentViewRouteObject.time = time;\n        await lfSetItem(8, key, JSON.stringify(existingRecentViewRouteObject));\n      } else {\n        const Route = await getRoute(requestID, true);\n        const routeKey = `r_${param}`;\n        if (Route.hasOwnProperty(routeKey)) {\n          const thisRoute = Route[routeKey];\n          const name = thisRoute.n;\n          const recentViewRouteObject: RecentViewRoute = {\n            type: 'route',\n            time: time,\n            name: name,\n            id: param\n          };\n          await lfSetItem(8, key, JSON.stringify(recentViewRouteObject));\n        }\n      }\n      break;\n    case 'location':\n      const existingRecentViewLocation = await lfGetItem(8, key);\n      if (existingRecentViewLocation) {\n        const existingRecentViewLocationObject = JSON.parse(existingRecentViewLocation);\n        existingRecentViewLocationObject.time = time;\n        await lfSetItem(8, key, JSON.stringify(existingRecentViewLocationObject));\n      } else {\n        const Location = await getLocation(requestID, true);\n        const LocationKey = `ml_${param}`;\n        if (Location.hasOwnProperty(LocationKey)) {\n          const thisLocation = Location[LocationKey];\n          const name = thisLocation.n;\n          const recentViewLocationObject: RecentViewLocation = {\n            type: 'location',\n            time: time,\n            name: name,\n            hash: param\n          };\n          await lfSetItem(8, key, JSON.stringify(recentViewLocationObject));\n        }\n      }\n      break;\n    case 'bus':\n      const existingRecentViewBus = await lfGetItem(8, key);\n      if (existingRecentViewBus) {\n        const existingRecentViewBusObject = JSON.parse(existingRecentViewBus);\n        existingRecentViewBusObject.time = time;\n        await lfSetItem(8, key, JSON.stringify(existingRecentViewBusObject));\n      } else {\n        const CarInfo = await getCarInfo(requestID, true);\n        const CarKey = `c_${param}`;\n        if (CarInfo.hasOwnProperty(CarKey)) {\n          const thisCar = CarInfo[CarKey];\n          const name = thisCar.CarNum;\n          const recentViewBusObject: RecentViewBus = {\n            type: 'bus',\n            time: time,\n            name: name,\n            id: param\n          };\n          await lfSetItem(8, key, JSON.stringify(recentViewBusObject));\n        }\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport async function getRecentView(type: RecentView['type'], param: RecentViewRoute['id'] | RecentViewLocation['hash'] | RecentViewBus['id']): Promise<RecentView | boolean> {\n  const key = `${type}_${param}`;\n  const existingRecentViewRoute = await lfGetItem(8, key);\n  if (existingRecentViewRoute) {\n    return JSON.parse(existingRecentViewRoute);\n  } else {\n    return false;\n  }\n}\n\ninterface integratedRecentViewTime {\n  absolute: string;\n  relative: string;\n}\n\nexport interface integratedRecentViewRoute {\n  type: 'route';\n  time: integratedRecentViewTime;\n  name: string;\n  id: number;\n  pid: Array<number>;\n}\n\nexport interface integratedRecentViewLocation {\n  type: 'location';\n  time: integratedRecentViewTime;\n  name: string;\n  hash: string;\n}\n\nexport interface integratedRecentViewBus {\n  type: 'bus';\n  time: integratedRecentViewTime;\n  name: string;\n  id: number;\n}\n\nexport interface integratedRecentViewEmpty {\n  type: 'empty';\n  time: integratedRecentViewTime;\n  name: string;\n  id: number;\n}\n\nexport type integratedRecentView = integratedRecentViewRoute | integratedRecentViewLocation | integratedRecentViewBus | integratedRecentViewEmpty;\n\nexport interface integratedRecentViews {\n  items: Array<integratedRecentView>;\n  itemQuantity: number;\n  dataUpdateTime: number;\n}\n\nexport async function integrateRecentViews(requestID: string): Promise<integratedRecentViews> {\n  const recentViewList = await listRecentViews();\n  const Route = await getRoute(requestID, true);\n  let items: Array<integratedRecentView> = [];\n  let itemQuantity: number = 0;\n  for (const recentView of recentViewList) {\n    const recentViewType = recentView.type;\n    const recentViewTime = new Date(recentView.time);\n    switch (recentViewType) {\n      case 'route':\n        let integratedRecentViewRoute: integratedRecentViewRoute = {};\n        integratedRecentViewRoute.type = 'route';\n        const thisRouteName = recentView.name;\n        integratedRecentViewRoute.name = thisRouteName;\n        const thisRouteID = recentView.id;\n        integratedRecentViewRoute.id = thisRouteID;\n        const thisRouteKey = `r_${thisRouteID}`;\n        const thisRoute = Route[thisRouteKey];\n        const thisRoutePathAttributeId = thisRoute.pid;\n        integratedRecentViewRoute.pid = thisRoutePathAttributeId;\n        integratedRecentViewRoute.time = {\n          absolute: recentViewTime.getTime(),\n          relative: dateToRelativeTime(recentViewTime)\n        };\n        items.push(integratedRecentViewRoute);\n        itemQuantity += 1;\n        break;\n      case 'location':\n        let integratedRecentViewLocation: integratedRecentViewLocation = {};\n        integratedRecentViewLocation.type = 'location';\n        const thisLocationHash = recentView.hash;\n        integratedRecentViewLocation.hash = thisLocationHash;\n        const thisLocationName = recentView.name;\n        integratedRecentViewLocation.name = thisLocationName;\n        integratedRecentViewLocation.time = {\n          absolute: recentViewTime.getTime(),\n          relative: dateToRelativeTime(recentViewTime)\n        };\n        items.push(integratedRecentViewLocation);\n        itemQuantity += 1;\n        break;\n      case 'bus':\n        let integratedRecentViewBus: integratedRecentViewBus = {};\n        integratedRecentViewBus.type = 'bus';\n        const thisBusID = recentView.id;\n        integratedRecentViewBus.id = thisBusID;\n        const thisBusName = recentView.name;\n        integratedRecentViewBus.name = thisBusName;\n        integratedRecentViewBus.time = {\n          absolute: recentViewTime.getTime(),\n          relative: dateToRelativeTime(recentViewTime)\n        };\n        items.push(integratedRecentViewBus);\n        itemQuantity += 1;\n        break;\n      case 'empty':\n        let integratedRecentViewEmpty: integratedRecentViewEmpty = {};\n        integratedRecentViewEmpty.type = 'empty';\n        const thisEmptyID = recentView.id;\n        integratedRecentViewEmpty.id = thisEmptyID;\n        const thisEmptyName = recentView.name;\n        integratedRecentViewEmpty.name = thisEmptyName;\n        integratedRecentViewEmpty.time = {\n          absolute: recentViewTime.getTime(),\n          relative: dateToRelativeTime(recentViewTime)\n        };\n        items.push(integratedRecentViewEmpty);\n        itemQuantity = 1;\n        break;\n      default:\n        break;\n    }\n  }\n  items.sort(function (a, b) {\n    return b.time.absolute - a.time.absolute;\n  });\n\n  const result: integratedRecentViews = {\n    items: items,\n    itemQuantity: itemQuantity,\n    dataUpdateTime: new Date().getTime()\n  };\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  return result;\n}\n","import { generateIdentifier } from '../../tools/index';\nimport { TimePeriod, WeekDayIndexArray } from '../../tools/time';\nimport { lfGetItem, lfListItemKeys, lfSetItem } from '../storage/index';\n\nexport interface PersonalSchedule {\n  name: string;\n  period: TimePeriod;\n  days: WeekDayIndexArray;\n  id: string;\n}\n\nexport type PersonalScheduleArray = Array<PersonalSchedule>;\n\nexport type MergedPersonalScheduleTimeline = { [key: string]: Array<TimePeriod> };\n\nexport async function createPersonalSchedule(name: string, startHours: number, startMinutes: number, endHours: number, endMinutes: number, days: Array<number>): Promise<boolean> {\n  const identifier = generateIdentifier('s');\n  if (startHours < 0 || startHours > 23 || startMinutes < 0 || startMinutes > 59 || endHours < 0 || endHours > 23 || endMinutes < 0 || endMinutes > 59) {\n    return false;\n  }\n  if (!Number.isInteger(startHours) || !Number.isInteger(startMinutes) || !Number.isInteger(endHours) || !Number.isInteger(endMinutes)) {\n    return false;\n  }\n  if (days.length > 7) {\n    return false;\n  }\n  for (const day of days) {\n    if (typeof day === 'number') {\n      if (day < 0 || day > 6 || !Number.isInteger(day)) {\n        return false;\n      }\n    }\n  }\n\n  const object: PersonalSchedule = {\n    name: name,\n    period: {\n      start: {\n        hours: startHours,\n        minutes: startMinutes\n      },\n      end: {\n        hours: endHours,\n        minutes: endMinutes\n      }\n    },\n    days: days,\n    id: identifier\n  };\n  await lfSetItem(7, identifier, JSON.stringify(object));\n  return true;\n}\n\nexport async function getPersonalSchedule(personalScheduleID: string): Promise<PersonalSchedule> {\n  const existingPersonalSchedule = await lfGetItem(7, personalScheduleID);\n  if (existingPersonalSchedule) {\n    const object = JSON.parse(existingPersonalSchedule);\n    return object;\n  }\n}\n\nexport async function updatePersonalSchedule(personalSchedule: PersonalSchedule): Promise<boolean> {\n  const thisPersonalSchedule = await getPersonalSchedule(personalSchedule.id);\n  if (thisPersonalSchedule) {\n    await lfSetItem(7, personalSchedule.id, JSON.stringify(personalSchedule));\n  }\n}\n\nexport async function listPersonalSchedules(): Promise<PersonalScheduleArray> {\n  let result: PersonalScheduleArray = [];\n  const keys = await lfListItemKeys(7);\n  for (const key of keys) {\n    const existingPersonalSchedule = await lfGetItem(7, key);\n    if (existingPersonalSchedule) {\n      const existingPersonalScheduleObject = JSON.parse(existingPersonalSchedule);\n      result.push(existingPersonalScheduleObject);\n    }\n  }\n\n  result.sort(function (a, b) {\n    return a.period.end.hours * 60 + a.period.end.minutes - (b.period.end.hours * 60 + b.period.end.minutes);\n  });\n\n  result.sort(function (a, b) {\n    return a.period.start.hours * 60 + a.period.start.minutes - (b.period.start.hours * 60 + b.period.start.minutes);\n  });\n\n  return result;\n}\n\nexport async function getMergedPersonalScheduleTimeline(): Promise<MergedPersonalScheduleTimeline> {\n  const personalSchedules = await listPersonalSchedules();\n\n  let result: MergedPersonalScheduleTimeline = {};\n\n  for (const personalSchedule of personalSchedules) {\n    for (const day of personalSchedule.days) {\n      const dayKey = `d_${day}`;\n      if (!result.hasOwnProperty(dayKey)) {\n        result[dayKey] = [];\n      }\n      const object = {\n        start: personalSchedule.period.start,\n        end: personalSchedule.period.end\n      };\n      result[dayKey].push(object);\n    }\n  }\n\n  for (const dayKey in result) {\n    const personalSchedulesOfThisDay = result[dayKey];\n    const personalSchedulesOfThisDayLength = personalSchedulesOfThisDay.length;\n    let mergedPersonalSchedulesOfThisDay = [];\n    for (let i = 0; i < personalSchedulesOfThisDayLength; i++) {\n      const previousPersonalScheduleOfThisDay = personalSchedulesOfThisDay[i - 1] || personalSchedulesOfThisDay[i];\n      const currentPersonalScheduleOfThisDay = personalSchedulesOfThisDay[i];\n      if (mergedPersonalSchedulesOfThisDay.length === 0) {\n        mergedPersonalSchedulesOfThisDay.push(currentPersonalScheduleOfThisDay);\n      } else {\n        // Check whether the current is after the previous and  the current is before the previous's end\n        if (currentPersonalScheduleOfThisDay.start.hours * 60 + currentPersonalScheduleOfThisDay.start.minutes >= previousPersonalScheduleOfThisDay.start.hours * 60 + previousPersonalScheduleOfThisDay.start.minutes && currentPersonalScheduleOfThisDay.start.hours * 60 + currentPersonalScheduleOfThisDay.start.minutes <= previousPersonalScheduleOfThisDay.end.hours * 60 + previousPersonalScheduleOfThisDay.end.minutes) {\n          mergedPersonalSchedulesOfThisDay[mergedPersonalSchedulesOfThisDay.length - 1].end.hours = currentPersonalScheduleOfThisDay.end.hours;\n          mergedPersonalSchedulesOfThisDay[mergedPersonalSchedulesOfThisDay.length - 1].end.minutes = currentPersonalScheduleOfThisDay.end.minutes;\n        } else {\n          mergedPersonalSchedulesOfThisDay.push(currentPersonalScheduleOfThisDay);\n        }\n      }\n    }\n    result[dayKey] = mergedPersonalSchedulesOfThisDay;\n  }\n\n  return result;\n}\n\nexport async function isInPersonalSchedule(date: Date): boolean {\n  const timeline = await getMergedPersonalScheduleTimeline();\n  const day = date.getDay();\n  const dayKey = `d_${day}`;\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n\n  if (timeline.hasOwnProperty(dayKey)) {\n    const personalSchedulesOfTheDay = timeline[dayKey];\n    for (const personalScheduleOfTheDay of personalSchedulesOfTheDay) {\n      if (hours * 60 + minutes >= personalScheduleOfTheDay.start.hours * 60 + personalScheduleOfTheDay.start.minutes && hours * 60 + minutes <= personalScheduleOfTheDay.end.hours * 60 + personalScheduleOfTheDay.end.minutes) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import { sha256 } from '../../../../tools/index';\nimport { generateTOTPToken } from '../../../../tools/totp';\nimport { NotificationClientID, NotificationSecret, NotificationResponse } from '../../index';\n\nexport function getNotificationRequestBody(method: NotificationResponse['method'], parameters: Array<any>): object | false {\n  switch (method) {\n    case 'cancel':\n      if (NotificationClientID === '' || NotificationSecret === '' || !(parameters.length === 1)) {\n        return false;\n      } else {\n        return {\n          client_id: NotificationClientID,\n          totp_token: generateTOTPToken(NotificationSecret),\n          schedule_id: parameters[0]\n        };\n      }\n      break;\n    case 'register':\n      if (!(parameters.length === 1)) {\n        return false;\n      } else {\n        const currentDate = new Date();\n        currentDate.setMilliseconds(0);\n        currentDate.setSeconds(0);\n        return {\n          hash: sha256(`${parameters[0]}${currentDate.getTime()}`)\n        };\n      }\n      break;\n    case 'schedule':\n      if (NotificationClientID === '' || NotificationSecret === '' || !(parameters.length === 9)) {\n        return false;\n      } else {\n        return {\n          client_id: NotificationClientID,\n          totp_token: generateTOTPToken(NotificationSecret),\n          stop_id: parameters[0],\n          location_name: parameters[1],\n          route_id: parameters[2],\n          route_name: parameters[3],\n          direction: parameters[4],\n          estimate_time: parameters[5],\n          time_formatting_mode: parameters[6],\n          time_offset: parameters[7],\n          scheduled_time: parameters[8]\n        };\n      }\n      break;\n    case 'rotate':\n      if (NotificationClientID === '' || NotificationSecret === '' || !(parameters.length === 0)) {\n        return false;\n      } else {\n        return {\n          client_id: NotificationClientID,\n          totp_token: generateTOTPToken(NotificationSecret)\n        };\n      }\n      break;\n    case 'reschedule':\n      if (NotificationClientID === '' || NotificationSecret === '' || !(parameters.length === 3)) {\n        return false;\n      } else {\n        return {\n          client_id: NotificationClientID,\n          totp_token: generateTOTPToken(NotificationSecret),\n          schedule_id: parameters[0],\n          estimate_time: parameters[1],\n          scheduled_time: parameters[2]\n        };\n      }\n      break;\n    default:\n      return false;\n      break;\n  }\n}\n"],"names":["cancelNotification","_x","_cancelNotification","apply","arguments","schedule_id","NotificationClientID","NotificationSecret","undefined","url","getNotificationAPIURL","requestBody","getNotificationRequestBody","response","makeNotificationRequest","code","method","removeNotificationSchedule","_x2","_x3","_makeNotificationRequest","body","requestOptions","headers","JSON","stringify","fetch","ok","errorText","text","console","error","status","statusText","json","parse","jsonError","Error","registerNotificationClient","_registerNotificationClient","registrationKey","setNotificationClientID","client_id","setNotificationSecret","secret","saveNotificationClient","_rotateNotificationSecret","_scheduleNotification","stop_id","location_name","route_id","route_name","direction","estimate_time","time_formatting_mode","time_offset","scheduled_time","processed_schedule_time","Date","_typeof","toISOString","Math","random","rotateNotificationSecret","saveNotificationSchedule","getTime","NotificationProvider","NotifcationSchedules","NotifcationSchedulesIndex","NotifcationSchedulesStopIDIndex","_saveNotificationClient","_asyncToGenerator","currentClient","provider","lfSetItem","loadNotificationClient","_loadNotificationClient","existingClient","lfGetItem","existingClientObject","getNotificationClientStatus","setNotificationProvider","isValidURL","URL","protocol","hostname","getNotificationProvider","String","initializeNotificationSchedules","_initializeNotificationSchedules","_step4","index","_iterator4","_createForOfIteratorHelper","lfListItemKeys","s","n","done","key","value","thisScheduleJSON","thisSchedule","thisScheduleID","thisScheduleStopKey","push","hasOwnProperty","err","e","f","_x4","_x5","_x6","_x7","_x8","_x9","_x10","_saveNotificationSchedule","thisNotificationSchedule","thisNotificationScheduleStopKey","thisNotificationScheduleIndex","length","_x14","_removeNotificationSchedule","existingScheduleIndex","splice","indexOf","lfRemoveItem","stopHasNotifcationSchedules","StopID","now","thisStopKey","_step3","_iterator3","discardExpiredNotificationSchedules","_discardExpiredNotificationSchedules","existingSchedule","integrateNotifcationSchedules","_x15","_integrateNotifcationSchedules","requestID","_step5","Route","getRoute","notificationSchedules","_step","result","_iterator","listNotifcationSchedules","items","_iterator5","item","integratedItem","thisItemName","name","thisItemStopID","thisItemEstimateTime","thisItemScheduleID","thisItemScheduledTime","thisItemScheduledTimeDateInstance","thisItemDate","getDate","thisItemHours","getHours","thisItemMinutes","getMinutes","date","padStart","hours","minutes","route","thisRouteName","thisRouteID","id","thisRouteDirection","thisNotificationScheduleRouteKey","thisNotificationScheduleRoutePathAttributeId","pid","pathAttributeId","sort","a","b","items2","itemQuantity","groups","_i","_items","groupKey","is_first","dataUpdateTime","max","getDataUpdateTime","deleteDataUpdateTime","deleteDataReceivingProgress","scheduleNotificationOptions","icon","scheduleNotificationForStop","_x16","_x17","_x18","_x19","_scheduleNotificationForStop","RouteID","EstimateTime","getSettingOptionValue","generateIdentifier","Stop","getStop","Location","getLocation","StopKey","thisStop","thisStopLocationId","stopLocationId","thisStopGoBack","goBack","thisLocationKey","thisLocationName","RouteKey","thisRoute","thisRouteDeparture","dep","des","parseInt","timeOffset","scheduling","scheduleNotification","searchParams","set","toString","listRecentViews","_listRecentViews","itemObject","time","type","discardExpiredRecentViews","_discardExpiredRecentViews","_step2","_iterator2","logRecentView","_logRecentView","param","existingRecentViewRoute","existingRecentViewRouteObject","routeKey","recentViewRouteObject","existingRecentViewLocation","existingRecentViewLocationObject","LocationKey","recentViewLocationObject","hash","existingRecentViewBus","existingRecentViewBusObject","CarInfo","getCarInfo","CarKey","recentViewBusObject","CarNum","getRecentView","_getRecentView","integrateRecentViews","_integrateRecentViews","recentViewList","recentView","recentViewType","recentViewTime","integratedRecentViewRoute","thisRoutePathAttributeId","absolute","relative","dateToRelativeTime","integratedRecentViewLocation","thisLocationHash","integratedRecentViewBus","thisBusID","thisBusName","integratedRecentViewEmpty","thisEmptyID","thisEmptyName","createPersonalSchedule","_createPersonalSchedule","startHours","startMinutes","endHours","endMinutes","days","identifier","Number","isInteger","day","object","period","start","end","getPersonalSchedule","_getPersonalSchedule","personalScheduleID","existingPersonalSchedule","updatePersonalSchedule","_updatePersonalSchedule","personalSchedule","listPersonalSchedules","_listPersonalSchedules","existingPersonalScheduleObject","_getMergedPersonalScheduleTimeline","dayKey","personalSchedulesOfThisDay","personalSchedulesOfThisDayLength","mergedPersonalSchedulesOfThisDay","i","previousPersonalScheduleOfThisDay","currentPersonalScheduleOfThisDay","isInPersonalSchedule","_isInPersonalSchedule","timeline","getMergedPersonalScheduleTimeline","getDay","personalScheduleOfTheDay","parameters","totp_token","generateTOTPToken","currentDate","setMilliseconds","setSeconds","sha256"],"sourceRoot":""}