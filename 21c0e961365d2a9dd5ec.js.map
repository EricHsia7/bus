{"version":3,"file":"21c0e961365d2a9dd5ec.js","mappings":"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","sources":["webpack://bus/./src/data/search/searchMaterialSymbols.ts","webpack://bus/./src/data/search/index.ts"],"sourcesContent":["import { generateIdentifier } from '../../tools/index';\nimport { getIntersection } from '../../tools/array';\nimport { getMaterialSymbols } from '../apis/getMaterialSymbols/index';\nimport { getUnicodes } from '../../tools/text';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime } from '../apis/loader';\n\nlet searchIndex = {};\nlet searchList = [];\nlet readyToSearch = false;\n\nexport async function prepareForMaterialSymbolsSearch() {\n  const requestID: string = generateIdentifier('r');\n  const materialSymbols = await getMaterialSymbols(requestID);\n\n  let index = {};\n  // let list = materialSymbols;\n\n  let i = 0;\n  for (const materialSymbol of materialSymbols) {\n    const unicodes = getUnicodes(materialSymbol, true);\n    for (const unicode of unicodes) {\n      const key = `u_${unicode}`;\n      if (!index.hasOwnProperty(key)) {\n        index[key] = [];\n      }\n      index[key].push(i);\n    }\n    i += 1;\n  }\n  searchList = materialSymbols;\n  searchIndex = index;\n  readyToSearch = true;\n  deleteDataReceivingProgress(requestID)\n  deleteDataUpdateTime(requestID)\n}\n\nfunction calculateMaterialSymbolsSearchResultScore(queryUnicodes: Array<number>, resultUnicodes: Array<number>): number {\n  // 1. The exact matches are highly prioritized here\n  // 2. The penalty mechanism is for missing matches\n  // 3. It might \"outlet\" partially relevant results\n  let score = 0;\n  let i = 0;\n  for (const unicode of resultUnicodes) {\n    const indexOfUnicode = queryUnicodes.indexOf(unicode, i);\n    if (indexOfUnicode > -1) {\n      score += indexOfUnicode;\n    } else {\n      score -= i;\n    }\n    i += 1;\n  }\n  if (queryUnicodes === resultUnicodes) {\n    score = Math.abs(score) * 10;\n  }\n  return score;\n}\n\nexport function searchForMaterialSymbols(query: string, limit: number): Array<string> {\n  if (!readyToSearch) {\n    return [];\n  }\n  const caseInsensitiveQuery = String(query).toLowerCase();\n  const queryUnicodes = getUnicodes(caseInsensitiveQuery, true);\n  const asIsQueryUnicodes = getUnicodes(caseInsensitiveQuery, false);\n  let unicodeGroups = [];\n  for (const unicode of queryUnicodes) {\n    const key = `u_${unicode}`;\n    if (searchIndex.hasOwnProperty(key)) {\n      unicodeGroups.push(searchIndex[key]);\n    }\n  }\n  unicodeGroups.sort(function (a, b) {\n    return a.length - b.length;\n  });\n  const unicodeGroupsLength1 = unicodeGroups.length - 1;\n  let intersection = [];\n  if (unicodeGroupsLength1 === 0) {\n    intersection = unicodeGroups[0];\n  }\n  if (unicodeGroupsLength1 > 0) {\n    for (let i = 0; i < unicodeGroupsLength1; i++) {\n      const currentGroup = unicodeGroups[i];\n      const nextGroup = unicodeGroups[i + 1];\n      if (i === 0) {\n        intersection = getIntersection(currentGroup, nextGroup);\n      } else {\n        intersection = getIntersection(intersection, nextGroup);\n      }\n    }\n  }\n  let result = [];\n  let quantity = 0;\n  for (const j of intersection) {\n    let thisItem = searchList[j];\n    if (quantity < limit) {\n      const score = calculateMaterialSymbolsSearchResultScore(asIsQueryUnicodes, getUnicodes(thisItem, false));\n      result.push({\n        item: thisItem,\n        score: score\n      });\n    } else {\n      break;\n    }\n  }\n  result.sort(function (a, b) {\n    return b.score - a.score;\n  });\n  return result;\n}\n","import { getRoute, SimplifiedRoute, SimplifiedRouteItem } from '../apis/getRoute/index';\nimport { getLocation, MergedLocation } from '../apis/getLocation/index';\nimport { generateIdentifier } from '../../tools/index';\nimport { getIntersection } from '../../tools/array';\nimport { getUnicodes } from '../../tools/text';\nimport { getCarInfo, SimplifiedCarInfo } from '../apis/getCarInfo/index';\nimport { deleteDataReceivingProgress, deleteDataUpdateTime } from '../apis/loader';\n\nexport async function searchRouteByName(query: string): Promise<Array<SimplifiedRouteItem>> {\n  const requestID = generateIdentifier('r');\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  let result: Array<SimplifiedRouteItem> = [];\n  for (const key in Route) {\n    const thisRoute = Route[key];\n    if (String(thisRoute.n).indexOf(query) > -1) {\n      result.push(thisRoute);\n    }\n  }\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  return result;\n}\n\nexport async function searchRouteByRouteID(RouteID: number): Promise<SimplifiedRouteItem | false> {\n  const requestID = generateIdentifier('r');\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  let found: boolean = false;\n  let result = {} as SimplifiedRouteItem;\n  const routeKey = `r_${RouteID}`;\n  if (Route.hasOwnProperty(routeKey)) {\n    result = Route[routeKey];\n    found = true;\n  }\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  return found ? result : false;\n}\n\nexport async function searchRouteByPathAttributeId(PathAttributeId: number): Promise<Array<SimplifiedRouteItem>> {\n  const requestID = generateIdentifier('r');\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  let result: Array<SimplifiedRouteItem> = [];\n  for (const key in Route) {\n    const thisRoute = Route[key];\n    if (String(thisRoute.pid).indexOf(PathAttributeId) > -1) {\n      result.push(thisRoute);\n    }\n  }\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  return result;\n}\n\ninterface SearchItem {\n  id: string | number | Array<number>;\n  pid: Array<number>;\n  dep: string;\n  des: string;\n  n: string;\n  hash: string;\n  lo: Array<number>;\n  la: Array<number>;\n  r: Array<Array<number>>;\n  s: Array<Array<number>>;\n  type: 0 | 1 | 2; // 0: route, 1: location, 2: car info\n}\n\nexport interface SearchResult {\n  item: SearchItem;\n  score: number;\n}\n\ntype SearchIndex = { [unicodeKey: string]: number };\n\nlet searchIndex: SearchIndex = {};\nlet searchList: Array<SearchItem> = [];\nlet readyToSearch: boolean = false;\n\nexport async function prepareForSearch() {\n  const requestID = generateIdentifier('r');\n  const Route = (await getRoute(requestID, true)) as SimplifiedRoute;\n  const mergedLocation = (await getLocation(requestID, true)) as MergedLocation;\n  const CarInfo = (await getCarInfo(requestID, true)) as SimplifiedCarInfo;\n  let index: SearchIndex = {};\n  let list: Array<SearchItem> = [];\n  let i: number = 0;\n  for (const key in Route) {\n    const thisRoute = Route[key];\n    const thisItem = {\n      id: thisRoute.id,\n      pid: thisRoute.pid,\n      dep: thisRoute.dep,\n      des: thisRoute.des,\n      n: thisRoute.n,\n      hash: '',\n      lo: '',\n      la: '',\n      r: '',\n      s: '',\n      type: 0\n    };\n    list.push(thisItem);\n    const unicodes = getUnicodes(`${thisItem.n}${thisItem.dep}${thisItem.des}`, true);\n    for (const unicode of unicodes) {\n      const key = `u_${unicode}`;\n      if (!index.hasOwnProperty(key)) {\n        index[key] = [];\n      }\n      index[key].push(i);\n    }\n    i += 1;\n  }\n  for (const key in mergedLocation) {\n    const thisLocation = mergedLocation[key];\n    const thisItem = {\n      id: thisLocation.id,\n      n: thisLocation.n,\n      lo: thisLocation.lo,\n      la: thisLocation.la,\n      r: thisLocation.r,\n      s: thisLocation.s,\n      hash: thisLocation.hash,\n      dep: '',\n      des: '',\n      pid: [],\n      type: 1\n    };\n    list.push(thisItem);\n    const unicodes = getUnicodes(thisItem.n, true);\n    for (const unicode of unicodes) {\n      const key = `u_${unicode}`;\n      if (!index.hasOwnProperty(key)) {\n        index[key] = [];\n      }\n      index[key].push(i);\n    }\n    i += 1;\n  }\n  for (const key in CarInfo) {\n    const thisCarInfo = CarInfo[key];\n    const thisItem = {\n      id: thisCarInfo.BusId,\n      pid: [],\n      dep: '',\n      des: '',\n      n: thisCarInfo.CarNum,\n      hash: '',\n      lo: '',\n      la: '',\n      r: '',\n      s: '',\n      type: 2\n    };\n    list.push(thisItem);\n    const unicodes = getUnicodes(thisItem.n, true);\n    for (const unicode of unicodes) {\n      const key = `u_${unicode}`;\n      if (!index.hasOwnProperty(key)) {\n        index[key] = [];\n      }\n      index[key].push(i);\n    }\n    i += 1;\n  }\n  searchIndex = index;\n  searchList = list;\n  readyToSearch = true;\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n}\n\nfunction calculateSearchResultScore(queryUnicodes: Array<number>, resultUnicodes: Array<number>): number {\n  // 1. Index data by character for well-differentiated entries\n  // 2. The results are ranked by positional difference for relevance\n  // 3. Some entries are prioritized for exact matches\n  let score = 0;\n  let i = 0;\n  for (const unicode of resultUnicodes) {\n    const indexOfUnicode = queryUnicodes.indexOf(unicode, i);\n    score += indexOfUnicode - i;\n    i += 1;\n  }\n  if (queryUnicodes === resultUnicodes) {\n    score = Math.abs(score) * 10;\n  }\n  return score;\n}\n\nexport function searchFor(query: string, limit: number): Array<SearchResult> {\n  if (!readyToSearch) {\n    return [];\n  }\n\n  const queryUnicodes = getUnicodes(query, true);\n  const asIsQueryUnicodes = getUnicodes(query, false);\n  let unicodeGroups = [];\n\n  for (const unicode of queryUnicodes) {\n    const key = `u_${unicode}`;\n    if (searchIndex.hasOwnProperty(key)) {\n      unicodeGroups.push(searchIndex[key]);\n    }\n  }\n\n  unicodeGroups.sort(function (a, b) {\n    return a.length - b.length;\n  });\n\n  const unicodeGroupsLength1 = unicodeGroups.length - 1;\n  let intersection = [];\n\n  if (unicodeGroupsLength1 === 0) {\n    intersection = unicodeGroups[0];\n  }\n\n  if (unicodeGroupsLength1 > 0) {\n    for (let i = 0; i < unicodeGroupsLength1; i++) {\n      const currentGroup = unicodeGroups[i];\n      const nextGroup = unicodeGroups[i + 1];\n      if (i === 0) {\n        intersection = getIntersection(currentGroup, nextGroup);\n      } else {\n        intersection = getIntersection(intersection, nextGroup);\n      }\n    }\n  }\n\n  let result: Array<SearchResult> = [];\n  let quantity = 0;\n\n  // Prioritize exact matches for buses\n  const exactMatches = searchList.filter((item) => item.n === query && item.type === 2);\n  const exactMatchIds = new Set(); // To track exact matches to avoid duplicates\n  for (const item of exactMatches) {\n    result.push({\n      item: item,\n      score: Infinity // Highest possible score for exact matches\n    });\n    exactMatchIds.add(item.id);\n    quantity += 1;\n    if (quantity >= limit) {\n      break;\n    }\n  }\n\n  if (quantity < limit) {\n    for (const j of intersection) {\n      let thisItem = searchList[j];\n      if (!exactMatchIds.has(thisItem.id)) {\n        // Check if the item is not already an exact match\n        const score = calculateSearchResultScore(asIsQueryUnicodes, getUnicodes(thisItem.n, false));\n        if (quantity < limit) {\n          result.push({\n            item: thisItem,\n            score: score\n          });\n        } else {\n          break;\n        }\n        quantity += 1;\n      }\n    }\n  }\n\n  result.sort(function (a, b) {\n    return b.score - a.score;\n  });\n\n  return result;\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_createForOfIteratorHelper","Array","isArray","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_n","F","asyncGeneratorStep","searchIndex","searchList","readyToSearch","prepareForMaterialSymbolsSearch","_prepareForMaterialSymbolsSearch","apply","arguments","_callee","requestID","materialSymbols","index","_iterator4","_step4","materialSymbol","unicodes","_iterator5","_step5","unicode","key","_context","generateIdentifier","getMaterialSymbols","getUnicodes","concat","err","deleteDataReceivingProgress","deleteDataUpdateTime","_next","_throw","calculateMaterialSymbolsSearchResultScore","queryUnicodes","resultUnicodes","_step","score","_iterator","indexOfUnicode","indexOf","Math","abs","searchForMaterialSymbols","query","limit","_step2","caseInsensitiveQuery","String","toLowerCase","asIsQueryUnicodes","unicodeGroups","_iterator2","sort","b","unicodeGroupsLength1","intersection","currentGroup","nextGroup","getIntersection","_step3","result","_iterator3","j","thisItem","item","_asyncToGenerator","searchRouteByName","_x","_searchRouteByName","Route","thisRoute","getRoute","searchRouteByRouteID","_x2","_searchRouteByRouteID","_callee2","RouteID","found","routeKey","_context2","searchRouteByPathAttributeId","_x3","_searchRouteByPathAttributeId","_callee3","PathAttributeId","_context3","pid","prepareForSearch","_prepareForSearch","_callee4","mergedLocation","CarInfo","list","_key","_key2","thisLocation","_thisItem","_unicodes","_iterator6","_step6","_unicode","_key3","_key4","thisCarInfo","_thisItem2","_unicodes2","_iterator7","_step7","_unicode2","_key5","_context4","getLocation","getCarInfo","id","dep","des","hash","lo","la","BusId","CarNum","calculateSearchResultScore","searchFor","quantity","exactMatches","filter","exactMatchIds","Set","Infinity","add","has"],"sourceRoot":""}