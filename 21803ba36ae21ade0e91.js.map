{"version":3,"file":"21803ba36ae21ade0e91.js","mappings":"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","sources":["webpack://bus/./src/data/apis/getEstimateTime/index.ts","webpack://bus/./src/data/apis/getAPIURL/index.ts","webpack://bus/./src/data/apis/getBusData/index.ts","webpack://bus/./src/data/apis/getBusEvent/index.ts","webpack://bus/./src/data/apis/getLocation/index.ts","webpack://bus/./src/data/apis/getCarInfo/index.ts","webpack://bus/./src/data/apis/getMaterialSymbols/index.ts"],"sourcesContent":["import { getAPIURL } from '../getAPIURL/index';\nimport { fetchData, setDataUpdateTime } from '../loader';\n\nexport interface EstimateTimeItem {\n  RouteID: number;\n  StopID: number;\n  EstimateTime: string | '-1' | '-2' | '-3' | '-4'; // x (>=0): remaining time to wait measured in seconds, -1: no departed bus, -2: skip stopping (due to traffic moderation), -3: the next bus will not come until tomorrow, -4: not in operation\n  GoBack: '0' | '1' | '2'; // 0: go, 1: back, 2: unknown\n}\n\nexport type EstimateTime = Array<EstimateTimeItem>;\n\nexport async function getEstimateTime(requestID: string): Promise<EstimateTime> {\n  const apis = [\n    [0, 4],\n    [1, 4]\n  ].map((e) => ({ url: getAPIURL(e[0], e[1]), e: e }));\n  let result = [];\n  for (const api of apis) {\n    const data = await fetchData(api.url, requestID, `getEstimateTime_${api.e[0]}`, 'json');\n    result = result.concat(data.BusInfo);\n    setDataUpdateTime(requestID, data.EssentialInfo.UpdateTime);\n  }\n  return result;\n}\n","import { getNoCacheParameter } from '../../../tools/index';\nimport { getSettingOptionValue } from '../../settings/index';\n\n/**\n * Get API URL with no cache parameter (query string).\n * @param city - 0: blobbus -> Taipei City, 2: ntpcbus -> New Taipei City\n * @param api - 0: BusData, 1: BusEvent, 2: CarInfo, 3: CarUnusual, 4: EstimateTime, 5: IStop, 6: IStopPath, 7: OrgPathAttribute, 8: PathDetail, 9: Provider, 10: Route, 11: Stop, 12: SemiTimeTable, 13: StopLocation, 14: TimeTable, 15: BusRouteFareList\n * @param alternative - Whether to use alternative resources\n * @param interval - The interval for no cache parameter\n * @returns The direct link to a gzip file.\n */\n\nexport function getAPIURL(city: number, api: number, alternative: boolean = false, interval: number = 5000): string {\n  const cities = ['blobbus', 'ntpcbus'];\n  // blobbus → Taipei City\n  // ntpcbus → New Taipei City\n  const buckets = ['BusData', 'BusEvent', 'CarInfo', 'CarUnusual', 'EstimateTime', 'IStop', 'IStopPath', 'OrgPathAttribute', 'PathDetail', 'Provider', 'Route', 'Stop', 'SemiTimeTable', 'StopLocation', 'TimeTable', 'BusRouteFareList'];\n  const proxy = getSettingOptionValue('proxy');\n  if (alternative) {\n    return `http://erichsia7.github.io/bus-alternative-static-apis/${cities[city]}/Get${buckets[api]}.gz?_=${getNoCacheParameter(interval)}`;\n  } else {\n    if (proxy) {\n      return `https://bus-proxy.erichsia7.workers.dev?url=https://tcgbusfs.blob.core.windows.net/${cities[city]}/Get${buckets[api]}.gz&_=${getNoCacheParameter(interval)}`;\n    } else {\n      return `https://tcgbusfs.blob.core.windows.net/${cities[city]}/Get${buckets[api]}.gz?_=${getNoCacheParameter(interval)}`;\n    }\n  }\n}\n\nexport function getMaterialSymbolsAPIURL(interval: number = 5000): string {\n  return `https://erichsia7.github.io/material-symbols-list/index.gz?_=${getNoCacheParameter(interval)}`;\n}\n","import { getAPIURL } from '../getAPIURL/index';\nimport { fetchData, setDataUpdateTime } from '../loader';\n\nexport interface BusDataItem {\n  ProviderID: number;\n  StationID: number;\n  BusID: string; // vehicle registration number\n  CarType: '0' | '1' | '2' | '3'; // 0: normal bus (一般), 1: low-floor bus (低底盤), 2: disability-friendly bus (大復康巴士), 3: dog-friendly bus (狗狗友善專車)\n  CarID: number;\n  DutyStatus: '0' | '1' | '2'; // 0: normal, 1: start, 2: end\n  BusStatus: '0' | '1' | '2' | '3' | '4' | '5' | '99'; // 0: 正常, 1: 車禍, 2: 故障, 3: 塞車, 4: 緊急求援, 5: 加油, 99: 非營運狀態\n  RouteID: string; // number in string\n  GoBack: '0' | '1' | '2'; // 0: go, 1: back, 2: unknown\n  Longitude: string; // number in string\n  Latitude: string; // number in string\n  Speed: string; // number in string\n  Azimuth: string; // number in string\n  DataTime: string; // timestamp\n}\n\nexport type BusData = Array<BusDataItem>;\n\nexport async function getBusData(requestID: string): Promise<BusData> {\n  const apis = [\n    [0, 0],\n    [1, 0]\n  ].map((e) => ({ url: getAPIURL(e[0], e[1]), e: e }));\n  let result = [];\n  for (const api of apis) {\n    const data = await fetchData(api.url, requestID, `getBusData_${api.e[0]}`, 'json');\n    result = result.concat(data.BusInfo);\n    setDataUpdateTime(requestID, data.EssentialInfo.UpdateTime);\n  }\n  return result;\n}\n","import { getAPIURL } from '../getAPIURL/index';\nimport { fetchData, setDataUpdateTime } from '../loader';\n\nexport interface BusEventItem {\n  StationID: number;\n  CarType: '0' | '1' | '2' | '3'; // 0: normal bus (一般), 1: low-floor bus (低底盤), 2: disability-friendly bus (大復康巴士), 3: dog-friendly bus (狗狗友善專車)\n  BusID: string; // vehicle registration number\n  ProviderID: number;\n  CarID: number;\n  DutyStatus: '0' | '1' | '2'; // 0: normal, 1: start, 2: end\n  BusStatus: '0' | '1' | '2' | '3' | '4' | '5' | '99'; // 0: 正常, 1: 車禍, 2: 故障, 3: 塞車, 4: 緊急求援, 5: 加油, 99: 非營運狀態\n  RouteID: string; // PathAttributeId (number in string)\n  GoBack: '0' | '1' | '2'; // 0: go, 1: back, 2: unknown\n  StopID: string; // number in string\n  CarOnStop: '0' | '1'; // 0: leaving/left, 1: coming/came\n  DataTime: string; // timestamp\n}\n\nexport type BusEvent = Array<BusEventItem>;\n\nexport async function getBusEvent(requestID: string): Promise<BusEvent> {\n  const apis = [\n    [0, 1],\n    [1, 1]\n  ].map((e) => ({ url: getAPIURL(e[0], e[1]), e: e }));\n  let result = [];\n  for (const api of apis) {\n    const data = await fetchData(api.url, requestID, `getBusEvent_${api.e[0]}`, 'json');\n    result = result.concat(data.BusInfo);\n    setDataUpdateTime(requestID, data.EssentialInfo.UpdateTime);\n  }\n  return result;\n}\n","import { ParsedAddress } from '../../../tools/address';\nimport { lfGetItem, lfSetItem } from '../../storage/index';\nimport { getAPIURL } from '../getAPIURL/index';\nimport { fetchData, setDataReceivingProgress, setDataUpdateTime } from '../loader';\n\nexport interface LocationItem {\n  Id: number; // StopID\n  routeId: number; // RouteID\n  nameZh: string; // name in Chinese\n  nameEn: string; // name in English\n  seqNo: number; // sequence on the route\n  pgp: string; // pgp (-1: get off, 0: get on and off, 1: get on)\n  goBack: '0' | '1' | '2'; // GoBack (0: go, 1: back, 2: unknown)\n  longitude: string; // number in string\n  latitude: string; // number in string\n  address: string;\n  stopLocationId: number; // LocationID\n  showLon: string; // number in string\n  showLat: string; // number in string\n  vector: string;\n}\n\nexport type Location = Array<LocationItem>;\n\nexport interface SimplifiedLocationItem {\n  n: string; // name\n  lo: number; // longitude\n  la: number; // latitude\n  g: string; // geohash\n  r: Array<number>; // RouteIDs\n  s: Array<number>; // StopIDs\n  v: Array<[number, number]>; // a set of vectors\n  a: Array<string>; // addresses\n  id: number; // stopLocationId\n}\n\nexport type SimplifiedLocation = { [l_id: string]: SimplifiedLocationItem };\n\nexport interface MergedLocationItem {\n  n: string; // name\n  lo: Array<number>; // longitude\n  la: Array<number>; // latitude\n  g: Array<string>; // geohash\n  r: Array<Array<number>>; // RouteIDs\n  s: Array<Array<number>>; // StopIDs\n  v: Array<Array<[number, number]>>; // sets of vectors\n  a: Array<ParsedAddress>; // addresses\n  id: Array<number>; // stopLocationIds\n  hash: string;\n}\n\nexport type MergedLocation = { [ml_hash: string]: MergedLocationItem };\n\nexport interface IndexedLocationItem {\n  lo: number; // longitude\n  la: number; // latitude\n  hash: string;\n}\n\nexport type IndexedLocation = { [geohash: string]: Array<IndexedLocationItem> };\n\nconst LocationAPIVariableCache = {\n  simplified: {\n    available: false,\n    data: {}\n  },\n  merged: {\n    available: false,\n    data: {}\n  },\n  indexed: {\n    available: false,\n    data: {}\n  }\n};\n\nasync function simplifyLocation(Location: Location): Promise<SimplifiedLocation> {\n  const worker = new Worker(new URL('./simplifyLocation-worker.ts', import.meta.url));\n\n  // Wrap worker communication in a promise\n  const result = await new Promise((resolve, reject) => {\n    worker.onmessage = function (e) {\n      resolve(e.data); // Resolve the promise with the worker's result\n      worker.terminate(); // Terminate the worker when done\n    };\n\n    worker.onerror = function (e) {\n      reject(e.message); // Reject the promise on error\n      worker.terminate(); // Terminate the worker if an error occurs\n    };\n\n    worker.postMessage(Location); // Send data to the worker\n  });\n\n  return result;\n}\n\nasync function mergeLocationByName(object: SimplifiedLocation): Promise<MergedLocation> {\n  const worker = new Worker(new URL('./mergeLocationByName-worker.ts', import.meta.url));\n\n  // Wrap worker communication in a promise\n  const result = await new Promise((resolve, reject) => {\n    worker.onmessage = function (e) {\n      resolve(e.data); // Resolve the promise with the worker's result\n      worker.terminate(); // Terminate the worker when done\n    };\n\n    worker.onerror = function (e) {\n      reject(e.message); // Reject the promise on error\n      worker.terminate(); // Terminate the worker if an error occurs\n    };\n\n    worker.postMessage(object); // Send data to the worker\n  });\n\n  return result;\n}\n\nasync function indexLocationByGeohash(object: MergedLocation): Promise<IndexedLocation> {\n  const worker = new Worker(new URL('./indexLocationByGeohash-worker.ts', import.meta.url));\n\n  // Wrap worker communication in a promise\n  const result = await new Promise((resolve, reject) => {\n    worker.onmessage = function (e) {\n      resolve(e.data); // Resolve the promise with the worker's result\n      worker.terminate(); // Terminate the worker when done\n    };\n\n    worker.onerror = function (e) {\n      reject(e.message); // Reject the promise on error\n      worker.terminate(); // Terminate the worker if an error occurs\n    };\n\n    worker.postMessage(object); // Send data to the worker\n  });\n\n  return result;\n}\n\n/**\n * getLocation\n * @param requestID\n * @param type 0: simplified, 1: merged, 2: indexed\n * @returns SimplifiedLocation, MergedLocation, or IndexedLocation\n */\n\nexport async function getLocation(requestID: string, type: 0 | 1 | 2): Promise<SimplifiedLocation | MergedLocation | IndexedLocation> {\n  async function getData() {\n    const apis = [\n      [0, 11],\n      [1, 11]\n    ].map((e) => ({ url: getAPIURL(e[0], e[1]), e: e }));\n    let result = [];\n    for (const api of apis) {\n      const data = await fetchData(api.url, requestID, `getLocation_${api.e[0]}`, 'json');\n      result = result.concat(data.BusInfo);\n      setDataUpdateTime(requestID, data.EssentialInfo.UpdateTime);\n    }\n    return result;\n  }\n\n  const cacheTimeToLive: number = 60 * 60 * 24 * 30 * 1000;\n  const cache_type: string = ['simplified', 'merged', 'indexed'][type];\n  const cacheKey: string = `bus_${cache_type}_location_cache`;\n  const cacheTimestamp = await lfGetItem(0, `${cacheKey}_timestamp`);\n  if (cacheTimestamp === null) {\n    let final_result;\n    switch (type) {\n      case 0: {\n        const result = await getData();\n        const simplified_result = await simplifyLocation(result);\n        final_result = simplified_result;\n        break;\n      }\n      case 1: {\n        const simplified_result = await getLocation(requestID, 0);\n        const merged_result = await mergeLocationByName(simplified_result);\n        final_result = merged_result;\n        break;\n      }\n      case 2: {\n        const merged_result = await getLocation(requestID, 1);\n        const indexed_result = await indexLocationByGeohash(merged_result);\n        final_result = indexed_result;\n        break;\n      }\n      default:\n        break;\n    }\n\n    await lfSetItem(0, `${cacheKey}_timestamp`, new Date().getTime());\n    await lfSetItem(0, cacheKey, JSON.stringify(final_result));\n    if (!LocationAPIVariableCache[cache_type].available) {\n      LocationAPIVariableCache[cache_type].available = true;\n      LocationAPIVariableCache[cache_type].data = final_result;\n    }\n    return final_result;\n  } else {\n    if (new Date().getTime() - parseInt(cacheTimestamp) > cacheTimeToLive) {\n      let final_result;\n      switch (type) {\n        case 0: {\n          const result = await getData();\n          const simplified_result = await simplifyLocation(result);\n          final_result = simplified_result;\n          break;\n        }\n        case 1: {\n          const simplified_result = await getLocation(requestID, 0);\n          const merged_result = await mergeLocationByName(simplified_result);\n          final_result = merged_result;\n          break;\n        }\n        case 2: {\n          const merged_result = await getLocation(requestID, 1);\n          const indexed_result = await indexLocationByGeohash(merged_result);\n          final_result = indexed_result;\n          break;\n        }\n        default:\n          break;\n      }\n\n      await lfSetItem(0, `${cacheKey}_timestamp`, new Date().getTime());\n      await lfSetItem(0, cacheKey, JSON.stringify(final_result));\n      if (!LocationAPIVariableCache[cache_type].available) {\n        LocationAPIVariableCache[cache_type].available = true;\n        LocationAPIVariableCache[cache_type].data = final_result;\n      }\n      return final_result;\n    } else {\n      if (!LocationAPIVariableCache[cache_type].available) {\n        const cache = await lfGetItem(0, cacheKey);\n        LocationAPIVariableCache[cache_type].available = true;\n        LocationAPIVariableCache[cache_type].data = JSON.parse(cache);\n      }\n      setDataReceivingProgress(requestID, 'getLocation_0', 0, true);\n      setDataReceivingProgress(requestID, 'getLocation_1', 0, true);\n      setDataUpdateTime(requestID, -1);\n      return LocationAPIVariableCache[cache_type].data;\n    }\n  }\n}\n","import { lfGetItem, lfSetItem } from '../../storage/index';\nimport { getAPIURL } from '../getAPIURL/index';\nimport { fetchData, setDataReceivingProgress, setDataUpdateTime } from '../loader';\n\nexport interface CarInfoItem {\n  BusId: number; // BusId ≠ BusID\n  BusNId: string;\n  CarNum: string; // CarNumber = BusID = vehicle registration number\n  CarType: '0' | '1' | '2' | '3'; // 0: normal bus (一般), 1: low-floor bus (低底盤), 2: disability-friendly bus (大復康巴士), 3: dog-friendly bus (狗狗友善專車)\n  IboxId: number;\n  StationId: number;\n  PathAttributeId: number;\n  BuildPeriod: string;\n  Ctime: string;\n}\n\nexport type CarInfo = Array<CarInfoItem>;\n\nexport interface SimplifiedCarInfoItem {\n  BusId: CarInfoItem['BusId'];\n  CarNum: CarInfoItem['CarNum'];\n  CarType: CarInfoItem['CarType'];\n  PathAttributeId: CarInfoItem['PathAttributeId'];\n}\n\nexport type SimplifiedCarInfo = { [key: string]: SimplifiedCarInfoItem };\n\nconst CarInfoAPIVariableCache = {\n  raw: {\n    data: [],\n    available: false\n  },\n  simplified: {\n    data: {},\n    available: false\n  }\n};\n\nasync function simplifyCarInfo(CarInfo: CarInfo): Promise<SimplifiedCarInfo> {\n  const worker = new Worker(new URL('./simplifyCarInfo-worker.ts', import.meta.url));\n\n  // Wrap worker communication in a promise\n  const result = await new Promise((resolve, reject) => {\n    worker.onmessage = function (e) {\n      resolve(e.data); // Resolve the promise with the worker's result\n      worker.terminate(); // Terminate the worker when done\n    };\n\n    worker.onerror = function (e) {\n      reject(e.message); // Reject the promise on error\n      worker.terminate(); // Terminate the worker if an error occurs\n    };\n\n    worker.postMessage(CarInfo); // Send data to the worker\n  });\n\n  return result;\n}\n\nexport async function getCarInfo(requestID: string, simplified: boolean = false): Promise<CarInfo | SimplifiedCarInfo> {\n  async function getData() {\n    const apis = [\n      [0, 2],\n      [1, 2]\n    ].map((e) => ({ url: getAPIURL(e[0], e[1]), e: e }));\n    let result = [];\n    for (const api of apis) {\n      const data = await fetchData(api.url, requestID, `getCarInfo_${api.e[0]}`, 'json');\n      result = result.concat(data.BusInfo);\n      setDataUpdateTime(requestID, data.EssentialInfo.UpdateTime);\n    }\n    return result;\n  }\n\n  const cache_type = simplified ? 'simplified' : 'raw';\n  const cacheKey = `bus_${cache_type}_car_info_v6_cache`;\n  const cacheTimeToLive = 60 * 60 * 24 * 30 * 1000;\n  const cacheTimestamp = await lfGetItem(0, `${cacheKey}_timestamp`);\n  if (cacheTimestamp === null) {\n    const result = await getData();\n    let final_result;\n    if (simplified) {\n      final_result = await simplifyCarInfo(result);\n    } else {\n      final_result = result;\n    }\n    await lfSetItem(0, `${cacheKey}_timestamp`, new Date().getTime());\n    await lfSetItem(0, cacheKey, JSON.stringify(final_result));\n    if (!CarInfoAPIVariableCache[cache_type].available) {\n      CarInfoAPIVariableCache[cache_type].available = true;\n      CarInfoAPIVariableCache[cache_type].data = final_result;\n    }\n    return final_result;\n  } else {\n    if (new Date().getTime() - parseInt(cacheTimestamp) > cacheTimeToLive) {\n      const result = await getData();\n      let final_result;\n      if (simplified) {\n        final_result = await simplifyCarInfo(result);\n      } else {\n        final_result = result;\n      }\n      await lfSetItem(0, `${cacheKey}_timestamp`, new Date().getTime());\n      await lfSetItem(0, cacheKey, JSON.stringify(final_result));\n      return final_result;\n    } else {\n      if (!CarInfoAPIVariableCache[cache_type].available) {\n        const cache = await lfGetItem(0, cacheKey);\n        CarInfoAPIVariableCache[cache_type].available = true;\n        CarInfoAPIVariableCache[cache_type].data = JSON.parse(cache);\n      }\n      setDataReceivingProgress(requestID, 'getCarInfo_0', 0, true);\n      setDataReceivingProgress(requestID, 'getCarInfo_1', 0, true);\n      setDataUpdateTime(requestID, -1);\n      return CarInfoAPIVariableCache[cache_type].data;\n    }\n  }\n}\n","import { lfGetItem, lfSetItem } from '../../storage/index';\nimport { getMaterialSymbolsAPIURL } from '../getAPIURL/index';\nimport { fetchData, setDataReceivingProgress } from '../loader';\n\nlet MaterialSymbolsAPIVariableCache_available: boolean = false;\nlet MaterialSymbolsAPIVariableCache_data: Array<string> = [];\n\nexport async function getMaterialSymbols(requestID: string): Promise<Array<string>> {\n  async function getData() {\n    const apiurl = getMaterialSymbolsAPIURL();\n    const data = await fetchData(apiurl, requestID, 'getMaterialSymbols', 'json');\n    const result = data.list.split(',');\n    return result;\n  }\n\n  const cacheTimeToLive: number = 60 * 60 * 24 * 30 * 1000;\n  const cacheKey = `bus_material_symbols_cache`;\n  const cacheTimestamp = await lfGetItem(0, `${cacheKey}_timestamp`);\n  if (cacheTimestamp === null) {\n    const result = await getData();\n    await lfSetItem(0, `${cacheKey}_timestamp`, new Date().getTime());\n    await lfSetItem(0, cacheKey, result.join(','));\n    if (!MaterialSymbolsAPIVariableCache_available) {\n      MaterialSymbolsAPIVariableCache_available = true;\n      MaterialSymbolsAPIVariableCache_data = result;\n    }\n    return result;\n  } else {\n    if (new Date().getTime() - parseInt(cacheTimestamp) > cacheTimeToLive) {\n      const result = await getData();\n      await lfSetItem(0, `${cacheKey}_timestamp`, new Date().getTime());\n      await lfSetItem(0, cacheKey, result.join(','));\n      if (!MaterialSymbolsAPIVariableCache_available) {\n        MaterialSymbolsAPIVariableCache_available = true;\n        MaterialSymbolsAPIVariableCache_data = result;\n      }\n      return result;\n    } else {\n      if (!MaterialSymbolsAPIVariableCache_available) {\n        const cache = await lfGetItem(0, cacheKey);\n        MaterialSymbolsAPIVariableCache_available = true;\n        MaterialSymbolsAPIVariableCache_data = cache.split(',');\n      }\n      setDataReceivingProgress(requestID, 'getMaterialSymbols', 0, true);\n      return MaterialSymbolsAPIVariableCache_data;\n    }\n  }\n}\n"],"names":["getEstimateTime","_x","_getEstimateTime","apply","arguments","requestID","_step","result","_iterator","_createForOfIteratorHelper","map","e","url","getAPIURL","s","n","done","api","value","data","fetchData","concat","BusInfo","setDataUpdateTime","EssentialInfo","UpdateTime","err","f","city","alternative","length","undefined","interval","cities","buckets","proxy","getSettingOptionValue","getNoCacheParameter","getMaterialSymbolsAPIURL","getBusData","_getBusData","getBusEvent","_getBusEvent","LocationAPIVariableCache","simplified","available","merged","indexed","simplifyLocation","_simplifyLocation","_asyncToGenerator","Location","worker","Worker","URL","Promise","resolve","reject","onmessage","terminate","onerror","message","postMessage","mergeLocationByName","_x2","_mergeLocationByName","object","indexLocationByGeohash","_x3","_indexLocationByGeohash","getLocation","_x4","_x5","_getLocation","type","getData","_getData","cache_type","cacheKey","cacheTimestamp","lfGetItem","final_result","simplified_result","merged_result","lfSetItem","Date","getTime","JSON","stringify","parseInt","cache","parse","setDataReceivingProgress","CarInfoAPIVariableCache","raw","simplifyCarInfo","_simplifyCarInfo","CarInfo","getCarInfo","_getCarInfo","MaterialSymbolsAPIVariableCache_available","MaterialSymbolsAPIVariableCache_data","getMaterialSymbols","_getMaterialSymbols","apiurl","list","split","join"],"sourceRoot":""}