{"version":3,"file":"d691eb50fecc15aeecac.js","mappings":"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","sources":["webpack://bus/./node_modules/otpauth/dist/otpauth.esm.js"],"sourcesContent":["//! otpauth 9.4.1 | (c) Héctor Molinero Fernández | MIT | https://github.com/hectorm/otpauth\n//! noble-hashes 1.8.0 | (c) Paul Miller | MIT | https://github.com/paulmillr/noble-hashes\n/// <reference types=\"./otpauth.d.ts\" />\n// @ts-nocheck\n/**\n * Converts an integer to an Uint8Array.\n * @param {number} num Integer.\n * @returns {Uint8Array} Uint8Array.\n */ const uintDecode = (num)=>{\n    const buf = new ArrayBuffer(8);\n    const arr = new Uint8Array(buf);\n    let acc = num;\n    for(let i = 7; i >= 0; i--){\n        if (acc === 0) break;\n        arr[i] = acc & 255;\n        acc -= arr[i];\n        acc /= 256;\n    }\n    return arr;\n};\n\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */ /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */ function isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n}\n/** Asserts something is positive integer. */ function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */ function abytes(b, ...lengths) {\n    if (!isBytes(b)) throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */ function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */ function aexists(instance, checkFinished = true) {\n    if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */ function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u32. */ function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */ function clean(...arrays) {\n    for(let i = 0; i < arrays.length; i++){\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */ function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */ function rotr(word, shift) {\n    return word << 32 - shift | word >>> shift;\n}\n/** The rotate left (circular left shift) operation for uint32 */ function rotl(word, shift) {\n    return word << shift | word >>> 32 - shift >>> 0;\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */ const isLE = /* @__PURE__ */ (()=>new Uint8Array(new Uint32Array([\n        0x11223344\n    ]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */ function byteSwap(word) {\n    return word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\n}\n/** In place byte swap for Uint32Array */ function byteSwap32(arr) {\n    for(let i = 0; i < arr.length; i++){\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nconst swap32IfBE = isLE ? (u)=>u : byteSwap32;\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== 'string') throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === 'string') data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** For runtime check if class implements interface */ class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */ function createHasher(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\n\nclass HMAC extends Hash {\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n    constructor(hash, _key){\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key)=>new HMAC(hash, key);\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */ function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number(value >> _32n & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */ function Chi(a, b, c) {\n    return a & b ^ ~a & c;\n}\n/** Majority function, true if any two inputs is true. */ function Maj(a, b, c) {\n    return a & b ^ a & c ^ b & c;\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */ class HashMD extends Hash {\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for(let i = pos; i < blockLen; i++)buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen) to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    constructor(blockLen, outputLen, padOffset, isLE){\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */ /** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */ const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */ const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8,\n    0x367cd507,\n    0x3070dd17,\n    0xf70e5939,\n    0xffc00b31,\n    0x68581511,\n    0x64f98fa7,\n    0xbefa4fa4\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */ const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d,\n    0xc1059ed8,\n    0x629a292a,\n    0x367cd507,\n    0x9159015a,\n    0x3070dd17,\n    0x152fecd8,\n    0xf70e5939,\n    0x67332667,\n    0xffc00b31,\n    0x8eb44a87,\n    0x68581511,\n    0xdb0c2e0d,\n    0x64f98fa7,\n    0x47b5481d,\n    0xbefa4fa4\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */ const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667,\n    0xf3bcc908,\n    0xbb67ae85,\n    0x84caa73b,\n    0x3c6ef372,\n    0xfe94f82b,\n    0xa54ff53a,\n    0x5f1d36f1,\n    0x510e527f,\n    0xade682d1,\n    0x9b05688c,\n    0x2b3e6c1f,\n    0x1f83d9ab,\n    0xfb41bd6b,\n    0x5be0cd19,\n    0x137e2179\n]);\n\n/** Initial SHA1 state */ const SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n    0x67452301,\n    0xefcdab89,\n    0x98badcfe,\n    0x10325476,\n    0xc3d2e1f0\n]);\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n/** SHA1 legacy hash class. */ class SHA1 extends HashMD {\n    get() {\n        const { A, B, C, D, E } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E\n        ];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for(let i = 0; i < 16; i++, offset += 4)SHA1_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 80; i++)SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for(let i = 0; i < 80; i++){\n            let F, K;\n            if (i < 20) {\n                F = Chi(B, C, D);\n                K = 0x5a827999;\n            } else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            } else if (i < 60) {\n                F = Maj(B, C, D);\n                K = 0x8f1bbcdc;\n            } else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = rotl(A, 5) + F + E + K + SHA1_W[i] | 0;\n            E = D;\n            D = C;\n            C = rotl(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        clean(SHA1_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n    constructor(){\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n}\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */ const sha1 = /* @__PURE__ */ createHasher(()=>new SHA1());\n\n/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */ const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for(let i = 0; i < len; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s)=>h >>> s;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */ // prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */ const SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E,\n            F,\n            G,\n            H\n        ];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 64; i++){\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for(let i = 0; i < 64; i++){\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = sigma0 + Maj(A, B, C) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = D + T1 | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = T1 + T2 | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        F = F + this.F | 0;\n        G = G + this.G | 0;\n        H = H + this.H | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n    constructor(outputLen = 32){\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n}\nclass SHA224 extends SHA256 {\n    constructor(){\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (()=>split([\n        '0x428a2f98d728ae22',\n        '0x7137449123ef65cd',\n        '0xb5c0fbcfec4d3b2f',\n        '0xe9b5dba58189dbbc',\n        '0x3956c25bf348b538',\n        '0x59f111f1b605d019',\n        '0x923f82a4af194f9b',\n        '0xab1c5ed5da6d8118',\n        '0xd807aa98a3030242',\n        '0x12835b0145706fbe',\n        '0x243185be4ee4b28c',\n        '0x550c7dc3d5ffb4e2',\n        '0x72be5d74f27b896f',\n        '0x80deb1fe3b1696b1',\n        '0x9bdc06a725c71235',\n        '0xc19bf174cf692694',\n        '0xe49b69c19ef14ad2',\n        '0xefbe4786384f25e3',\n        '0x0fc19dc68b8cd5b5',\n        '0x240ca1cc77ac9c65',\n        '0x2de92c6f592b0275',\n        '0x4a7484aa6ea6e483',\n        '0x5cb0a9dcbd41fbd4',\n        '0x76f988da831153b5',\n        '0x983e5152ee66dfab',\n        '0xa831c66d2db43210',\n        '0xb00327c898fb213f',\n        '0xbf597fc7beef0ee4',\n        '0xc6e00bf33da88fc2',\n        '0xd5a79147930aa725',\n        '0x06ca6351e003826f',\n        '0x142929670a0e6e70',\n        '0x27b70a8546d22ffc',\n        '0x2e1b21385c26c926',\n        '0x4d2c6dfc5ac42aed',\n        '0x53380d139d95b3df',\n        '0x650a73548baf63de',\n        '0x766a0abb3c77b2a8',\n        '0x81c2c92e47edaee6',\n        '0x92722c851482353b',\n        '0xa2bfe8a14cf10364',\n        '0xa81a664bbc423001',\n        '0xc24b8b70d0f89791',\n        '0xc76c51a30654be30',\n        '0xd192e819d6ef5218',\n        '0xd69906245565a910',\n        '0xf40e35855771202a',\n        '0x106aa07032bbd1b8',\n        '0x19a4c116b8d2d0c8',\n        '0x1e376c085141ab53',\n        '0x2748774cdf8eeb99',\n        '0x34b0bcb5e19b48a8',\n        '0x391c0cb3c5c95a63',\n        '0x4ed8aa4ae3418acb',\n        '0x5b9cca4f7763e373',\n        '0x682e6ff3d6b2b8a3',\n        '0x748f82ee5defb2fc',\n        '0x78a5636f43172f60',\n        '0x84c87814a1f0ab72',\n        '0x8cc702081a6439ec',\n        '0x90befffa23631e28',\n        '0xa4506cebde82bde9',\n        '0xbef9a3f7b2c67915',\n        '0xc67178f2e372532b',\n        '0xca273eceea26619c',\n        '0xd186b8c721c0c207',\n        '0xeada7dd6cde0eb1e',\n        '0xf57d4f7fee6ed178',\n        '0x06f067aa72176fba',\n        '0x0a637dc5a2c898a6',\n        '0x113f9804bef90dae',\n        '0x1b710b35131c471b',\n        '0x28db77f523047d84',\n        '0x32caab7b40c72493',\n        '0x3c9ebe0a15c9bebc',\n        '0x431d67c49c100d4c',\n        '0x4cc5d4becb3e42b6',\n        '0x597f299cfc657e2a',\n        '0x5fcb6fab3ad6faec',\n        '0x6c44198c4a475817'\n    ].map((n)=>BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (()=>K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (()=>K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends HashMD {\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [\n            Ah,\n            Al,\n            Bh,\n            Bl,\n            Ch,\n            Cl,\n            Dh,\n            Dl,\n            Eh,\n            El,\n            Fh,\n            Fl,\n            Gh,\n            Gl,\n            Hh,\n            Hl\n        ];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4){\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32(offset += 4);\n        }\n        for(let i = 16; i < 80; i++){\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);\n            const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);\n            const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for(let i = 0; i < 80; i++){\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);\n            const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = Eh & Fh ^ ~Eh & Gh;\n            const CHIl = El & Fl ^ ~El & Gl;\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);\n            const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);\n            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = add3L(T1l, sigma0l, MAJl);\n            Ah = add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n    constructor(outputLen = 64){\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor(){\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */ const sha256 = /* @__PURE__ */ createHasher(()=>new SHA256());\n/** SHA2-224 hash function from RFC 4634 */ const sha224 = /* @__PURE__ */ createHasher(()=>new SHA224());\n/** SHA2-512 hash function from RFC 4634. */ const sha512 = /* @__PURE__ */ createHasher(()=>new SHA512());\n/** SHA2-384 hash function from RFC 4634. */ const sha384 = /* @__PURE__ */ createHasher(()=>new SHA384());\n\n// No __PURE__ annotations in sha3 header:\n// EVERYTHING is in fact used on every export.\n// Various per round constants calculations\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nfor(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){\n    // Pi\n    [x, y] = [\n        y,\n        (2 * x + 3 * y) % 5\n    ];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    // Iota\n    let t = _0n;\n    for(let j = 0; j < 7; j++){\n        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n        if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n}\nconst IOTAS = split(_SHA3_IOTA, true);\nconst SHA3_IOTA_H = IOTAS[0];\nconst SHA3_IOTA_L = IOTAS[1];\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s)=>s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\nconst rotlL = (h, l, s)=>s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\n/** `keccakf1600` internal function, additionally allows to adjust round count. */ function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for(let round = 24 - rounds; round < 24; round++){\n        // Theta θ\n        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for(let x = 0; x < 10; x += 2){\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for(let y = 0; y < 50; y += 10){\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for(let t = 0; t < 24; t++){\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for(let y = 0; y < 50; y += 10){\n            for(let x = 0; x < 10; x++)B[x] = s[y + x];\n            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    clean(B);\n}\n/** Keccak sponge function. */ class Keccak extends Hash {\n    clone() {\n        return this._cloneInto();\n    }\n    keccak() {\n        swap32IfBE(this.state32);\n        keccakP(this.state32, this.rounds);\n        swap32IfBE(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { blockLen, state } = this;\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen) this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished) throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        clean(this.state);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){\n        super();\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        this.enableXOF = false;\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (!(0 < blockLen && blockLen < 200)) throw new Error('only keccak-f1600 function is supported');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n}\nconst gen = (suffix, blockLen, outputLen)=>createHasher(()=>new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */ const sha3_224 = /* @__PURE__ */ (()=>gen(0x06, 144, 224 / 8))();\n/** SHA3-256 hash function. Different from keccak-256. */ const sha3_256 = /* @__PURE__ */ (()=>gen(0x06, 136, 256 / 8))();\n/** SHA3-384 hash function. */ const sha3_384 = /* @__PURE__ */ (()=>gen(0x06, 104, 384 / 8))();\n/** SHA3-512 hash function. */ const sha3_512 = /* @__PURE__ */ (()=>gen(0x06, 72, 512 / 8))();\n\n/**\n * \"globalThis\" ponyfill.\n * @see [A horrifying globalThis polyfill in universal JavaScript](https://mathiasbynens.be/notes/globalthis)\n * @type {Object.<string, *>}\n */ const globalScope = (()=>{\n    if (typeof globalThis === \"object\") return globalThis;\n    else {\n        Object.defineProperty(Object.prototype, \"__GLOBALTHIS__\", {\n            get () {\n                return this;\n            },\n            configurable: true\n        });\n        try {\n            // @ts-expect-error\n            // eslint-disable-next-line no-undef\n            if (typeof __GLOBALTHIS__ !== \"undefined\") return __GLOBALTHIS__;\n        } finally{\n            // @ts-expect-error\n            delete Object.prototype.__GLOBALTHIS__;\n        }\n    }\n    // Still unable to determine \"globalThis\", fall back to a naive method.\n    if (typeof self !== \"undefined\") return self;\n    else if (typeof window !== \"undefined\") return window;\n    else if (typeof global !== \"undefined\") return global;\n    return undefined;\n})();\n\n/**\n * @noble/hashes hash functions.\n * @type {Object.<string, sha1|sha224|sha256|sha384|sha512|sha3_224|sha3_256|sha3_384|sha3_512>}\n */ const nobleHashes = {\n    SHA1: sha1,\n    SHA224: sha224,\n    SHA256: sha256,\n    SHA384: sha384,\n    SHA512: sha512,\n    \"SHA3-224\": sha3_224,\n    \"SHA3-256\": sha3_256,\n    \"SHA3-384\": sha3_384,\n    \"SHA3-512\": sha3_512\n};\n/**\n * Canonicalizes a hash algorithm name.\n * @param {string} algorithm Hash algorithm name.\n * @returns {\"SHA1\"|\"SHA224\"|\"SHA256\"|\"SHA384\"|\"SHA512\"|\"SHA3-224\"|\"SHA3-256\"|\"SHA3-384\"|\"SHA3-512\"} Canonicalized hash algorithm name.\n */ const canonicalizeAlgorithm = (algorithm)=>{\n    switch(true){\n        case /^(?:SHA-?1|SSL3-SHA1)$/i.test(algorithm):\n            return \"SHA1\";\n        case /^SHA(?:2?-)?224$/i.test(algorithm):\n            return \"SHA224\";\n        case /^SHA(?:2?-)?256$/i.test(algorithm):\n            return \"SHA256\";\n        case /^SHA(?:2?-)?384$/i.test(algorithm):\n            return \"SHA384\";\n        case /^SHA(?:2?-)?512$/i.test(algorithm):\n            return \"SHA512\";\n        case /^SHA3-224$/i.test(algorithm):\n            return \"SHA3-224\";\n        case /^SHA3-256$/i.test(algorithm):\n            return \"SHA3-256\";\n        case /^SHA3-384$/i.test(algorithm):\n            return \"SHA3-384\";\n        case /^SHA3-512$/i.test(algorithm):\n            return \"SHA3-512\";\n        default:\n            throw new TypeError(`Unknown hash algorithm: ${algorithm}`);\n    }\n};\n/**\n * Calculates an HMAC digest.\n * @param {string} algorithm Algorithm.\n * @param {Uint8Array} key Key.\n * @param {Uint8Array} message Message.\n * @returns {Uint8Array} Digest.\n */ const hmacDigest = (algorithm, key, message)=>{\n    if (hmac) {\n        const hash = nobleHashes[algorithm] ?? nobleHashes[canonicalizeAlgorithm(algorithm)];\n        return hmac(hash, key, message);\n    } else {\n        throw new Error(\"Missing HMAC function\");\n    }\n};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */ const ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n/**\n * Converts a base32 string to an Uint8Array (RFC 4648).\n * @see [LinusU/base32-decode](https://github.com/LinusU/base32-decode)\n * @param {string} str Base32 string.\n * @returns {Uint8Array} Uint8Array.\n */ const base32Decode = (str)=>{\n    // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n    str = str.replace(/ /g, \"\");\n    // Canonicalize to all upper case and remove padding if it exists.\n    let end = str.length;\n    while(str[end - 1] === \"=\")--end;\n    str = (end < str.length ? str.substring(0, end) : str).toUpperCase();\n    const buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n    const arr = new Uint8Array(buf);\n    let bits = 0;\n    let value = 0;\n    let index = 0;\n    for(let i = 0; i < str.length; i++){\n        const idx = ALPHABET.indexOf(str[i]);\n        if (idx === -1) throw new TypeError(`Invalid character found: ${str[i]}`);\n        value = value << 5 | idx;\n        bits += 5;\n        if (bits >= 8) {\n            bits -= 8;\n            arr[index++] = value >>> bits;\n        }\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a base32 string (RFC 4648).\n * @see [LinusU/base32-encode](https://github.com/LinusU/base32-encode)\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Base32 string.\n */ const base32Encode = (arr)=>{\n    let bits = 0;\n    let value = 0;\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        value = value << 8 | arr[i];\n        bits += 8;\n        while(bits >= 5){\n            str += ALPHABET[value >>> bits - 5 & 31];\n            bits -= 5;\n        }\n    }\n    if (bits > 0) {\n        str += ALPHABET[value << 5 - bits & 31];\n    }\n    return str;\n};\n\n/**\n * Converts a hexadecimal string to an Uint8Array.\n * @param {string} str Hexadecimal string.\n * @returns {Uint8Array} Uint8Array.\n */ const hexDecode = (str)=>{\n    // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n    str = str.replace(/ /g, \"\");\n    const buf = new ArrayBuffer(str.length / 2);\n    const arr = new Uint8Array(buf);\n    for(let i = 0; i < str.length; i += 2){\n        arr[i / 2] = parseInt(str.substring(i, i + 2), 16);\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a hexadecimal string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Hexadecimal string.\n */ const hexEncode = (arr)=>{\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        const hex = arr[i].toString(16);\n        if (hex.length === 1) str += \"0\";\n        str += hex;\n    }\n    return str.toUpperCase();\n};\n\n/**\n * Converts a Latin-1 string to an Uint8Array.\n * @param {string} str Latin-1 string.\n * @returns {Uint8Array} Uint8Array.\n */ const latin1Decode = (str)=>{\n    const buf = new ArrayBuffer(str.length);\n    const arr = new Uint8Array(buf);\n    for(let i = 0; i < str.length; i++){\n        arr[i] = str.charCodeAt(i) & 0xff;\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a Latin-1 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Latin-1 string.\n */ const latin1Encode = (arr)=>{\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        str += String.fromCharCode(arr[i]);\n    }\n    return str;\n};\n\n/**\n * TextEncoder instance.\n * @type {TextEncoder|null}\n */ const ENCODER = globalScope.TextEncoder ? new globalScope.TextEncoder() : null;\n/**\n * TextDecoder instance.\n * @type {TextDecoder|null}\n */ const DECODER = globalScope.TextDecoder ? new globalScope.TextDecoder() : null;\n/**\n * Converts an UTF-8 string to an Uint8Array.\n * @param {string} str String.\n * @returns {Uint8Array} Uint8Array.\n */ const utf8Decode = (str)=>{\n    if (!ENCODER) {\n        throw new Error(\"Encoding API not available\");\n    }\n    return ENCODER.encode(str);\n};\n/**\n * Converts an Uint8Array to an UTF-8 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} String.\n */ const utf8Encode = (arr)=>{\n    if (!DECODER) {\n        throw new Error(\"Encoding API not available\");\n    }\n    return DECODER.decode(arr);\n};\n\n/**\n * Returns random bytes.\n * @param {number} size Size.\n * @returns {Uint8Array} Random bytes.\n */ const randomBytes = (size)=>{\n    if (globalScope.crypto?.getRandomValues) {\n        return globalScope.crypto.getRandomValues(new Uint8Array(size));\n    } else {\n        throw new Error(\"Cryptography API not available\");\n    }\n};\n\n/**\n * OTP secret key.\n */ class Secret {\n    /**\n   * Converts a Latin-1 string to a Secret object.\n   * @param {string} str Latin-1 string.\n   * @returns {Secret} Secret object.\n   */ static fromLatin1(str) {\n        return new Secret({\n            buffer: latin1Decode(str).buffer\n        });\n    }\n    /**\n   * Converts an UTF-8 string to a Secret object.\n   * @param {string} str UTF-8 string.\n   * @returns {Secret} Secret object.\n   */ static fromUTF8(str) {\n        return new Secret({\n            buffer: utf8Decode(str).buffer\n        });\n    }\n    /**\n   * Converts a base32 string to a Secret object.\n   * @param {string} str Base32 string.\n   * @returns {Secret} Secret object.\n   */ static fromBase32(str) {\n        return new Secret({\n            buffer: base32Decode(str).buffer\n        });\n    }\n    /**\n   * Converts a hexadecimal string to a Secret object.\n   * @param {string} str Hexadecimal string.\n   * @returns {Secret} Secret object.\n   */ static fromHex(str) {\n        return new Secret({\n            buffer: hexDecode(str).buffer\n        });\n    }\n    /**\n   * Secret key buffer.\n   * @deprecated For backward compatibility, the \"bytes\" property should be used instead.\n   * @type {ArrayBufferLike}\n   */ get buffer() {\n        return this.bytes.buffer;\n    }\n    /**\n   * Latin-1 string representation of secret key.\n   * @type {string}\n   */ get latin1() {\n        Object.defineProperty(this, \"latin1\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: latin1Encode(this.bytes)\n        });\n        return this.latin1;\n    }\n    /**\n   * UTF-8 string representation of secret key.\n   * @type {string}\n   */ get utf8() {\n        Object.defineProperty(this, \"utf8\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: utf8Encode(this.bytes)\n        });\n        return this.utf8;\n    }\n    /**\n   * Base32 string representation of secret key.\n   * @type {string}\n   */ get base32() {\n        Object.defineProperty(this, \"base32\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: base32Encode(this.bytes)\n        });\n        return this.base32;\n    }\n    /**\n   * Hexadecimal string representation of secret key.\n   * @type {string}\n   */ get hex() {\n        Object.defineProperty(this, \"hex\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: hexEncode(this.bytes)\n        });\n        return this.hex;\n    }\n    /**\n   * Creates a secret key object.\n   * @param {Object} [config] Configuration options.\n   * @param {ArrayBufferLike} [config.buffer] Secret key buffer.\n   * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n   */ constructor({ buffer, size = 20 } = {}){\n        /**\n     * Secret key.\n     * @type {Uint8Array}\n     * @readonly\n     */ this.bytes = typeof buffer === \"undefined\" ? randomBytes(size) : new Uint8Array(buffer);\n        // Prevent the \"bytes\" property from being modified.\n        Object.defineProperty(this, \"bytes\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: this.bytes\n        });\n    }\n}\n\n/**\n * Returns true if a is equal to b, without leaking timing information that would allow an attacker to guess one of the values.\n * @param {string} a String a.\n * @param {string} b String b.\n * @returns {boolean} Equality result.\n */ const timingSafeEqual = (a, b)=>{\n    {\n        if (a.length !== b.length) {\n            throw new TypeError(\"Input strings must have the same length\");\n        }\n        let i = -1;\n        let out = 0;\n        while(++i < a.length){\n            out |= a.charCodeAt(i) ^ b.charCodeAt(i);\n        }\n        return out === 0;\n    }\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm.\n * @see [RFC 4226](https://datatracker.ietf.org/doc/html/rfc4226)\n */ class HOTP {\n    /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   counter: number\n   *   window: number\n   * }}\n   */ static get defaults() {\n        return {\n            issuer: \"\",\n            label: \"OTPAuth\",\n            issuerInLabel: true,\n            algorithm: \"SHA1\",\n            digits: 6,\n            counter: 0,\n            window: 1\n        };\n    }\n    /**\n   * Generates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @returns {string} Token.\n   */ static generate({ secret, algorithm = HOTP.defaults.algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter }) {\n        const digest = hmacDigest(algorithm, secret.bytes, uintDecode(counter));\n        const offset = digest[digest.byteLength - 1] & 15;\n        const otp = ((digest[offset] & 127) << 24 | (digest[offset + 1] & 255) << 16 | (digest[offset + 2] & 255) << 8 | digest[offset + 3] & 255) % 10 ** digits;\n        return otp.toString().padStart(digits, \"0\");\n    }\n    /**\n   * Generates an HOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.counter=this.counter++] Counter value.\n   * @returns {string} Token.\n   */ generate({ counter = this.counter++ } = {}) {\n        return HOTP.generate({\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            counter\n        });\n    }\n    /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ static validate({ token, secret, algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter, window = HOTP.defaults.window }) {\n        // Return early if the token length does not match the digit number.\n        if (token.length !== digits) return null;\n        let delta = null;\n        const check = (/** @type {number} */ i)=>{\n            const generatedToken = HOTP.generate({\n                secret,\n                algorithm,\n                digits,\n                counter: i\n            });\n            if (timingSafeEqual(token, generatedToken)) {\n                delta = i - counter;\n            }\n        };\n        check(counter);\n        for(let i = 1; i <= window && delta === null; ++i){\n            check(counter - i);\n            if (delta !== null) break;\n            check(counter + i);\n            if (delta !== null) break;\n        }\n        return delta;\n    }\n    /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.counter=this.counter] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ validate({ token, counter = this.counter, window }) {\n        return HOTP.validate({\n            token,\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            counter,\n            window\n        });\n    }\n    /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */ toString() {\n        const e = encodeURIComponent;\n        return \"otpauth://hotp/\" + `${this.issuer.length > 0 ? this.issuerInLabel ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?`}` + `secret=${e(this.secret.base32)}&` + `algorithm=${e(this.algorithm)}&` + `digits=${e(this.digits)}&` + `counter=${e(this.counter)}`;\n    }\n    /**\n   * Creates an HOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Initial counter value.\n   */ constructor({ issuer = HOTP.defaults.issuer, label = HOTP.defaults.label, issuerInLabel = HOTP.defaults.issuerInLabel, secret = new Secret(), algorithm = HOTP.defaults.algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter } = {}){\n        /**\n     * Account provider.\n     * @type {string}\n     */ this.issuer = issuer;\n        /**\n     * Account label.\n     * @type {string}\n     */ this.label = label;\n        /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */ this.issuerInLabel = issuerInLabel;\n        /**\n     * Secret key.\n     * @type {Secret}\n     */ this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n        /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */ this.algorithm = canonicalizeAlgorithm(algorithm);\n        /**\n     * Token length.\n     * @type {number}\n     */ this.digits = digits;\n        /**\n     * Initial counter value.\n     * @type {number}\n     */ this.counter = counter;\n    }\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm.\n * @see [RFC 6238](https://datatracker.ietf.org/doc/html/rfc6238)\n */ class TOTP {\n    /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   period: number\n   *   window: number\n   * }}\n   */ static get defaults() {\n        return {\n            issuer: \"\",\n            label: \"OTPAuth\",\n            issuerInLabel: true,\n            algorithm: \"SHA1\",\n            digits: 6,\n            period: 30,\n            window: 1\n        };\n    }\n    /**\n   * Calculates the counter. i.e. the number of periods since timestamp 0.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {number} Counter.\n   */ static counter({ period = TOTP.defaults.period, timestamp = Date.now() } = {}) {\n        return Math.floor(timestamp / 1000 / period);\n    }\n    /**\n   * Calculates the counter. i.e. the number of periods since timestamp 0.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {number} Counter.\n   */ counter({ timestamp = Date.now() } = {}) {\n        return TOTP.counter({\n            period: this.period,\n            timestamp\n        });\n    }\n    /**\n   * Calculates the remaining time in milliseconds until the next token is generated.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {number} counter.\n   */ static remaining({ period = TOTP.defaults.period, timestamp = Date.now() } = {}) {\n        return period * 1000 - timestamp % (period * 1000);\n    }\n    /**\n   * Calculates the remaining time in milliseconds until the next token is generated.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {number} counter.\n   */ remaining({ timestamp = Date.now() } = {}) {\n        return TOTP.remaining({\n            period: this.period,\n            timestamp\n        });\n    }\n    /**\n   * Generates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */ static generate({ secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now() }) {\n        return HOTP.generate({\n            secret,\n            algorithm,\n            digits,\n            counter: TOTP.counter({\n                period,\n                timestamp\n            })\n        });\n    }\n    /**\n   * Generates a TOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */ generate({ timestamp = Date.now() } = {}) {\n        return TOTP.generate({\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            period: this.period,\n            timestamp\n        });\n    }\n    /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ static validate({ token, secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now(), window }) {\n        return HOTP.validate({\n            token,\n            secret,\n            algorithm,\n            digits,\n            counter: TOTP.counter({\n                period,\n                timestamp\n            }),\n            window\n        });\n    }\n    /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ validate({ token, timestamp, window }) {\n        return TOTP.validate({\n            token,\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            period: this.period,\n            timestamp,\n            window\n        });\n    }\n    /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */ toString() {\n        const e = encodeURIComponent;\n        return \"otpauth://totp/\" + `${this.issuer.length > 0 ? this.issuerInLabel ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?`}` + `secret=${e(this.secret.base32)}&` + `algorithm=${e(this.algorithm)}&` + `digits=${e(this.digits)}&` + `period=${e(this.period)}`;\n    }\n    /**\n   * Creates a TOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   */ constructor({ issuer = TOTP.defaults.issuer, label = TOTP.defaults.label, issuerInLabel = TOTP.defaults.issuerInLabel, secret = new Secret(), algorithm = TOTP.defaults.algorithm, digits = TOTP.defaults.digits, period = TOTP.defaults.period } = {}){\n        /**\n     * Account provider.\n     * @type {string}\n     */ this.issuer = issuer;\n        /**\n     * Account label.\n     * @type {string}\n     */ this.label = label;\n        /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */ this.issuerInLabel = issuerInLabel;\n        /**\n     * Secret key.\n     * @type {Secret}\n     */ this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n        /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */ this.algorithm = canonicalizeAlgorithm(algorithm);\n        /**\n     * Token length.\n     * @type {number}\n     */ this.digits = digits;\n        /**\n     * Token time-step duration.\n     * @type {number}\n     */ this.period = period;\n    }\n}\n\n/**\n * Key URI regex (otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS).\n * @type {RegExp}\n */ const OTPURI_REGEX = /^otpauth:\\/\\/([ht]otp)\\/(.+)\\?([A-Z0-9.~_-]+=[^?&]*(?:&[A-Z0-9.~_-]+=[^?&]*)*)$/i;\n/**\n * RFC 4648 base32 alphabet with pad.\n * @type {RegExp}\n */ const SECRET_REGEX = /^[2-7A-Z]+=*$/i;\n/**\n * Regex for supported algorithms.\n * @type {RegExp}\n */ const ALGORITHM_REGEX = /^SHA(?:1|224|256|384|512|3-224|3-256|3-384|3-512)$/i;\n/**\n * Integer regex.\n * @type {RegExp}\n */ const INTEGER_REGEX = /^[+-]?\\d+$/;\n/**\n * Positive integer regex.\n * @type {RegExp}\n */ const POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n/**\n * HOTP/TOTP object/string conversion.\n * @see [Key URI Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format)\n */ class URI {\n    /**\n   * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n   * @param {string} uri Google Authenticator Key URI.\n   * @returns {HOTP|TOTP} HOTP/TOTP object.\n   */ static parse(uri) {\n        let uriGroups;\n        try {\n            uriGroups = uri.match(OTPURI_REGEX);\n        // eslint-disable-next-line no-unused-vars\n        } catch (_) {\n        /* Handled below */ }\n        if (!Array.isArray(uriGroups)) {\n            throw new URIError(\"Invalid URI format\");\n        }\n        // Extract URI groups.\n        const uriType = uriGroups[1].toLowerCase();\n        const uriLabel = uriGroups[2].split(/(?::|%3A) *(.+)/i, 2).map(decodeURIComponent);\n        /** @type {Object.<string, string>} */ const uriParams = uriGroups[3].split(\"&\").reduce((acc, cur)=>{\n            const pairArr = cur.split(/=(.*)/, 2).map(decodeURIComponent);\n            const pairKey = pairArr[0].toLowerCase();\n            const pairVal = pairArr[1];\n            /** @type {Object.<string, string>} */ const pairAcc = acc;\n            pairAcc[pairKey] = pairVal;\n            return pairAcc;\n        }, {});\n        // 'OTP' will be instantiated with 'config' argument.\n        let OTP;\n        const config = {};\n        if (uriType === \"hotp\") {\n            OTP = HOTP;\n            // Counter: required\n            if (typeof uriParams.counter !== \"undefined\" && INTEGER_REGEX.test(uriParams.counter)) {\n                config.counter = parseInt(uriParams.counter, 10);\n            } else {\n                throw new TypeError(\"Missing or invalid 'counter' parameter\");\n            }\n        } else if (uriType === \"totp\") {\n            OTP = TOTP;\n            // Period: optional\n            if (typeof uriParams.period !== \"undefined\") {\n                if (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n                    config.period = parseInt(uriParams.period, 10);\n                } else {\n                    throw new TypeError(\"Invalid 'period' parameter\");\n                }\n            }\n        } else {\n            throw new TypeError(\"Unknown OTP type\");\n        }\n        // Label: required\n        // Issuer: optional\n        if (typeof uriParams.issuer !== \"undefined\") {\n            config.issuer = uriParams.issuer;\n        }\n        if (uriLabel.length === 2) {\n            config.label = uriLabel[1];\n            if (typeof config.issuer === \"undefined\" || config.issuer === \"\") {\n                config.issuer = uriLabel[0];\n            } else if (uriLabel[0] === \"\") {\n                config.issuerInLabel = false;\n            }\n        } else {\n            config.label = uriLabel[0];\n            if (typeof config.issuer !== \"undefined\" && config.issuer !== \"\") {\n                config.issuerInLabel = false;\n            }\n        }\n        // Secret: required\n        if (typeof uriParams.secret !== \"undefined\" && SECRET_REGEX.test(uriParams.secret)) {\n            config.secret = uriParams.secret;\n        } else {\n            throw new TypeError(\"Missing or invalid 'secret' parameter\");\n        }\n        // Algorithm: optional\n        if (typeof uriParams.algorithm !== \"undefined\") {\n            if (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n                config.algorithm = uriParams.algorithm;\n            } else {\n                throw new TypeError(\"Invalid 'algorithm' parameter\");\n            }\n        }\n        // Digits: optional\n        if (typeof uriParams.digits !== \"undefined\") {\n            if (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n                config.digits = parseInt(uriParams.digits, 10);\n            } else {\n                throw new TypeError(\"Invalid 'digits' parameter\");\n            }\n        }\n        return new OTP(config);\n    }\n    /**\n   * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n   * @param {HOTP|TOTP} otp HOTP/TOTP object.\n   * @returns {string} Google Authenticator Key URI.\n   */ static stringify(otp) {\n        if (otp instanceof HOTP || otp instanceof TOTP) {\n            return otp.toString();\n        }\n        throw new TypeError(\"Invalid 'HOTP/TOTP' object\");\n    }\n}\n\n/**\n * Library version.\n * @type {string}\n */ const version = \"9.4.1\";\n\nexport { HOTP, Secret, TOTP, URI, version };\n"],"names":["anumber","n","Number","isSafeInteger","Error","abytes","b","lengths","a","Uint8Array","ArrayBuffer","isView","constructor","name","length","includes","aexists","instance","checkFinished","destroyed","finished","aoutput","out","min","outputLen","clean","arrays","i","fill","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","rotl","byteSwap","swap32IfBE","Uint32Array","u","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","createHasher","hashCons","hashC","msg","update","digest","tmp","blockLen","create","HMAC","buf","this","iHash","digestInto","oHash","destroy","_cloneInto","to","Object","getPrototypeOf","clone","hash","_key","super","h","ahash","key","pad","set","hmac","message","Chi","c","Maj","HashMD","view","len","pos","take","Math","dataView","process","subarray","roundClean","isLE","padOffset","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","res","slice","SHA256_IV","from","SHA224_IV","SHA384_IV","SHA512_IV","SHA1_IV","SHA1_W","SHA1","A","B","C","D","E","offset","getUint32","F","K","T","sha1","U32_MASK64","fromBig","le","split","lst","Ah","Al","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","SHA256_K","SHA256_W","SHA256","G","H","W15","W2","s0","s1","T1","T2","SHA224","K512","map","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA384","sha256","sha224","sha512","sha384","_0n","_1n","_2n","_7n","_256n","_0x71n","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","round","R","x","y","push","t","j","IOTAS","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","Keccak","keccak","state32","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","posOut","finish","suffix","writeInto","bufferOut","xofInto","enableXOF","xof","bytes","floor","gen","sha3_224","sha3_256","sha3_384","sha3_512","globalScope","globalThis","defineProperty","prototype","configurable","__GLOBALTHIS__","self","window","global","nobleHashes","canonicalizeAlgorithm","algorithm","test","TypeError","ALPHABET","base32Decode","end","replace","substring","toUpperCase","bits","index","idx","indexOf","base32Encode","hexDecode","parseInt","hexEncode","hex","toString","latin1Decode","charCodeAt","latin1Encode","String","fromCharCode","ENCODER","DECODER","TextDecoder","utf8Decode","utf8Encode","decode","Secret","fromLatin1","fromUTF8","fromBase32","fromHex","latin1","enumerable","writable","utf8","base32","size","crypto","getRandomValues","randomBytes","HOTP","defaults","issuer","label","issuerInLabel","digits","counter","generate","secret","hmacDigest","num","acc","uintDecode","padStart","validate","token","delta","check","generatedToken","timingSafeEqual","e","encodeURIComponent","TOTP","period","timestamp","Date","now","remaining"],"sourceRoot":""}