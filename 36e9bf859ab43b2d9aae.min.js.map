{"version":3,"file":"36e9bf859ab43b2d9aae.min.js","mappings":"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","sources":["webpack://bus/./src/interface/map/index.ts"],"sourcesContent":["import { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\nimport { closePreviousPage, FieldSize, openPreviousPage, pushPageHistory } from '../index';\nimport { integrateMap, MapObject } from '../../data/map/index';\nimport { generateSVGCircle, generateSVGPath } from '../../tools/graphic';\nimport { generateIdentifier, supportTouch } from '../../tools/index';\nimport { mercatorProjection } from '../../tools/convert';\n\nlet currentIntegration = {};\n\nconst MapField = documentQuerySelector('.css_map_field');\nconst MapBodyElement = elementQuerySelector(MapField, '.css_map_body');\nconst MapSVGElement = elementQuerySelector(MapBodyElement, 'svg#map');\nconst RouteLayerElement = elementQuerySelector(MapSVGElement, 'g#map-route-layer');\nconst LocationLayerElement = elementQuerySelector(MapSVGElement, 'g#map-location-layer');\n\nconst strokeWidth = 2;\nconst pointRadius = 3;\nconst stroke = 'red';\nconst fill = 'blue';\n\nconst chunkWidth = 300;\nconst chunkHeight = 300;\nconst interval = 0.01;\nconst maxScale = 5;\nconst minScale = 0.001;\n\nlet fieldWidth = 0;\nlet fieldHeight = 0;\n\nlet translateX = 0;\nlet translateY = 0;\nlet scale = 1;\n\nlet deltaTranslateX = 0;\nlet deltaTranslateY = 0;\nlet deltaScale = 1;\n\nlet pointers = {};\nlet initialPointers = {};\n\nconst sameSessionTime = 300; // 300 ms\nlet sessionStarted = false;\nlet sessionTime = 0;\n\nfunction queryMapFieldSize(): FieldSize {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\n\nexport function ResizeMapField(): void {\n  const size = queryMapFieldSize();\n  fieldWidth = size.width;\n  fieldHeight = size.height;\n  MapSVGElement.setAttributeNS(null, 'width', `${fieldWidth}px`);\n  MapSVGElement.setAttributeNS(null, 'height', `${fieldHeight}px`);\n  MapSVGElement.setAttributeNS(null, 'viewBox', `0 0 ${fieldWidth} ${fieldHeight}`);\n}\n\ninterface ViewportCorners {\n  topLeft: {\n    x: number;\n    y: number;\n  };\n  bottomRight: {\n    x: number;\n    y: number;\n  };\n}\n\nfunction getViewportCorners(): ViewportCorners {\n  const topLeftX = -1 * translateX;\n  const topLeftY = -1 * translateY;\n\n  const bottomRightX = topLeftX + fieldWidth;\n  const bottomRightY = topLeftY + fieldHeight;\n\n  return {\n    topLeft: {\n      x: topLeftX,\n      y: topLeftY\n    },\n    bottomRight: {\n      x: bottomRightX,\n      y: bottomRightY\n    }\n  };\n}\n\nfunction getPointInChunk(longitude: number, latitude: number): { x: number; y: number } {\n  const projection = mercatorProjection(longitude /*- currentIntegration.boundary.topLeft.longitude*/, latitude /*- currentIntegration.boundary.bottomRight.latitude*/, 1);\n  return { x: projection.x, y: projection.y };\n}\n\nfunction renderChunk(chunkX: number, chunkY: number): void {\n  const thisChunkKey = `c_${chunkX}_${chunkY}`;\n  if (currentIntegration.chunks.hasOwnProperty(thisChunkKey)) {\n    console.log(thisChunkKey, currentIntegration.chunks[thisChunkKey]);\n    const thisChunk = currentIntegration.chunks[thisChunkKey];\n    for (const objectIndex of thisChunk) {\n      const object: MapObject = currentIntegration.objects[objectIndex];\n      console.log(object);\n      switch (object.type) {\n        case 'route':\n          const pathElement = generateSVGPath(\n            object.points.map((point) => {\n              return getPointInChunk(point[0], point[1]);\n            }),\n            stroke,\n            strokeWidth\n          );\n          RouteLayerElement.appendChild(pathElement);\n          break;\n        case 'location':\n          const pointInChunk = getPointInChunk(object.point[0], object.point[1]);\n          const circleElement = generateSVGCircle(pointInChunk.x, pointInChunk.y, pointRadius, stroke, strokeWidth / 2, fill);\n          LocationLayerElement.appendChild(circleElement);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction updateLayers(): void {\n  if (currentIntegration.hasOwnProperty('boundary')) {\n    const integrationBoundary = currentIntegration.boundary;\n    const integrationTopLeftChunkX = integrationBoundary.topLeft.x;\n    const integrationTopLeftChunkY = integrationBoundary.topLeft.y;\n    const integrationBottomRightChunkX = integrationBoundary.bottomRight.x;\n    const integrationBottomRightChunkY = integrationBoundary.bottomRight.y;\n\n    const currentViewportCorners = getViewportCorners();\n    const currentTopLeftX = currentViewportCorners.topLeft.x;\n    const currentTopLeftY = currentViewportCorners.topLeft.y;\n    const currentBottomRightX = currentViewportCorners.bottomRight.x;\n    const currentBottomRightY = currentViewportCorners.bottomRight.y;\n\n    const currentTopLeftChunkX = Math.floor(currentTopLeftX / chunkWidth) + integrationTopLeftChunkX;\n    const currentTopLeftChunkY = Math.floor(currentTopLeftY / chunkHeight) + integrationTopLeftChunkY;\n    const currentBottomRightChunkX = Math.floor(currentBottomRightX / chunkWidth) + integrationBottomRightChunkX;\n    const currentBottomRightChunkY = Math.floor(currentBottomRightY / chunkHeight) + integrationBottomRightChunkY;\n\n    const chunkXRange = Math.abs(currentBottomRightChunkX - currentTopLeftChunkX);\n    const chunkYRange = Math.abs(currentBottomRightChunkY - currentTopLeftChunkY);\n    console.log(chunkXRange, chunkYRange, chunkXRange * chunkYRange);\n    for (let i = 0; i < chunkXRange; i++) {\n      for (let j = 0; j < chunkYRange; j++) {\n        renderChunk(i + currentTopLeftChunkX, j + currentTopLeftChunkY);\n      }\n    }\n  }\n}\n\nfunction setLayersTransform(translateX: number, translateY: number, scale: number): void {\n  const transformString = `translate(${translateX} ${translateY}) scale(${scale})`;\n  // dilation (scaling) is done before translation\n  RouteLayerElement.setAttributeNS(null, 'transform', transformString);\n  LocationLayerElement.setAttributeNS(null, 'transform', transformString);\n}\n\nexport async function initializeMapSVG(): void {\n  const requestID = generateIdentifier('r');\n  const integration = await integrateMap(requestID);\n  currentIntegration = integration;\n  console.log(currentIntegration, getViewportCorners());\n  updateLayers();\n  teleportViewportToTopLeft();\n  ResizeMapField();\n}\n\nexport function initializeMapInteraction(): void {\n  if (supportTouch()) {\n    MapSVGElement.addEventListener('touchstart', handleStartEvent, { passive: false });\n    MapSVGElement.addEventListener('touchmove', handleMoveEvent, { passive: false });\n    MapSVGElement.addEventListener('touchend', handleEndEvent, { passive: false });\n  } else {\n    MapSVGElement.addEventListener('mousedown', handleStartEvent);\n    MapSVGElement.addEventListener('mousemove', handleMoveEvent);\n    MapSVGElement.addEventListener('mouseup', handleEndEvent);\n  }\n}\n\nfunction handleStartEvent(event: Event): void {\n  event.preventDefault();\n  const now = new Date().getTime();\n  if (!sessionStarted || now - sessionTime <= sameSessionTime) {\n    sessionStarted = true;\n    sessionTime = now;\n    // reset delta\n    deltaTranslateX = 0;\n    deltaTranslateY = 0;\n    deltaScale = 1;\n    // update pointers\n    pointers = {};\n    initialPointers = {};\n    if (event.touches) {\n      // touch event\n      for (const touch of event.touches) {\n        const pointerKey = `p_${touch.identifier}`;\n        pointers[pointerKey] = { x: touch.clientX, y: touch.clientY };\n        initialPointers[pointerKey] = { x: touch.clientX, y: touch.clientY };\n      }\n    } else {\n      // other event\n      const pointerKey = `p_0`;\n      pointers[pointerKey] = { x: event.clientX, y: event.clientY };\n      initialPointers[pointerKey] = { x: event.clientX, y: event.clientY };\n    }\n  }\n}\n\nfunction handleMoveEvent(event: Event): void {\n  event.preventDefault();\n  if (sessionStarted) {\n    // reset delta\n    deltaTranslateX = 0;\n    deltaTranslateY = 0;\n    deltaScale = 1;\n    // update pointers\n    pointers = {};\n    if (event.touches) {\n      // touch event\n      for (const touch of event.touches) {\n        const pointerKey = `p_${touch.identifier}`;\n        pointers[pointerKey] = { x: touch.clientX, y: touch.clientY };\n      }\n    } else {\n      // other event\n      const pointerKey = `p_0`;\n      pointers[pointerKey] = { x: event.clientX, y: event.clientY };\n    }\n\n    // match behavior\n    let behavior = 'none';\n    if (event.touches) {\n      // touch event\n      if (Object.keys(pointers).length === 1) {\n        behavior = 'move';\n      }\n      if (Object.keys(pointers).length >= 2) {\n        if ([...new Set(Object.keys(pointers))].every((value) => new Set(Object.keys(initialPointers)).has(value))) {\n          behavior = 'zoom';\n        } else {\n          behavior = 'move';\n        }\n      }\n    } else {\n      // other event\n      if (Object.keys(pointers).length === 1) {\n        behavior = 'move';\n      }\n    }\n\n    // do the behavior\n    switch (behavior) {\n      case 'move':\n        // calculate delta\n        for (const pointerKey in pointers) {\n          if (initialPointers.hasOwnProperty(pointerKey)) {\n            const pointer = pointers[pointerKey];\n            const initialPointer = initialPointers[pointerKey];\n            deltaTranslateX = pointer.x - initialPointer.x;\n            deltaTranslateY = pointer.y - initialPointer.y;\n          }\n        }\n        break;\n      case 'zoom':\n        // calculate center point\n        let totalX = 0;\n        let totalY = 0;\n        let pointerQuantity = 0;\n        for (const pointerKey in initialPointers) {\n          if (initialPointers.hasOwnProperty(pointerKey)) {\n            const pointer = initialPointers[pointerKey];\n            totalX += pointer.x;\n            totalY += pointer.y;\n            pointerQuantity += 1;\n          }\n        }\n        let centerX = totalX / pointerQuantity;\n        let centerY = totalY / pointerQuantity;\n\n        // calculate initial distance\n        let initialDistance = 0;\n        const thisInitialPointersValues = Object.values(initialPointers);\n        if (thisInitialPointersValues.length === 2) {\n          initialDistance = Math.hypot(thisInitialPointersValues[0].x - thisInitialPointersValues[1].x, thisInitialPointersValues[0].y - thisInitialPointersValues[1].y);\n        }\n        if (thisInitialPointersValues.length === 3) {\n          initialDistance = Math.hypot(thisInitialPointersValues[0].x - centerX, thisInitialPointersValues[0].y - centerY);\n        }\n\n        // calculate distance\n        let distance = 0;\n        const thisPointersValues = Object.values(pointers);\n        if (thisPointersValues.length === 2) {\n          distance = Math.hypot(thisPointersValues[0].x - thisPointersValues[1].x, thisPointersValues[0].y - thisPointersValues[1].y);\n        }\n        if (thisPointersValues.length === 3) {\n          distance = Math.hypot(thisPointersValues[0].x - centerX, thisPointersValues[0].y - centerY);\n        }\n\n        // calculate delta transform\n        deltaScale = initialDistance === 0 ? 1 : distance / initialDistance;\n        deltaTranslateX = (centerX - centerX * deltaScale) / 2;\n        deltaTranslateY = (centerY - centerY * deltaScale) / 2;\n        if (deltaScale === 0) {\n          deltaScale = 1;\n        }\n        break;\n      default:\n        break;\n    }\n\n    // preview transform\n    setLayersTransform(translateX + deltaTranslateX, translateY + deltaTranslateY, scale * deltaScale);\n  }\n}\n\nfunction handleEndEvent(event: Event): void {\n  event.preventDefault();\n  if (sessionStarted) {\n    // save transform\n    translateX += deltaTranslateX;\n    translateY += deltaTranslateY;\n    scale *= deltaScale;\n\n    // sync transform\n    setLayersTransform(translateX, translateY, scale);\n\n    // update layers\n    updateLayers();\n\n    sessionStarted = false;\n  }\n}\n\nfunction teleportViewportToTopLeft(): void {\n  if (currentIntegration.hasOwnProperty('boundary')) {\n    const projection = mercatorProjection(currentIntegration.boundary.topLeft.longitude, currentIntegration.boundary.topLeft.latitude, 1);\n    translateX = -1 * projection.x;\n    translateY = -1 * projection.y;\n    scale = 1;\n    setLayersTransform(translateX, translateY, scale);\n  }\n}\n\nexport function openMap(): void {\n  pushPageHistory('Map');\n  MapField.setAttribute('displayed', 'true');\n  initializeMapSVG();\n  closePreviousPage();\n}\n\nexport function closeMap(): void {\n  // revokePageHistory('Map');\n  MapField.setAttribute('displayed', 'false');\n  openPreviousPage();\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","asyncGeneratorStep","_createForOfIteratorHelper","_n","F","toString","test","currentIntegration","MapField","documentQuerySelector","MapBodyElement","elementQuerySelector","MapSVGElement","RouteLayerElement","LocationLayerElement","strokeWidth","pointRadius","stroke","fill","chunkWidth","chunkHeight","fieldWidth","fieldHeight","translateX","translateY","scale","deltaTranslateX","deltaTranslateY","deltaScale","pointers","initialPointers","sameSessionTime","sessionStarted","sessionTime","ResizeMapField","size","width","window","innerWidth","height","innerHeight","setAttributeNS","concat","getViewportCorners","topLeftX","topLeftY","topLeft","x","bottomRight","getPointInChunk","longitude","latitude","projection","mercatorProjection","renderChunk","chunkX","chunkY","thisChunkKey","chunks","console","log","_step","_iterator","objectIndex","object","objects","pathElement","generateSVGPath","points","map","point","appendChild","pointInChunk","circleElement","generateSVGCircle","err","updateLayers","integrationBoundary","boundary","integrationTopLeftChunkX","integrationTopLeftChunkY","integrationBottomRightChunkX","integrationBottomRightChunkY","currentViewportCorners","currentTopLeftX","currentTopLeftY","currentBottomRightX","currentBottomRightY","currentTopLeftChunkX","Math","floor","currentTopLeftChunkY","currentBottomRightChunkX","currentBottomRightChunkY","chunkXRange","abs","chunkYRange","j","setLayersTransform","transformString","_initializeMapSVG","_callee","requestID","integration","_context","generateIdentifier","integrateMap","teleportViewportToTopLeft","arguments","apply","_next","_throw","initializeMapInteraction","supportTouch","addEventListener","handleStartEvent","passive","handleMoveEvent","handleEndEvent","event","preventDefault","now","Date","getTime","touches","_step2","_iterator2","touch","pointerKey","identifier","clientX","clientY","_step3","_iterator3","behavior","Set","every","has","pointer","initialPointer","totalX","totalY","pointerQuantity","centerX","centerY","initialDistance","thisInitialPointersValues","hypot","distance","thisPointersValues","openMap","pushPageHistory","setAttribute","initializeMapSVG","closePreviousPage","closeMap","openPreviousPage"],"sourceRoot":""}