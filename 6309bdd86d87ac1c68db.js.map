{"version":3,"file":"6309bdd86d87ac1c68db.js","mappings":"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","sources":["webpack://bus/webpack/universalModuleDefinition","webpack://bus/./src/data/analytics/bus-arrival-time/getBusArrivalTimes-worker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bus\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bus\"] = factory();\n\telse\n\t\troot[\"bus\"] = factory();\n})(self, () => {\nreturn ","import { PersonalScheduleArray } from '../../personal-schedule/index';\nimport { BusArrivalTimeDataGroupArray, BusArrivalTimes } from './index';\n\ninterface task {\n  personalSchedules: PersonalScheduleArray;\n  busArrivalTimeDataGroups: BusArrivalTimeDataGroupArray;\n  chartWidth: number;\n  chartHeight: number;\n  taskID: string;\n  port: any;\n}\n\nlet taskQueue: Array<task> = [];\nlet isProcessing: boolean = false;\n\n// Setup message handling (works for dedicated or shared workers)\nif ('onconnect' in self) {\n  self.onconnect = function (e) {\n    const port = e.ports[0];\n    port.onmessage = function (event) {\n      const [personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID] = event.data;\n      taskQueue.push({ personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port });\n      processWorkerTask();\n    };\n  };\n} else {\n  const port = self;\n  self.onmessage = function (event) {\n    const [personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID] = event.data;\n    taskQueue.push({ personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port });\n    processWorkerTask();\n  };\n}\n\nconst fontSize = 12;\nconst fontFamily: string = '\"Noto Sans TC\", sans-serif';\n\nlet canvas;\nlet ctx;\nlet supportOffscreenCanvas: boolean = false;\nif ('OffscreenCanvas' in self) {\n  canvas = new OffscreenCanvas();\n  ctx = canvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n  ctx.font = `400 ${fontSize}px ${fontFamily}`;\n  ctx.textBaseline = 'top';\n  supportOffscreenCanvas = true;\n}\n\n// Main processing function\nfunction processWorkerTask(): void {\n  if (isProcessing || taskQueue.length === 0) return;\n  isProcessing = true;\n\n  // Dequeue the next task\n  const { personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port }: task = taskQueue.shift();\n\n  const result: BusArrivalTimes = {};\n\n  // For each personalSchedule, build an SVG graph\n  for (const personalSchedule of personalSchedules) {\n    const startIndex = personalSchedule.period.start.hours * 60 + personalSchedule.period.start.minutes;\n    const endIndex = personalSchedule.period.end.hours * 60 + personalSchedule.period.end.minutes;\n    const barWidth = chartWidth / (endIndex - startIndex);\n    for (const busArrivalTimeDataGroup of busArrivalTimeDataGroups) {\n      if (personalSchedule.days.indexOf(busArrivalTimeDataGroup.day) < 0) {\n        continue;\n      }\n      const statsMax = busArrivalTimeDataGroup.max;\n      const statsArray = busArrivalTimeDataGroup.stats.slice(startIndex, endIndex);\n      const statsArrayLength = statsArray.length;\n\n      // Gridline and labels\n      let verticalGridlineLabels = '';\n      let verticalGridlinePathCommand = '';\n      let verticalGridlineInterval = 0; // minutes\n      if (statsArrayLength / 30 <= 3) {\n        verticalGridlineInterval = 10;\n      } else {\n        verticalGridlineInterval = 30;\n      }\n      const verticalGridlineQuantity = Math.floor(statsArrayLength / verticalGridlineInterval);\n      const verticalGridlineGap = chartWidth / verticalGridlineQuantity;\n      for (let i = verticalGridlineQuantity - 1; i >= 0; i--) {\n        const x = 0.35 / 2 + i * verticalGridlineGap;\n        verticalGridlinePathCommand += ` M${x},0`;\n        verticalGridlinePathCommand += ` L${x},${chartHeight}`;\n        // the stroke alignment is \"center\"\n        const labelTime = startIndex + i * verticalGridlineInterval;\n        const labelMinutes = labelTime % 60;\n        const labelHours = (labelTime - labelMinutes) / 60;\n        const label = `${labelHours.toString().padStart(2, '0')}:${labelMinutes.toString().padStart(2, '0')}`;\n        let labelWidth = 30;\n        let labelHeight = 12;\n        if (supportOffscreenCanvas) {\n          const textMeasurement = ctx.measureText(label) as TextMetrics;\n          labelWidth = textMeasurement.width;\n          labelHeight = textMeasurement.actualBoundingBoxDescent;\n        }\n        const y = (chartHeight - labelHeight) / 2;\n        verticalGridlineLabels += `<text x=\"${x}\" y=\"${y}\" transform=\"rotate(-90 ${(x + x + labelWidth) / 2} ${(y + y + labelHeight) / 2})\" dominant-baseline=\"middle\" font-size=\"${fontSize}\" component=\"label\">${label}</text>`;\n      }\n      const verticalGridline = `<path d=\"${verticalGridlinePathCommand}\" fill=\"none\" stroke-width=\"0.35\" component=\"vertical-gridline\"/>`;\n\n      // Bottom line\n      const bottomLinePathCommand = `M0,${chartHeight} L${chartWidth},${chartHeight - 0.35 / 2}`;\n      const bottomLine = `<path d=\"${bottomLinePathCommand}\" fill=\"none\" stroke-width=\"0.35\" component=\"bottom-line\"/>`;\n\n      // Bars\n      let barsPathCommand = '';\n      barsPathCommand += `M${chartWidth},${chartHeight}`;\n      for (let j = statsArrayLength - 1; j >= 0; j--) {\n        let x = ((j + 1) / statsArrayLength) * chartWidth; // Shift right for correct alignment\n        let y = (1 - statsArray[j] / statsMax) * chartHeight;\n        barsPathCommand += ` L${x},${y}`;\n        barsPathCommand += ` L${x - barWidth},${y}`;\n        barsPathCommand += ` L${x - barWidth},${chartHeight}`;\n      }\n      barsPathCommand += ' Z';\n      const bars = `<path d=\"${barsPathCommand}\" stroke=\"none\" stroke-width=\"0\" component=\"bars\"/>`;\n\n      const svg = `<svg width=\"${chartWidth}\" height=\"${chartHeight}\" viewBox=\"0 0 ${chartWidth} ${chartHeight}\" xmlns=\"http://www.w3.org/2000/svg\">${verticalGridline}${verticalGridlineLabels}${bottomLine}${bars}</svg>`;\n      const stopKey = `s_${busArrivalTimeDataGroup.id}`;\n      if (!result.hasOwnProperty(stopKey)) {\n        result[stopKey] = [];\n      }\n      result[stopKey].push({\n        personalSchedule: personalSchedule,\n        chart: svg,\n        day: busArrivalTimeDataGroup.day\n      });\n    }\n  }\n\n  // Send the complete HTML back to the main thread\n  port.postMessage([result, taskID]);\n\n  isProcessing = false;\n  processWorkerTask(); // Process next task in the queue if any\n}\n"],"names":["root","factory","exports","module","define","amd","self","taskQueue","isProcessing","onconnect","e","port","ports","onmessage","event","_event$data","_slicedToArray","data","personalSchedules","busArrivalTimeDataGroups","chartWidth","chartHeight","taskID","push","processWorkerTask","_event$data2","canvas","ctx","fontSize","supportOffscreenCanvas","length","_step","_taskQueue$shift","shift","result","_iterator","_createForOfIteratorHelper","s","n","done","_step2","personalSchedule","value","startIndex","period","start","hours","minutes","endIndex","end","barWidth","_iterator2","busArrivalTimeDataGroup","days","indexOf","day","statsMax","max","statsArray","stats","slice","statsArrayLength","verticalGridlineLabels","verticalGridlinePathCommand","verticalGridlineInterval","verticalGridlineQuantity","Math","floor","verticalGridlineGap","i","x","concat","labelTime","labelMinutes","label","toString","padStart","labelWidth","labelHeight","textMeasurement","measureText","width","actualBoundingBoxDescent","y","verticalGridline","bottomLinePathCommand","bottomLine","barsPathCommand","j","bars","svg","stopKey","id","hasOwnProperty","chart","err","f","postMessage","OffscreenCanvas","getContext","font","textBaseline"],"sourceRoot":""}