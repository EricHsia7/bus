{"version":3,"file":"be5f821fdace272c580b.js","mappings":"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","sources":["webpack://bus/./src/interface/route/index.ts"],"sourcesContent":["import { IntegratedRoute, integratedStopItem, integrateRoute } from '../../data/route/index';\nimport { getIconHTML } from '../icons/index';\nimport { getDataReceivingProgress } from '../../data/apis/loader';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../tools/index';\nimport { getTextWidth } from '../../tools/graphic';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../tools/query-selector';\nimport { getUpdateRate } from '../../data/analytics/update-rate/index';\nimport { isFolderContentSaved } from '../../data/folder/index';\nimport { GeneratedElement, pushPageHistory, closePreviousPage, openPreviousPage, GroupStyles, querySize } from '../index';\nimport { promptMessage } from '../prompt/index';\nimport { indexToDay, timeObjectToString } from '../../tools/time';\nimport { logRecentView } from '../../data/recent-views/index';\nimport { stopHasNotifcationSchedules } from '../../data/notification/index';\n\nconst RouteField = documentQuerySelector('.css_route_field');\nconst RouteHeadElement = elementQuerySelector(RouteField, '.css_route_head');\nconst RouteNameElement = elementQuerySelector(RouteHeadElement, '.css_route_name');\nconst RouteButtonRightElement = elementQuerySelector(RouteHeadElement, '.css_route_button_right');\nconst RouteUpdateTimerElement = elementQuerySelector(RouteHeadElement, '.css_route_update_timer_box .css_route_update_timer');\nconst RouteGroupTabsElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tabs');\nconst RouteGroupTabsTrayElement = elementQuerySelector(RouteGroupTabsElement, '.css_route_group_tabs_tray');\nconst RouteGroupTabLineTrackElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tab_line_track');\nconst RouteGroupTabLineElement = elementQuerySelector(RouteGroupTabLineTrackElement, '.css_route_group_tab_line');\nconst RouteGroupsElement = elementQuerySelector(RouteField, '.css_route_groups');\n\nlet previousIntegration = {} as IntegratedRoute;\nlet previousAnimation: boolean = true;\nlet previousSkeletonScreen: boolean = false;\n\nlet routeSliding_initialIndex: number = 0;\nlet routeSliding_targetIndex: number = 0;\nlet routeSliding_groupQuantity: number = 0;\nlet routeSliding_groupStyles: GroupStyles = {};\nlet routeSliding_fieldWidth: number = 0;\nlet routeSliding_fieldHeight: number = 0;\nlet routeSliding_sliding: boolean = false;\n\nlet routeRefreshTimer_retryInterval: number = 10 * 1000;\nlet routeRefreshTimer_baseInterval: number = 15 * 1000;\nlet routeRefreshTimer_minInterval: number = 5 * 1000;\nlet routeRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet routeRefreshTimer_dynamic: boolean = true;\nlet routeRefreshTimer_streaming: boolean = false;\nlet routeRefreshTimer_lastUpdate: number = 0;\nlet routeRefreshTimer_nextUpdate: number = 0;\nlet routeRefreshTimer_refreshing: boolean = false;\nlet routeRefreshTimer_currentRequestID: string = '';\nlet routeRefreshTimer_currentProgress: number = -1;\nlet routeRefreshTimer_targetProgress: number = -1;\nlet routeRefreshTimer_streamStarted: boolean = false;\nvar routeRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nlet currentRouteIDSet_RouteID: number = 0;\nlet currentRouteIDSet_PathAttributeId: Array<number> = [];\n\nlet tabPadding: number = 20;\n\nexport function initializeRouteSliding(): void {\n  RouteGroupsElement.addEventListener(\n    'touchstart',\n    function () {\n      routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n    },\n    { passive: true }\n  );\n\n  RouteGroupsElement.addEventListener(\n    'scroll',\n    function (event: Event) {\n      routeSliding_sliding = true;\n      const target = event.target as HTMLElement;\n      const currentIndex = target.scrollLeft / routeSliding_fieldWidth;\n      if (currentIndex > routeSliding_initialIndex) {\n        routeSliding_targetIndex = routeSliding_initialIndex + 1;\n      } else {\n        routeSliding_targetIndex = routeSliding_initialIndex - 1;\n      }\n      const initialSize = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`] || { width: 0, offset: 0 };\n      const targetSize = routeSliding_groupStyles[`g_${routeSliding_targetIndex}`] || { width: 0, offset: 0 };\n      const tabWidth = initialSize.width + (targetSize.width - initialSize.width) * Math.abs(currentIndex - routeSliding_initialIndex);\n      const offset = (initialSize.offset + (targetSize.offset - initialSize.offset) * Math.abs(currentIndex - routeSliding_initialIndex)) * -1 + routeSliding_fieldWidth * 0.5 - tabWidth * 0.5;\n\n      updateRouteCSS(routeSliding_groupQuantity, offset, tabWidth - tabPadding, currentIndex);\n\n      if (currentIndex === routeSliding_targetIndex) {\n        routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n        routeSliding_sliding = false;\n      }\n    },\n    { passive: true }\n  );\n}\n\nexport function ResizeRouteField(): void {\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  RouteField.style.setProperty('--b-cssvar-route-field-width', `${FieldWidth}px`);\n  RouteField.style.setProperty('--b-cssvar-route-field-height', `${FieldHeight}px`);\n}\n\nexport function updateRouteCSS(groupQuantity: number, offset: number, tabLineWidth: number, percentage: number): void {\n  RouteGroupsElement.style.setProperty('--b-cssvar-route-group-quantity', groupQuantity.toString());\n  RouteGroupTabLineElement.style.setProperty('--b-cssvar-route-tab-line-width-scale', (tabLineWidth / 10).toString());\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-tabs-tray-offset', `${offset.toFixed(5)}px`);\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-percentage', percentage.toFixed(5));\n}\n\nfunction updateUpdateTimer(): void {\n  const smoothingFactor = 0.1;\n  const time = new Date().getTime();\n  if (routeRefreshTimer_refreshing) {\n    routeRefreshTimer_targetProgress = -1 + getDataReceivingProgress(routeRefreshTimer_currentRequestID);\n    routeRefreshTimer_currentProgress += (routeRefreshTimer_targetProgress - routeRefreshTimer_currentProgress) * smoothingFactor;\n  } else {\n    routeRefreshTimer_targetProgress = -1 * Math.min(1, Math.max(0, Math.abs(time - routeRefreshTimer_lastUpdate) / routeRefreshTimer_dynamicInterval));\n    routeRefreshTimer_currentProgress = routeRefreshTimer_targetProgress;\n  }\n  RouteUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', routeRefreshTimer_currentProgress.toString());\n  window.requestAnimationFrame(function () {\n    if (routeRefreshTimer_streaming) {\n      updateUpdateTimer();\n    }\n  });\n}\n\nfunction generateElementOfThreadBox(): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_thread_box');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_thread\"></div><div class=\"css_route_group_thread_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfItem(threadBoxIdentifier: string): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_item');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_item_head\"><div class=\"css_route_group_item_name\"></div><div class=\"css_route_group_item_capsule\"><div class=\"css_route_group_item_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div><div class=\"css_route_group_item_stretch\" onclick=\"bus.route.stretchRouteItemBody('${identifier}', '${threadBoxIdentifier}')\">${getIconHTML('keyboard_arrow_down')}</div><div class=\"css_route_group_item_capsule_separator\"></div></div></div><div class=\"css_route_group_item_body\" displayed=\"false\"><div class=\"css_route_group_item_buttons\"><div class=\"css_route_group_item_button\" highlighted=\"true\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 0)\" code=\"0\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('directions_bus')}</div>公車</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 1)\" code=\"1\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('departure_board')}</div>抵達時間</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 2)\" code=\"2\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('route')}</div>路線</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"save-to-folder\" onclick=\"bus.folder.openSaveToFolder('stop-on-route', ['${identifier}', null, null])\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('folder')}</div>儲存至資料夾</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"schedule-notification\" onclick=\"bus.notification.openScheduleNotification('stop-on-route', ['${identifier}', null, null, null])\" enabled=\"true\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('notifications')}</div>設定到站通知</div></div><div class=\"css_route_group_item_buses\" displayed=\"true\"></div><div class=\"css_route_group_item_overlapping_routes\" displayed=\"false\"></div><div class=\"css_route_group_item_bus_arrival_times\" displayed=\"false\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfGroup(): GeneratedElement {\n  // const identifier = generateIdentifier('g');\n  const element = document.createElement('div');\n  element.classList.add('css_route_group');\n  // element.id = identifier;\n  const tracksElement = document.createElement('div');\n  tracksElement.classList.add('css_route_group_tracks');\n\n  const threadTrackElement = document.createElement('div');\n  threadTrackElement.classList.add('css_route_group_threads_track');\n\n  const itemsTrackElement = document.createElement('div');\n  itemsTrackElement.classList.add('css_route_group_items_track');\n\n  tracksElement.appendChild(threadTrackElement);\n  tracksElement.appendChild(itemsTrackElement);\n  element.appendChild(tracksElement);\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction generateElementOfTab(): GeneratedElement {\n  var identifier = generateIdentifier('t');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_tab');\n  element.id = identifier;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction setUpRouteFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const defaultItemQuantity: number = Math.floor(FieldHeight / 50) + 5;\n  const defaultGroupQuantity = 2;\n  let groupedItems: IntegratedRoute['groupedItems'] = {};\n  for (let i = 0; i < defaultGroupQuantity; i++) {\n    const groupKey: string = `g_${i}`;\n    groupedItems[groupKey] = [];\n    for (let j = 0; j < defaultItemQuantity; j++) {\n      groupedItems[groupKey].push({\n        name: '',\n        goBack: '0',\n        status: { code: 8, text: '', time: -6 },\n        buses: [],\n        overlappingRoutes: [],\n        busArrivalTimes: [],\n        sequence: j,\n        position: {\n          longitude: 0,\n          latitude: 0\n        },\n        nearest: false,\n        progress: 0,\n        segmentBuffer: {\n          isSegmentBuffer: false,\n          isStartingPoint: false,\n          isEndingPoint: false\n        },\n        id: 0\n      });\n    }\n  }\n  updateRouteField(\n    {\n      groupedItems: groupedItems,\n      groupQuantity: defaultGroupQuantity,\n      itemQuantity: {\n        g_0: defaultItemQuantity,\n        g_1: defaultItemQuantity\n      },\n      RouteName: '載入中',\n      RouteEndPoints: {\n        RouteDeparture: '載入中',\n        RouteDestination: '載入中'\n      },\n      RouteID: 0,\n      PathAttributeId: [],\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction updateRouteField(integration: IntegratedRoute, skeletonScreen: boolean, animation: boolean): void {\n  function updateItem(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, skeletonScreen: boolean, animation: boolean): void {\n    function updateStatus(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, skeletonScreen: boolean, animation: boolean): void {\n      const thisThreadStatusElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread_status');\n      const currentThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_current_slide');\n      const nextThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_next_slide');\n\n      const thisItemStatusElement = elementQuerySelector(thisItemElement, '.css_route_group_item_status');\n      const currentItemSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n      const nextItemSlideElememt = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n\n      nextThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n\n      nextItemSlideElememt.setAttribute('code', thisItem.status.code.toString());\n      nextItemSlideElememt.innerText = thisItem.status.text;\n\n      if (!skeletonScreen) {\n        if (animation) {\n          const thisItemElementRect = thisItemElement.getBoundingClientRect();\n          const top = thisItemElementRect.top;\n          const left = thisItemElementRect.left;\n          const bottom = thisItemElementRect.bottom;\n          const right = thisItemElementRect.right;\n          const windowWidth = window.innerWidth;\n          const windowHeight = window.innerHeight;\n          if (bottom > 0 && top < windowHeight && right > 0 && left < windowWidth) {\n            currentThreadSlideElement.addEventListener(\n              'animationend',\n              function () {\n                currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n                currentThreadSlideElement.classList.remove('css_slide_fade_out');\n              },\n              { once: true }\n            );\n            currentItemSlideElement.addEventListener(\n              'animationend',\n              function () {\n                currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n                currentItemSlideElement.innerText = thisItem.status.text;\n                currentItemSlideElement.classList.remove('css_slide_fade_out');\n              },\n              { once: true }\n            );\n            currentThreadSlideElement.classList.add('css_slide_fade_out');\n            currentItemSlideElement.classList.add('css_slide_fade_out');\n            return;\n          }\n        }\n      }\n\n      currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n      currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n      currentItemSlideElement.innerText = thisItem.status.text;\n    }\n\n    function updateSegmentBuffer(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n      thisThreadBoxElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n    }\n\n    function updateName(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_name').innerText = thisItem.name;\n    }\n\n    function updateBuses(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_buses').innerHTML = thisItem.buses.length === 0 ? '<div class=\"css_route_group_item_buses_message\">目前沒有公車可顯示</div>' : thisItem.buses.map((bus) => `<div class=\"css_route_group_item_bus\" on-this-route=\"${bus.onThisRoute}\"><div class=\"css_route_group_item_bus_title\"><div class=\"css_route_group_item_bus_icon\">${getIconHTML('directions_bus')}</div><div class=\"css_route_group_item_bus_car_number\">${bus.carNumber}</div></div><div class=\"css_route_group_item_bus_attributes\"><div class=\"css_route_group_item_bus_route\">路線：${bus.RouteName}</div><div class=\"css_route_group_item_bus_car_status\">狀態：${bus.status.text}</div><div class=\"css_route_group_item_bus_car_type\">類型：${bus.type}</div></div></div>`).join('');\n    }\n\n    function updateOverlappingRoutes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_overlapping_routes').innerHTML = thisItem.overlappingRoutes.length === 0 ? '<div class=\"css_route_group_item_overlapping_route_message\">目前沒有路線可顯示</div>' : thisItem.overlappingRoutes.map((route) => `<div class=\"css_route_group_item_overlapping_route\"><div class=\"css_route_group_item_overlapping_route_title\"><div class=\"css_route_group_item_overlapping_route_icon\">${getIconHTML('route')}</div><div class=\"css_route_group_item_overlapping_route_name\">${route.name}</div></div><div class=\"css_route_group_item_overlapping_route_endpoints\">${route.RouteEndPoints.html}</div><div class=\"css_route_group_item_overlapping_route_actions\"><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.route.switchRoute(${route.RouteID}, [${route.PathAttributeId.join(',')}])\">查看路線</div><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.folder.openSaveToFolder('route-on-route', [${route.RouteID}])\">收藏路線</div></div></div>`).join('');\n    }\n\n    function updateBusArrivalTimes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_bus_arrival_times').innerHTML = thisItem.busArrivalTimes.length === 0 ? '<div class=\"css_route_group_item_bus_arrival_message\">目前沒有抵達時間可顯示</div>' : thisItem.busArrivalTimes.map((busArrivalTime) => `<div class=\"css_route_group_item_bus_arrival_time\"><div class=\"css_route_group_item_bus_arrival_time_title\"><div class=\"css_route_group_item_bus_arrival_time_icon\">${getIconHTML('calendar_view_day')}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_name\">${busArrivalTime.personalSchedule.name}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_time\">週${indexToDay(busArrivalTime.day).name} ${timeObjectToString(busArrivalTime.personalSchedule.period.start)} - ${timeObjectToString(busArrivalTime.personalSchedule.period.end)}</div></div><div class=\"css_route_group_item_bus_arrival_time_chart\">${busArrivalTime.chart}</div></div>`).join('');\n    }\n\n    function updateNearest(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n      thisThreadBoxElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n    }\n\n    function updateThread(thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, skeletonScreen: boolean, animation: boolean): void {\n      const previousProgress = previousItem?.progress || 0;\n      const thisProgress = thisItem?.progress || 0;\n      const thisThreadElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread');\n      if (!skeletonScreen) {\n        if (animation) {\n          if (previousProgress !== 0 && thisProgress === 0 && Math.abs(thisProgress - previousProgress) > 0) {\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', '100%');\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', '100%');\n            thisThreadElement.addEventListener(\n              'transitionend',\n              function () {\n                thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', '0%');\n                thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', '0%');\n              },\n              { once: true }\n            );\n            return;\n          }\n        }\n      }\n      thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', '0%');\n      thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${thisProgress * 100}%`);\n    }\n\n    function updateStretch(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      if (skeletonScreen) {\n        const thisItemBodyElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body');\n        thisItemBodyElement.setAttribute('displayed', 'false');\n        thisItemElement.setAttribute('stretched', 'false');\n        thisThreadBoxElement.setAttribute('stretched', 'false');\n      }\n    }\n\n    function updateAnimation(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, animation: boolean): void {\n      thisItemElement.setAttribute('animation', booleanToString(animation));\n      thisThreadBoxElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      thisItemElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n      thisThreadBoxElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    function updateSaveToFolderButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const saveToFolderButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"save-to-folder\"]');\n      saveToFolderButtonElement.setAttribute('onclick', `bus.folder.openSaveToFolder('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}])`);\n      isFolderContentSaved('stop', thisItem.id).then((e) => {\n        saveToFolderButtonElement.setAttribute('highlighted', booleanToString(e));\n      });\n    }\n\n    function updateScheduleNotificationButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const scheduleNotificationButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"schedule-notification\"]');\n      scheduleNotificationButtonElement.setAttribute('onclick', `bus.notification.openScheduleNotification('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}, ${thisItem.status.time}])`);\n      const havingNotifcationSchedules = stopHasNotifcationSchedules(thisItem.id);\n      scheduleNotificationButtonElement.setAttribute('highlighted', booleanToString(havingNotifcationSchedules));\n    }\n\n    if (previousItem === null) {\n      updateStatus(thisItemElement, thisThreadBoxElement, thisItem, skeletonScreen, animation);\n      updateName(thisItemElement, thisItem);\n      updateBuses(thisItemElement, thisItem);\n      updateOverlappingRoutes(thisItemElement, thisItem);\n      updateBusArrivalTimes(thisItemElement, thisItem);\n      updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      updateThread(thisThreadBoxElement, thisItem, previousItem, skeletonScreen, animation);\n      updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateSaveToFolderButton(thisItemElement, thisItem);\n      updateScheduleNotificationButton(thisItemElement, thisItem);\n    } else {\n      if (!(thisItem.status.time === previousItem.status.time)) {\n        updateStatus(thisItemElement, thisThreadBoxElement, thisItem, skeletonScreen, animation);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.buses, thisItem.buses)) {\n        updateBuses(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.busArrivalTimes, thisItem.busArrivalTimes)) {\n        updateBusArrivalTimes(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.segmentBuffer, thisItem.segmentBuffer)) {\n        updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.nearest === thisItem.nearest)) {\n        updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.progress === thisItem.progress)) {\n        updateThread(thisThreadBoxElement, thisItem, previousItem, skeletonScreen, animation);\n      }\n      if (!(previousItem.id === thisItem.id)) {\n        updateName(thisItemElement, thisItem);\n        updateOverlappingRoutes(thisItemElement, thisItem);\n        updateSaveToFolderButton(thisItemElement, thisItem);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!(animation === previousAnimation)) {\n        updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      }\n      if (!(skeletonScreen === previousSkeletonScreen)) {\n        updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n        updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      }\n    }\n  }\n\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n\n  const groupQuantity = integration.groupQuantity;\n  const itemQuantity = integration.itemQuantity;\n  const groupedItems = integration.groupedItems;\n\n  routeSliding_groupQuantity = groupQuantity;\n  routeSliding_fieldWidth = FieldWidth;\n  routeSliding_fieldHeight = FieldHeight;\n\n  let cumulativeOffset = 0;\n  for (let i = 0; i < groupQuantity; i++) {\n    const width = getTextWidth([integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `往${e}`)[i], 500, '17px', `\"Noto Sans TC\", sans-serif`) + tabPadding;\n    routeSliding_groupStyles[`g_${i}`] = {\n      width: width,\n      offset: cumulativeOffset\n    };\n    cumulativeOffset += width;\n  }\n  const offset = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].offset * -1 + routeSliding_fieldWidth * 0.5 - routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width * 0.5;\n  if (!routeSliding_sliding) {\n    updateRouteCSS(routeSliding_groupQuantity, offset, routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width - tabPadding, routeSliding_initialIndex);\n  }\n\n  RouteNameElement.innerHTML = /*html*/ `<span>${integration.RouteName}</span>`;\n  RouteNameElement.setAttribute('animation', booleanToString(animation));\n  RouteNameElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabsElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabsElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabLineTrackElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabLineTrackElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteButtonRightElement.setAttribute('onclick', `bus.route.openRouteDetails(${integration.RouteID}, [${integration.PathAttributeId.join(',')}])`);\n\n  const currentGroupSeatQuantity = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group').length;\n  if (!(groupQuantity === currentGroupSeatQuantity)) {\n    const capacity = currentGroupSeatQuantity - groupQuantity;\n    if (capacity < 0) {\n      const newGroupsFragment = new DocumentFragment();\n      const newTabsFragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newGroupElement = generateElementOfGroup();\n        newGroupsFragment.appendChild(newGroupElement.element);\n        const newTabElement = generateElementOfTab();\n        newTabsFragment.appendChild(newTabElement.element);\n      }\n      RouteGroupsElement.append(newGroupsFragment);\n      RouteGroupTabsTrayElement.append(newTabsFragment);\n    } else {\n      const GroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n      const TabElements = elementQuerySelectorAll(RouteGroupTabsTrayElement, '.css_route_group_tab');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const groupIndex = currentGroupSeatQuantity - 1 - o;\n        GroupElements[groupIndex].remove();\n        TabElements[groupIndex].remove();\n      }\n    }\n  }\n\n  const RouteGroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const thisGroupElement = RouteGroupElements[i];\n    const thisGroupItemsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_items_track');\n    const thisGroupThreadsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_threads_track');\n    const currentItemSeatQuantity = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item').length;\n    if (!(itemQuantity[groupKey] === currentItemSeatQuantity)) {\n      const capacity = currentItemSeatQuantity - itemQuantity[groupKey];\n      if (capacity < 0) {\n        const newItemsFragment = new DocumentFragment();\n        const newThreadsFragment = new DocumentFragment();\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newThreadBoxElement = generateElementOfThreadBox();\n          const newItemElement = generateElementOfItem(newThreadBoxElement.id);\n          newItemsFragment.appendChild(newItemElement.element);\n          newThreadsFragment.appendChild(newThreadBoxElement.element);\n        }\n        thisGroupItemsTrackElement.append(newItemsFragment);\n        thisGroupThreadsTrackElement.append(newThreadsFragment);\n      } else {\n        const thisGroupItemElements = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item');\n        const thisGroupThreadElements = elementQuerySelectorAll(thisGroupThreadsTrackElement, '.css_route_group_thread_box');\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          thisGroupItemElements[itemIndex].remove();\n          thisGroupThreadElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  const TabElements = elementQuerySelectorAll(RouteGroupTabsTrayElement, '.css_route_group_tab');\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n\n    const thisTabElement = TabElements[i];\n    thisTabElement.innerHTML = [integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `<span>往${e}</span>`)[i];\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-width', `${routeSliding_groupStyles[groupKey].width}px`);\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-index', i.toString());\n\n    const thisGroupElement = RouteGroupElements[i];\n    const thisGroupItemsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_items_track');\n    const thisGroupThreadsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_threads_track');\n\n    const thisGroupItemElements = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item');\n    const thisGroupThreadElements = elementQuerySelectorAll(thisGroupThreadsTrackElement, '.css_route_group_thread_box');\n\n    for (let j = 0; j < itemQuantity[groupKey]; j++) {\n      const thisItemElement = thisGroupItemElements[j];\n      const thisThreadBoxElement = thisGroupThreadElements[j];\n      const thisItem = groupedItems[groupKey][j];\n      if (previousIntegration.hasOwnProperty('groupedItems')) {\n        if (previousIntegration.groupedItems.hasOwnProperty(groupKey)) {\n          if (previousIntegration.groupedItems[groupKey][j]) {\n            const previousItem = previousIntegration.groupedItems[groupKey][j];\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, previousItem, skeletonScreen, animation);\n          } else {\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, skeletonScreen, animation);\n          }\n        } else {\n          updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, skeletonScreen, animation);\n        }\n      } else {\n        updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, skeletonScreen, animation);\n      }\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshRoute() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  const busArrivalTimeChartSize = querySize('route-bus-arrival-time-chart');\n  routeRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  routeRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  routeRefreshTimer_refreshing = true;\n  routeRefreshTimer_currentRequestID = generateIdentifier('r');\n  RouteUpdateTimerElement.setAttribute('refreshing', 'true');\n  const integration = await integrateRoute(currentRouteIDSet_RouteID, currentRouteIDSet_PathAttributeId, busArrivalTimeChartSize.width, busArrivalTimeChartSize.height, routeRefreshTimer_currentRequestID);\n  updateRouteField(integration, false, playing_animation);\n  let updateRate = 0;\n  if (routeRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  routeRefreshTimer_lastUpdate = new Date().getTime();\n  if (routeRefreshTimer_dynamic) {\n    routeRefreshTimer_nextUpdate = Math.max(routeRefreshTimer_lastUpdate + routeRefreshTimer_minInterval, integration.dataUpdateTime + routeRefreshTimer_baseInterval / updateRate);\n  } else {\n    routeRefreshTimer_nextUpdate = routeRefreshTimer_lastUpdate + routeRefreshTimer_baseInterval;\n  }\n  routeRefreshTimer_dynamicInterval = Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - routeRefreshTimer_lastUpdate);\n  routeRefreshTimer_refreshing = false;\n  RouteUpdateTimerElement.setAttribute('refreshing', 'false');\n}\n\nexport function streamRoute(): void {\n  refreshRoute()\n    .then(function () {\n      if (routeRefreshTimer_streaming) {\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (routeRefreshTimer_streaming) {\n        promptMessage(`（路線）發生網路錯誤，將在${routeRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, routeRefreshTimer_retryInterval);\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function openRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  pushPageHistory('Route');\n  logRecentView('route', RouteID);\n  currentRouteIDSet_RouteID = RouteID;\n  currentRouteIDSet_PathAttributeId = PathAttributeId;\n  routeSliding_initialIndex = 0;\n  RouteField.setAttribute('displayed', 'true');\n  elementQuerySelector(RouteField, '.css_route_groups').scrollLeft = 0;\n  setUpRouteFieldSkeletonScreen(RouteField);\n  if (!routeRefreshTimer_streaming) {\n    routeRefreshTimer_streaming = true;\n    if (!routeRefreshTimer_streamStarted) {\n      routeRefreshTimer_streamStarted = true;\n      streamRoute();\n    } else {\n      refreshRoute();\n    }\n    routeRefreshTimer_currentProgress = -1;\n    routeRefreshTimer_targetProgress = -1;\n    updateUpdateTimer();\n  }\n  closePreviousPage();\n}\n\nexport function closeRoute(): void {\n  // revokePageHistory('Route');\n  RouteField.setAttribute('displayed', 'false');\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  routeRefreshTimer_targetProgress = -1;\n  openPreviousPage();\n}\n\nexport function switchRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  routeRefreshTimer_targetProgress = -1;\n  openRoute(RouteID, PathAttributeId);\n}\n\nexport function stretchRouteItemBody(itemElementID: string, threadBoxElementID: string): void {\n  const itemElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_items_track .css_route_group_item#${itemElementID}`);\n  const itemBodyElement = elementQuerySelector(itemElement, '.css_route_group_item_body');\n  const threadBoxElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_threads_track .css_route_group_thread_box#${threadBoxElementID}`);\n  if (itemElement.getAttribute('stretched') === 'true') {\n    if (itemElement.getAttribute('animation') === 'true') {\n      itemBodyElement.addEventListener(\n        'transitionend',\n        function () {\n          itemBodyElement.setAttribute('displayed', 'false');\n        },\n        { once: true }\n      );\n    } else {\n      itemBodyElement.setAttribute('displayed', 'false');\n    }\n    itemElement.setAttribute('stretched', 'false');\n    threadBoxElement.setAttribute('stretched', 'false');\n  } else {\n    itemBodyElement.setAttribute('displayed', 'true');\n    itemElement.setAttribute('stretched', 'true');\n    threadBoxElement.setAttribute('stretched', 'true');\n  }\n}\n\nexport function switchRouteBodyTab(itemID: string, tabCode: number): void {\n  const itemElement = elementQuerySelector(RouteGroupsElement, `.css_route_group_item#${itemID}`);\n  const buttons = elementQuerySelector(itemElement, '.css_route_group_item_buttons');\n  const button = elementQuerySelectorAll(buttons, '.css_route_group_item_button[highlighted=\"true\"][type=\"tab\"]');\n  for (const t of button) {\n    t.setAttribute('highlighted', 'false');\n  }\n  elementQuerySelector(buttons, `.css_route_group_item_button[code=\"${tabCode}\"]`).setAttribute('highlighted', 'true');\n  switch (tabCode) {\n    case 0:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      break;\n    case 1:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'true');\n      break;\n    case 2:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      break;\n    default:\n      break;\n  }\n}\n"],"names":["RouteField","documentQuerySelector","RouteHeadElement","elementQuerySelector","RouteNameElement","RouteButtonRightElement","RouteUpdateTimerElement","RouteGroupTabsElement","RouteGroupTabsTrayElement","RouteGroupTabLineTrackElement","RouteGroupTabLineElement","RouteGroupsElement","previousIntegration","previousAnimation","previousSkeletonScreen","routeSliding_initialIndex","routeSliding_targetIndex","routeSliding_groupQuantity","routeSliding_groupStyles","routeSliding_fieldWidth","routeSliding_sliding","routeRefreshTimer_retryInterval","routeRefreshTimer_baseInterval","routeRefreshTimer_minInterval","routeRefreshTimer_dynamicInterval","routeRefreshTimer_dynamic","routeRefreshTimer_streaming","routeRefreshTimer_lastUpdate","routeRefreshTimer_nextUpdate","routeRefreshTimer_refreshing","routeRefreshTimer_currentRequestID","routeRefreshTimer_currentProgress","routeRefreshTimer_targetProgress","routeRefreshTimer_streamStarted","currentRouteIDSet_RouteID","currentRouteIDSet_PathAttributeId","tabPadding","initializeRouteSliding","addEventListener","Math","round","scrollLeft","passive","event","currentIndex","target","initialSize","concat","width","offset","targetSize","tabWidth","abs","updateRouteCSS","ResizeRouteField","WindowSize","querySize","FieldWidth","FieldHeight","height","style","setProperty","groupQuantity","tabLineWidth","percentage","toString","toFixed","updateUpdateTimer","time","Date","getTime","getDataReceivingProgress","min","max","window","requestAnimationFrame","generateElementOfThreadBox","identifier","generateIdentifier","element","document","createElement","classList","add","id","setAttribute","innerHTML","generateElementOfItem","threadBoxIdentifier","getIconHTML","generateElementOfGroup","tracksElement","threadTrackElement","itemsTrackElement","appendChild","updateRouteField","integration","skeletonScreen","animation","updateItem","thisItemElement","thisThreadBoxElement","thisItem","previousItem","updateStatus","thisThreadStatusElement","currentThreadSlideElement","nextThreadSlideElement","thisItemStatusElement","currentItemSlideElement","nextItemSlideElememt","status","code","innerText","text","thisItemElementRect","getBoundingClientRect","top","left","bottom","right","windowWidth","innerWidth","windowHeight","innerHeight","remove","once","updateSegmentBuffer","booleanToString","segmentBuffer","isSegmentBuffer","updateName","name","updateBuses","buses","length","map","bus","onThisRoute","carNumber","RouteName","type","join","updateOverlappingRoutes","overlappingRoutes","route","RouteEndPoints","html","RouteID","PathAttributeId","updateBusArrivalTimes","busArrivalTimes","busArrivalTime","personalSchedule","indexToDay","day","timeObjectToString","period","start","end","chart","updateNearest","nearest","updateThread","previousProgress","progress","thisProgress","thisThreadElement","updateStretch","updateAnimation","updateSkeletonScreen","updateSaveToFolderButton","saveToFolderButtonElement","isFolderContentSaved","then","e","updateScheduleNotificationButton","scheduleNotificationButtonElement","havingNotifcationSchedules","stopHasNotifcationSchedules","compareThings","itemQuantity","groupedItems","cumulativeOffset","i","getTextWidth","RouteDestination","RouteDeparture","currentGroupSeatQuantity","elementQuerySelectorAll","capacity","newGroupsFragment","DocumentFragment","newTabsFragment","o","newGroupElement","newTabElement","append","GroupElements","TabElements","groupIndex","RouteGroupElements","groupKey","thisGroupElement","thisGroupItemsTrackElement","thisGroupThreadsTrackElement","currentItemSeatQuantity","newItemsFragment","newThreadsFragment","newThreadBoxElement","newItemElement","thisGroupItemElements","thisGroupThreadElements","itemIndex","thisTabElement","j","hasOwnProperty","refreshRoute","_refreshRoute","apply","arguments","playing_animation","getSettingOptionValue","refresh_interval_setting","busArrivalTimeChartSize","dynamic","baseInterval","integrateRoute","updateRate","getUpdateRate","dataUpdateTime","streamRoute","setTimeout","err","console","error","promptMessage","openRoute","pushPageHistory","logRecentView","defaultItemQuantity","floor","push","goBack","sequence","position","longitude","latitude","isStartingPoint","isEndingPoint","g_0","g_1","setUpRouteFieldSkeletonScreen","closePreviousPage","closeRoute","openPreviousPage","switchRoute","stretchRouteItemBody","itemElementID","threadBoxElementID","itemElement","itemBodyElement","threadBoxElement","getAttribute","switchRouteBodyTab","itemID","tabCode","_step","buttons","_iterator","_createForOfIteratorHelper","s","n","done","value","f"],"sourceRoot":""}