{"version":3,"file":"721107657a943f4e528e.js","mappings":"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","sources":["webpack://bus/webpack/universalModuleDefinition","webpack://bus/./src/data/analytics/bus-arrival-time/getBusArrivalTimes-worker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bus\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bus\"] = factory();\n\telse\n\t\troot[\"bus\"] = factory();\n})(self, () => {\nreturn ","import { PersonalScheduleArray } from '../../personal-schedule/index';\nimport { BusArrivalTimeDataGroupArray, BusArrivalTimes } from './index';\n\ninterface task {\n  personalSchedules: PersonalScheduleArray;\n  busArrivalTimeDataGroups: BusArrivalTimeDataGroupArray;\n  chartWidth: number;\n  chartHeight: number;\n  taskID: string;\n  port: any;\n}\n\nlet taskQueue: Array<task> = [];\nlet isProcessing: boolean = false;\n\n// Setup message handling (works for dedicated or shared workers)\nif ('onconnect' in self) {\n  self.onconnect = function (e) {\n    const port = e.ports[0];\n    port.onmessage = function (event) {\n      const [personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID] = event.data;\n      taskQueue.push({ personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port });\n      processWorkerTask();\n    };\n  };\n} else {\n  const port = self;\n  self.onmessage = function (event) {\n    const [personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID] = event.data;\n    taskQueue.push({ personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port });\n    processWorkerTask();\n  };\n}\n\n// Main processing function\nfunction processWorkerTask(): void {\n  if (isProcessing || taskQueue.length === 0) return;\n  isProcessing = true;\n\n  // Dequeue the next task\n  const { personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID, port }: task = taskQueue.shift();\n\n  const result: BusArrivalTimes = {};\n\n  // For each personalSchedule, build an SVG graph\n  for (const personalSchedule of personalSchedules) {\n    const startIndex = personalSchedule.period.start.hours * 60 + personalSchedule.period.start.minutes;\n    const endIndex = personalSchedule.period.end.hours * 60 + personalSchedule.period.end.minutes;\n    const barWidth = chartWidth / (endIndex - startIndex);\n    for (const busArrivalTimeDataGroup of busArrivalTimeDataGroups) {\n      if (personalSchedule.days.indexOf(busArrivalTimeDataGroup.day) < 0) {\n        continue;\n      }\n      const statsMax = busArrivalTimeDataGroup.max;\n      const statsArray = busArrivalTimeDataGroup.stats.slice(startIndex, endIndex);\n      const statsArrayLength = statsArray.length;\n      let pathCommand = '';\n      pathCommand += `M${chartWidth},${chartHeight}`;\n      for (let j = statsArrayLength - 1; j >= 0; j--) {\n        let x = ((j + 1) / statsArrayLength) * chartWidth; // Shift right for correct alignment\n        let y = (1 - statsArray[j] / statsMax) * chartHeight;\n        pathCommand += ` L${x},${y}`;\n        pathCommand += ` L${x - barWidth},${y}`;\n        pathCommand += ` L${x - barWidth},${chartHeight}`;\n      }\n      pathCommand += ' Z';\n      const svg = `<svg width=\"${chartWidth}\" height=\"${chartHeight}\" viewBox=\"0 0 ${chartWidth} ${chartHeight}\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"${pathCommand}\" stroke=\"none\" stroke-width=\"0\"/></svg>`;\n      const stopKey = `s_${busArrivalTimeDataGroup.id}`;\n      if (!result.hasOwnProperty(stopKey)) {\n        result[stopKey] = [];\n      }\n      result[stopKey].push({\n        personalSchedule: personalSchedule,\n        chart: svg,\n        day: busArrivalTimeDataGroup.day\n      });\n    }\n  }\n\n  // Send the complete HTML back to the main thread\n  port.postMessage([result, taskID]);\n\n  isProcessing = false;\n  processWorkerTask(); // Process next task in the queue if any\n}\n"],"names":["root","factory","exports","module","define","amd","self","taskQueue","isProcessing","onconnect","e","port","ports","onmessage","event","_event$data","_slicedToArray","data","personalSchedules","busArrivalTimeDataGroups","chartWidth","chartHeight","taskID","push","processWorkerTask","_event$data2","length","_step","_taskQueue$shift","shift","result","_iterator","_createForOfIteratorHelper","s","n","done","_step2","personalSchedule","value","startIndex","period","start","hours","minutes","endIndex","end","barWidth","_iterator2","busArrivalTimeDataGroup","days","indexOf","day","statsMax","max","statsArray","stats","slice","statsArrayLength","pathCommand","concat","j","x","y","svg","stopKey","id","hasOwnProperty","chart","err","f","postMessage"],"sourceRoot":""}