{"version":3,"file":"a76a4637c74508deea19.js","mappings":"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","sources":["webpack://bus/./src/interface/route/index.ts"],"sourcesContent":["import { IntegratedRoute, integratedStopItem, integrateRoute } from '../../data/route/index';\nimport { getIconHTML } from '../icons/index';\nimport { DataReceivingProgressEvent, getDataReceivingProgress } from '../../data/apis/loader';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../tools/index';\nimport { getTextWidth } from '../../tools/graphic';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll, getElementsBelow } from '../../tools/query-selector';\nimport { getUpdateRate } from '../../data/analytics/update-rate/index';\nimport { isFolderContentSaved } from '../../data/folder/index';\nimport { GeneratedElement, pushPageHistory, closePreviousPage, openPreviousPage, GroupStyles, querySize } from '../index';\nimport { promptMessage } from '../prompt/index';\nimport { indexToDay, timeObjectToString } from '../../tools/time';\nimport { logRecentView } from '../../data/recent-views/index';\nimport { stopHasNotifcationSchedules } from '../../data/notification/index';\n\nconst RouteField = documentQuerySelector('.css_route_field');\nconst RouteHeadElement = elementQuerySelector(RouteField, '.css_route_head');\nconst RouteNameElement = elementQuerySelector(RouteHeadElement, '.css_route_name');\nconst RouteButtonRightElement = elementQuerySelector(RouteHeadElement, '.css_route_button_right');\nconst RouteUpdateTimerElement = elementQuerySelector(RouteHeadElement, '.css_route_update_timer_box .css_route_update_timer');\nconst RouteGroupTabsElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tabs');\nconst RouteGroupTabsTrayElement = elementQuerySelector(RouteGroupTabsElement, '.css_route_group_tabs_tray');\nconst RouteGroupTabLineTrackElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tab_line_track');\nconst RouteGroupTabLineElement = elementQuerySelector(RouteGroupTabLineTrackElement, '.css_route_group_tab_line');\nconst RouteGroupsElement = elementQuerySelector(RouteField, '.css_route_groups');\n\nlet previousIntegration = {} as IntegratedRoute;\nlet previousAnimation: boolean = true;\nlet previousSkeletonScreen: boolean = false;\n\nlet routeSliding_initialIndex: number = 0;\nlet routeSliding_targetIndex: number = 0;\nlet routeSliding_groupQuantity: number = 0;\nlet routeSliding_groupStyles: GroupStyles = {};\nlet routeSliding_fieldWidth: number = 0;\nlet routeSliding_fieldHeight: number = 0;\nlet routeSliding_sliding: boolean = false;\n\nlet routeRefreshTimer_retryInterval: number = 10 * 1000;\nlet routeRefreshTimer_baseInterval: number = 15 * 1000;\nlet routeRefreshTimer_minInterval: number = 5 * 1000;\nlet routeRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet routeRefreshTimer_dynamic: boolean = true;\nlet routeRefreshTimer_streaming: boolean = false;\nlet routeRefreshTimer_lastUpdate: number = 0;\nlet routeRefreshTimer_nextUpdate: number = 0;\nlet routeRefreshTimer_refreshing: boolean = false;\nlet routeRefreshTimer_currentRequestID: string = '';\nlet routeRefreshTimer_currentProgress: number = -1;\nlet routeRefreshTimer_streamStarted: boolean = false;\nvar routeRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nlet currentRouteIDSet_RouteID: number = 0;\nlet currentRouteIDSet_PathAttributeId: Array<number> = [];\n\nlet tabPadding: number = 20;\n\nexport function initializeRouteSliding(): void {\n  RouteGroupsElement.addEventListener(\n    'touchstart',\n    function () {\n      routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n    },\n    { passive: true }\n  );\n\n  RouteGroupsElement.addEventListener(\n    'scroll',\n    function (event: Event) {\n      routeSliding_sliding = true;\n      const target = event.target as HTMLElement;\n      const currentIndex = target.scrollLeft / routeSliding_fieldWidth;\n      if (currentIndex > routeSliding_initialIndex) {\n        routeSliding_targetIndex = routeSliding_initialIndex + 1;\n      } else {\n        routeSliding_targetIndex = routeSliding_initialIndex - 1;\n      }\n      const initialSize = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`] || { width: 0, offset: 0 };\n      const targetSize = routeSliding_groupStyles[`g_${routeSliding_targetIndex}`] || { width: 0, offset: 0 };\n      const tabWidth = initialSize.width + (targetSize.width - initialSize.width) * Math.abs(currentIndex - routeSliding_initialIndex);\n      const offset = (initialSize.offset + (targetSize.offset - initialSize.offset) * Math.abs(currentIndex - routeSliding_initialIndex)) * -1 + routeSliding_fieldWidth * 0.5 - tabWidth * 0.5;\n\n      updateRouteCSS(routeSliding_groupQuantity, offset, tabWidth - tabPadding, currentIndex);\n\n      if (currentIndex === routeSliding_targetIndex) {\n        routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n        routeSliding_sliding = false;\n      }\n    },\n    { passive: true }\n  );\n}\n\nexport function ResizeRouteField(): void {\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  RouteField.style.setProperty('--b-cssvar-route-field-width', `${FieldWidth}px`);\n  RouteField.style.setProperty('--b-cssvar-route-field-height', `${FieldHeight}px`);\n}\n\nexport function updateRouteCSS(groupQuantity: number, offset: number, tabLineWidth: number, percentage: number): void {\n  RouteGroupsElement.style.setProperty('--b-cssvar-route-group-quantity', groupQuantity.toString());\n  RouteGroupTabLineElement.style.setProperty('--b-cssvar-route-tab-line-width-scale', tabLineWidth.toString());\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-tabs-tray-offset', `${offset.toFixed(5)}px`);\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-percentage', percentage.toFixed(5));\n}\n\nfunction updateUpdateTimer(): void {\n  const time = new Date().getTime();\n  routeRefreshTimer_currentProgress = -1 * Math.min(1, Math.max(0, Math.abs(time - routeRefreshTimer_lastUpdate) / routeRefreshTimer_dynamicInterval));\n  RouteUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', routeRefreshTimer_currentProgress.toString());\n  window.requestAnimationFrame(function () {\n    if (routeRefreshTimer_streaming && !routeRefreshTimer_refreshing) {\n      updateUpdateTimer();\n    }\n  });\n}\n\nfunction handleDataReceivingProgressUpdates(event: Event): void {\n  const CustomEvent = event as DataReceivingProgressEvent;\n  if (routeRefreshTimer_refreshing) {\n    routeRefreshTimer_currentProgress = -1 + getDataReceivingProgress(routeRefreshTimer_currentRequestID);\n    RouteUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', routeRefreshTimer_currentProgress.toString());\n  }\n  if (CustomEvent.detail.stage === 'end') {\n    document.removeEventListener(CustomEvent.detail.target, handleDataReceivingProgressUpdates);\n  }\n}\n\nfunction generateElementOfThreadBox(): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_thread_box');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.setAttribute('stretching', 'false');\n  element.setAttribute('push-direction', '0'); // 0: normal state, 1: downward, 2: upward\n  element.setAttribute('push-state', '0'); // 0: normal state, 1: compensation , 2: transition\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_thread\"></div><div class=\"css_route_group_thread_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfItem(threadBoxIdentifier: string): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_item');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.setAttribute('stretching', 'false');\n  element.setAttribute('push-direction', '0'); // 0: normal state, 1: downward, 2: upward\n  element.setAttribute('push-state', '0'); // 0: normal state, 1: compensation , 2: transition\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_item_head\"><div class=\"css_route_group_item_name\"></div><div class=\"css_route_group_item_capsule\"><div class=\"css_route_group_item_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div><div class=\"css_route_group_item_stretch\" onclick=\"bus.route.stretchRouteItem('${identifier}', '${threadBoxIdentifier}')\">${getIconHTML('keyboard_arrow_down')}</div><div class=\"css_route_group_item_capsule_separator\"></div></div></div><div class=\"css_route_group_item_body\" displayed=\"false\"><div class=\"css_route_group_item_buttons\"><div class=\"css_route_group_item_button\" highlighted=\"true\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 0)\" code=\"0\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('directions_bus')}</div>公車</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 1)\" code=\"1\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('departure_board')}</div>抵達時間</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 2)\" code=\"2\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('route')}</div>路線</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 3)\" code=\"3\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('location_on')}</div>地點</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"save-to-folder\" onclick=\"bus.folder.openSaveToFolder('stop-on-route', ['${identifier}', null, null])\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('folder')}</div>儲存至資料夾</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"schedule-notification\" onclick=\"bus.notification.openScheduleNotification('stop-on-route', ['${identifier}', null, null, null])\" enabled=\"true\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('notifications')}</div>設定到站通知</div></div><div class=\"css_route_group_item_buses\" displayed=\"true\"></div><div class=\"css_route_group_item_overlapping_routes\" displayed=\"false\"></div><div class=\"css_route_group_item_bus_arrival_times\" displayed=\"false\"></div><div class=\"css_route_group_item_nearby_locations\" displayed=\"false\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfGroup(): GeneratedElement {\n  // const identifier = generateIdentifier('g');\n  const element = document.createElement('div');\n  element.classList.add('css_route_group');\n  // element.id = identifier;\n  const tracksElement = document.createElement('div');\n  tracksElement.classList.add('css_route_group_tracks');\n\n  const threadTrackElement = document.createElement('div');\n  threadTrackElement.classList.add('css_route_group_threads_track');\n\n  const threadBoxSpace = document.createElement('div');\n  threadBoxSpace.classList.add('css_route_group_thread_box_space_top');\n\n  const itemsTrackElement = document.createElement('div');\n  itemsTrackElement.classList.add('css_route_group_items_track');\n\n  const itemSpaceElement = document.createElement('div');\n  itemSpaceElement.classList.add('css_route_group_item_space_top');\n\n  itemsTrackElement.appendChild(itemSpaceElement);\n  threadTrackElement.appendChild(threadBoxSpace);\n  tracksElement.appendChild(threadTrackElement);\n  tracksElement.appendChild(itemsTrackElement);\n  element.appendChild(tracksElement);\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction generateElementOfTab(): GeneratedElement {\n  var identifier = generateIdentifier('t');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_tab');\n  element.id = identifier;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction setUpRouteFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const defaultItemQuantity: number = Math.floor(FieldHeight / 50) + 5;\n  const defaultGroupQuantity = 2;\n  let groupedItems: IntegratedRoute['groupedItems'] = {};\n  for (let i = 0; i < defaultGroupQuantity; i++) {\n    const groupKey: string = `g_${i}`;\n    groupedItems[groupKey] = [];\n    for (let j = 0; j < defaultItemQuantity; j++) {\n      groupedItems[groupKey].push({\n        name: '',\n        goBack: '0',\n        status: { code: 8, text: '', time: -6 },\n        buses: [],\n        overlappingRoutes: [],\n        busArrivalTimes: [],\n        nearbyLocations: [],\n        sequence: j,\n        position: {\n          longitude: 0,\n          latitude: 0\n        },\n        nearest: false,\n        progress: 0,\n        segmentBuffer: {\n          isSegmentBuffer: false,\n          isStartingPoint: false,\n          isEndingPoint: false\n        },\n        id: 0\n      });\n    }\n  }\n  updateRouteField(\n    {\n      groupedItems: groupedItems,\n      groupQuantity: defaultGroupQuantity,\n      itemQuantity: {\n        g_0: defaultItemQuantity,\n        g_1: defaultItemQuantity\n      },\n      RouteName: '載入中',\n      RouteEndPoints: {\n        RouteDeparture: '載入中',\n        RouteDestination: '載入中'\n      },\n      RouteID: 0,\n      PathAttributeId: [],\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction updateRouteField(integration: IntegratedRoute, skeletonScreen: boolean, animation: boolean): void {\n  function updateItem(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, skeletonScreen: boolean, animation: boolean): void {\n    function updateStatus(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, skeletonScreen: boolean, animation: boolean): void {\n      const thisThreadStatusElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread_status');\n      const currentThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_current_slide');\n      const nextThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_next_slide');\n\n      const thisItemStatusElement = elementQuerySelector(thisItemElement, '.css_route_group_item_status');\n      const currentItemSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n      const nextItemSlideElememt = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n\n      nextThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n\n      nextItemSlideElememt.setAttribute('code', thisItem.status.code.toString());\n      nextItemSlideElememt.innerText = thisItem.status.text;\n\n      if (!skeletonScreen) {\n        if (animation) {\n          const thisItemElementRect = thisItemElement.getBoundingClientRect();\n          const top = thisItemElementRect.top;\n          const left = thisItemElementRect.left;\n          const bottom = thisItemElementRect.bottom;\n          const right = thisItemElementRect.right;\n          const windowWidth = window.innerWidth;\n          const windowHeight = window.innerHeight;\n          if (bottom > 0 && top < windowHeight && right > 0 && left < windowWidth) {\n            currentThreadSlideElement.addEventListener(\n              'animationend',\n              function () {\n                currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n                currentThreadSlideElement.classList.remove('css_slide_fade_out');\n              },\n              { once: true }\n            );\n            currentItemSlideElement.addEventListener(\n              'animationend',\n              function () {\n                currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n                currentItemSlideElement.innerText = thisItem.status.text;\n                currentItemSlideElement.classList.remove('css_slide_fade_out');\n              },\n              { once: true }\n            );\n            currentThreadSlideElement.classList.add('css_slide_fade_out');\n            currentItemSlideElement.classList.add('css_slide_fade_out');\n            return;\n          }\n        }\n      }\n\n      currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n      currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n      currentItemSlideElement.innerText = thisItem.status.text;\n    }\n\n    function updateSegmentBuffer(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n      thisThreadBoxElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n    }\n\n    function updateName(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_name').innerText = thisItem.name;\n    }\n\n    function updateBuses(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_buses').innerHTML = thisItem.buses.length === 0 ? '<div class=\"css_route_group_item_buses_message\">目前沒有公車可顯示</div>' : thisItem.buses.map((bus) => `<div class=\"css_route_group_item_bus\" on-this-route=\"${bus.onThisRoute}\"><div class=\"css_route_group_item_bus_title\"><div class=\"css_route_group_item_bus_icon\">${getIconHTML('directions_bus')}</div><div class=\"css_route_group_item_bus_car_number\">${bus.carNumber}</div></div><div class=\"css_route_group_item_bus_attributes\"><div class=\"css_route_group_item_bus_route\">路線：${bus.RouteName}</div><div class=\"css_route_group_item_bus_car_status\">狀態：${bus.status.text}</div><div class=\"css_route_group_item_bus_car_type\">類型：${bus.type}</div></div></div>`).join('');\n    }\n\n    function updateOverlappingRoutes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_overlapping_routes').innerHTML = thisItem.overlappingRoutes.length === 0 ? '<div class=\"css_route_group_item_overlapping_route_message\">目前沒有路線可顯示</div>' : thisItem.overlappingRoutes.map((route) => `<div class=\"css_route_group_item_overlapping_route\"><div class=\"css_route_group_item_overlapping_route_title\"><div class=\"css_route_group_item_overlapping_route_icon\">${getIconHTML('route')}</div><div class=\"css_route_group_item_overlapping_route_name\">${route.name}</div></div><div class=\"css_route_group_item_overlapping_route_endpoints\">${route.RouteEndPoints.html}</div><div class=\"css_route_group_item_overlapping_route_actions\"><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.route.switchRoute(${route.RouteID}, [${route.PathAttributeId.join(',')}])\">查看路線</div><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.folder.openSaveToFolder('route-on-route', [${route.RouteID}])\">收藏路線</div></div></div>`).join('');\n    }\n\n    function updateBusArrivalTimes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_bus_arrival_times').innerHTML = thisItem.busArrivalTimes.length === 0 ? '<div class=\"css_route_group_item_bus_arrival_message\">目前沒有抵達時間可顯示</div>' : thisItem.busArrivalTimes.map((busArrivalTime) => `<div class=\"css_route_group_item_bus_arrival_time\"><div class=\"css_route_group_item_bus_arrival_time_title\"><div class=\"css_route_group_item_bus_arrival_time_icon\">${getIconHTML('calendar_view_day')}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_name\">${busArrivalTime.personalSchedule.name}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_time\">週${indexToDay(busArrivalTime.day).name} ${timeObjectToString(busArrivalTime.personalSchedule.period.start)} - ${timeObjectToString(busArrivalTime.personalSchedule.period.end)}</div></div><div class=\"css_route_group_item_bus_arrival_time_chart\">${busArrivalTime.chart}</div></div>`).join('');\n    }\n\n    function updateNearbyLocations(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_nearby_locations').innerHTML = thisItem.nearbyLocations.length === 0 ? '<div class=\"css_route_group_item_nearby_locations_message\">目前沒有地點可顯示</div>' : thisItem.nearbyLocations.map((nearbyLocation) => `<div class=\"css_route_group_item_nearby_location\"><div class=\"css_route_group_item_nearby_location_title\"><div class=\"css_route_group_item_nearby_location_icon\">${getIconHTML('location_on')}</div><div class=\"css_route_group_item_nearby_location_name\">${nearbyLocation.name}</div></div><div class=\"css_route_group_item_nearby_location_distance\">${nearbyLocation.distance}公尺</div><div class=\"css_route_group_item_nearby_location_actions\"><div class=\"css_route_group_item_nearby_location_action_button\" onclick=\"bus.location.openLocation('${nearbyLocation.hash}')\">查看地點</div><div class=\"css_route_group_item_nearby_location_action_button\">收藏地點</div></div></div>`).join('');\n    }\n\n    function updateNearest(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n      thisThreadBoxElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n    }\n\n    function updateThread(thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, skeletonScreen: boolean, animation: boolean): void {\n      const previousProgress = previousItem?.progress || 0;\n      const thisProgress = thisItem?.progress || 0;\n      const thisThreadElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread');\n      if (!skeletonScreen) {\n        if (animation) {\n          if (previousProgress !== 0 && thisProgress === 0 && Math.abs(thisProgress - previousProgress) > 0) {\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', '100%');\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', '100%');\n            thisThreadElement.addEventListener(\n              'transitionend',\n              function () {\n                thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', '0%');\n                thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', '0%');\n              },\n              { once: true }\n            );\n            return;\n          }\n        }\n      }\n      thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', '0%');\n      thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${thisProgress * 100}%`);\n    }\n\n    function updateStretch(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      if (skeletonScreen) {\n        const thisItemBodyElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body');\n        thisItemBodyElement.setAttribute('displayed', 'false');\n        thisItemElement.setAttribute('stretched', 'false');\n        thisThreadBoxElement.setAttribute('stretched', 'false');\n      }\n    }\n\n    function updateAnimation(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, animation: boolean): void {\n      thisItemElement.setAttribute('animation', booleanToString(animation));\n      thisThreadBoxElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      thisItemElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n      thisThreadBoxElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    function updateSaveToFolderButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const saveToFolderButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"save-to-folder\"]');\n      saveToFolderButtonElement.setAttribute('onclick', `bus.folder.openSaveToFolder('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}])`);\n      isFolderContentSaved('stop', thisItem.id).then((e) => {\n        saveToFolderButtonElement.setAttribute('highlighted', booleanToString(e));\n      });\n    }\n\n    function updateScheduleNotificationButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const scheduleNotificationButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"schedule-notification\"]');\n      scheduleNotificationButtonElement.setAttribute('onclick', `bus.notification.openScheduleNotification('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}, ${thisItem.status.time}])`);\n      const havingNotifcationSchedules = stopHasNotifcationSchedules(thisItem.id);\n      scheduleNotificationButtonElement.setAttribute('highlighted', booleanToString(havingNotifcationSchedules));\n    }\n\n    if (previousItem === null) {\n      updateStatus(thisItemElement, thisThreadBoxElement, thisItem, skeletonScreen, animation);\n      updateName(thisItemElement, thisItem);\n      updateBuses(thisItemElement, thisItem);\n      updateOverlappingRoutes(thisItemElement, thisItem);\n      updateBusArrivalTimes(thisItemElement, thisItem);\n      updateNearbyLocations(thisItemElement, thisItem);\n      updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      updateThread(thisThreadBoxElement, thisItem, previousItem, skeletonScreen, animation);\n      updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateSaveToFolderButton(thisItemElement, thisItem);\n      updateScheduleNotificationButton(thisItemElement, thisItem);\n    } else {\n      if (!(thisItem.status.time === previousItem.status.time)) {\n        updateStatus(thisItemElement, thisThreadBoxElement, thisItem, skeletonScreen, animation);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.buses, thisItem.buses)) {\n        updateBuses(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.busArrivalTimes, thisItem.busArrivalTimes)) {\n        updateBusArrivalTimes(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.segmentBuffer, thisItem.segmentBuffer)) {\n        updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.nearest === thisItem.nearest)) {\n        updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.progress === thisItem.progress)) {\n        updateThread(thisThreadBoxElement, thisItem, previousItem, skeletonScreen, animation);\n      }\n      if (!(previousItem.id === thisItem.id)) {\n        updateName(thisItemElement, thisItem);\n        updateOverlappingRoutes(thisItemElement, thisItem);\n        updateNearbyLocations(thisItemElement, thisItem);\n        updateSaveToFolderButton(thisItemElement, thisItem);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!(animation === previousAnimation)) {\n        updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      }\n      if (!(skeletonScreen === previousSkeletonScreen)) {\n        updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n        updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      }\n    }\n  }\n\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n\n  const groupQuantity = integration.groupQuantity;\n  const itemQuantity = integration.itemQuantity;\n  const groupedItems = integration.groupedItems;\n\n  routeSliding_groupQuantity = groupQuantity;\n  routeSliding_fieldWidth = FieldWidth;\n  routeSliding_fieldHeight = FieldHeight;\n\n  let cumulativeOffset = 0;\n  for (let i = 0; i < groupQuantity; i++) {\n    const width = getTextWidth([integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `往${e}`)[i], 500, '17px', `\"Noto Sans TC\", sans-serif`) + tabPadding;\n    routeSliding_groupStyles[`g_${i}`] = {\n      width: width,\n      offset: cumulativeOffset\n    };\n    cumulativeOffset += width;\n  }\n  const offset = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].offset * -1 + routeSliding_fieldWidth * 0.5 - routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width * 0.5;\n  if (!routeSliding_sliding) {\n    updateRouteCSS(routeSliding_groupQuantity, offset, routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width - tabPadding, routeSliding_initialIndex);\n  }\n\n  RouteNameElement.innerHTML = /*html*/ `<span>${integration.RouteName}</span>`;\n  RouteNameElement.setAttribute('animation', booleanToString(animation));\n  RouteNameElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabsElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabsElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabLineTrackElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabLineTrackElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteButtonRightElement.setAttribute('onclick', `bus.route.openRouteDetails(${integration.RouteID}, [${integration.PathAttributeId.join(',')}])`);\n\n  const currentGroupSeatQuantity = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group').length;\n  if (!(groupQuantity === currentGroupSeatQuantity)) {\n    const capacity = currentGroupSeatQuantity - groupQuantity;\n    if (capacity < 0) {\n      const newGroupsFragment = new DocumentFragment();\n      const newTabsFragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newGroupElement = generateElementOfGroup();\n        newGroupsFragment.appendChild(newGroupElement.element);\n        const newTabElement = generateElementOfTab();\n        newTabsFragment.appendChild(newTabElement.element);\n      }\n      RouteGroupsElement.append(newGroupsFragment);\n      RouteGroupTabsTrayElement.append(newTabsFragment);\n    } else {\n      const GroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n      const TabElements = elementQuerySelectorAll(RouteGroupTabsTrayElement, '.css_route_group_tab');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const groupIndex = currentGroupSeatQuantity - 1 - o;\n        GroupElements[groupIndex].remove();\n        TabElements[groupIndex].remove();\n      }\n    }\n  }\n\n  const RouteGroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const thisGroupElement = RouteGroupElements[i];\n    const thisGroupItemsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_items_track');\n    const thisGroupThreadsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_threads_track');\n    const currentItemSeatQuantity = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item').length;\n    if (!(itemQuantity[groupKey] === currentItemSeatQuantity)) {\n      const capacity = currentItemSeatQuantity - itemQuantity[groupKey];\n      if (capacity < 0) {\n        const newItemsFragment = new DocumentFragment();\n        const newThreadsFragment = new DocumentFragment();\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newThreadBoxElement = generateElementOfThreadBox();\n          const newItemElement = generateElementOfItem(newThreadBoxElement.id);\n          newItemsFragment.appendChild(newItemElement.element);\n          newThreadsFragment.appendChild(newThreadBoxElement.element);\n        }\n        thisGroupItemsTrackElement.append(newItemsFragment);\n        thisGroupThreadsTrackElement.append(newThreadsFragment);\n      } else {\n        const thisGroupItemElements = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item');\n        const thisGroupThreadElements = elementQuerySelectorAll(thisGroupThreadsTrackElement, '.css_route_group_thread_box');\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          thisGroupItemElements[itemIndex].remove();\n          thisGroupThreadElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  const TabElements = elementQuerySelectorAll(RouteGroupTabsTrayElement, '.css_route_group_tab');\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n\n    const thisTabElement = TabElements[i];\n    thisTabElement.innerHTML = [integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `<span>往${e}</span>`)[i];\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-width', `${routeSliding_groupStyles[groupKey].width}px`);\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-index', i.toString());\n\n    const thisGroupElement = RouteGroupElements[i];\n    const thisGroupItemsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_items_track');\n    const thisGroupThreadsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_threads_track');\n\n    const thisGroupItemElements = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item');\n    const thisGroupThreadElements = elementQuerySelectorAll(thisGroupThreadsTrackElement, '.css_route_group_thread_box');\n\n    for (let j = 0; j < itemQuantity[groupKey]; j++) {\n      const thisItemElement = thisGroupItemElements[j];\n      const thisThreadBoxElement = thisGroupThreadElements[j];\n      const thisItem = groupedItems[groupKey][j];\n      if (previousIntegration.hasOwnProperty('groupedItems')) {\n        if (previousIntegration.groupedItems.hasOwnProperty(groupKey)) {\n          if (previousIntegration.groupedItems[groupKey][j]) {\n            const previousItem = previousIntegration.groupedItems[groupKey][j];\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, previousItem, skeletonScreen, animation);\n          } else {\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, skeletonScreen, animation);\n          }\n        } else {\n          updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, skeletonScreen, animation);\n        }\n      } else {\n        updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, skeletonScreen, animation);\n      }\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshRoute() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  const busArrivalTimeChartSize = querySize('route-bus-arrival-time-chart');\n  routeRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  routeRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  routeRefreshTimer_refreshing = true;\n  routeRefreshTimer_currentRequestID = generateIdentifier('r');\n  RouteUpdateTimerElement.setAttribute('refreshing', 'true');\n  document.addEventListener(routeRefreshTimer_currentRequestID, handleDataReceivingProgressUpdates);\n  const integration = await integrateRoute(currentRouteIDSet_RouteID, currentRouteIDSet_PathAttributeId, busArrivalTimeChartSize.width, busArrivalTimeChartSize.height, routeRefreshTimer_currentRequestID);\n  updateRouteField(integration, false, playing_animation);\n  let updateRate = 0;\n  if (routeRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  routeRefreshTimer_lastUpdate = new Date().getTime();\n  if (routeRefreshTimer_dynamic) {\n    routeRefreshTimer_nextUpdate = Math.max(routeRefreshTimer_lastUpdate + routeRefreshTimer_minInterval, integration.dataUpdateTime + routeRefreshTimer_baseInterval / updateRate);\n  } else {\n    routeRefreshTimer_nextUpdate = routeRefreshTimer_lastUpdate + routeRefreshTimer_baseInterval;\n  }\n  routeRefreshTimer_dynamicInterval = Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - routeRefreshTimer_lastUpdate);\n  routeRefreshTimer_refreshing = false;\n  RouteUpdateTimerElement.setAttribute('refreshing', 'false');\n  updateUpdateTimer();\n}\n\nexport function streamRoute(): void {\n  refreshRoute()\n    .then(function () {\n      if (routeRefreshTimer_streaming) {\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (routeRefreshTimer_streaming) {\n        promptMessage(`路線網路連線中斷，將在${routeRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, routeRefreshTimer_retryInterval);\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function openRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  pushPageHistory('Route');\n  logRecentView('route', RouteID);\n  currentRouteIDSet_RouteID = RouteID;\n  currentRouteIDSet_PathAttributeId = PathAttributeId;\n  routeSliding_initialIndex = 0;\n  RouteField.setAttribute('displayed', 'true');\n  elementQuerySelector(RouteField, '.css_route_groups').scrollLeft = 0;\n  setUpRouteFieldSkeletonScreen(RouteField);\n  if (!routeRefreshTimer_streaming) {\n    routeRefreshTimer_streaming = true;\n    if (!routeRefreshTimer_streamStarted) {\n      routeRefreshTimer_streamStarted = true;\n      streamRoute();\n    } else {\n      refreshRoute();\n    }\n    routeRefreshTimer_currentProgress = -1;\n    updateUpdateTimer();\n  }\n  closePreviousPage();\n}\n\nexport function closeRoute(): void {\n  // revokePageHistory('Route');\n  RouteField.setAttribute('displayed', 'false');\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  openPreviousPage();\n}\n\nexport function switchRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  openRoute(RouteID, PathAttributeId);\n}\n\nexport function stretchRouteItem(itemElementID: string, threadBoxElementID: string): void {\n  const itemElement = elementQuerySelector(RouteGroupsElement, `.css_route_group .css_route_group_tracks .css_route_group_items_track .css_route_group_item#${itemElementID}`);\n  const itemBodyElement = elementQuerySelector(itemElement, '.css_route_group_item_body');\n  const threadBoxElement = elementQuerySelector(RouteGroupsElement, `.css_route_group .css_route_group_tracks .css_route_group_threads_track .css_route_group_thread_box#${threadBoxElementID}`);\n\n  const itemsTrackElement = itemElement.parentElement as HTMLElement;\n  const threadTrackElement = threadBoxElement.parentElement as HTMLElement;\n\n  const elementsBelowThreadBoxElement = getElementsBelow(threadBoxElement, 'css_route_group_thread_box');\n  const elementsBelowItemElement = getElementsBelow(itemElement, 'css_route_group_item');\n\n  const elementsBelowLength = elementsBelowItemElement.length; // = elementsBelowThreadBoxElement.length\n\n  const itemsTrackElementRect = itemsTrackElement.getBoundingClientRect();\n  const itemElementRect = itemElement.getBoundingClientRect();\n  const threadTrackElementRect = threadTrackElement.getBoundingClientRect();\n  const threadBoxElementRect = threadBoxElement.getBoundingClientRect();\n\n  // const threadBoxElementX = threadBoxElementRect.left - threadTrackElementRect.left;\n  const threadBoxElementY = threadBoxElementRect.top - threadTrackElementRect.top;\n\n  // const itemElementX = itemElementRect.left - itemsTrackElementRect.left;\n  const itemElementY = itemElementRect.top - itemsTrackElementRect.top; // itemElementRect.top + scrollTop - (itemsTrackElementRect.top + scrollTop)\n\n  const stretched = itemElement.getAttribute('stretched') === 'true' ? true : false;\n  const animation = itemElement.getAttribute('animation') === 'true' ? true : false;\n\n  if (animation) {\n    const pushDirection = stretched ? '2' : '1';\n\n    // Separate the elements from the document flow while keeping its position\n    threadBoxElement.setAttribute('stretching', 'true');\n    // threadBoxElement.style.setProperty('--b-cssvar-css-route-group-thread-box-x', `${threadBoxElementX}px`);\n    threadBoxElement.style.setProperty('--b-cssvar-css-route-group-thread-box-y', `${threadBoxElementY}px`);\n\n    itemElement.setAttribute('stretching', 'true');\n    // itemElement.style.setProperty('--b-cssvar-css-route-group-item-x', `${itemElementX}px`);\n    itemElement.style.setProperty('--b-cssvar-css-route-group-item-y', `${itemElementY}px`);\n\n    // Set push direction and push state\n    for (let i = 0; i < elementsBelowLength; i++) {\n      const thisItemElement = elementsBelowItemElement[i];\n      const thisThreadBoxElement = elementsBelowThreadBoxElement[i];\n      // thisThreadBoxElement.style.setProperty('--b-cssvar-css-route-group-thread-z-index', (elementsBelowLength - i - 1).toString());\n      thisThreadBoxElement.style.setProperty('--b-cssvar-css-route-group-thread-z-index', (-1 * i - 1).toString());\n      thisThreadBoxElement.setAttribute('push-direction', pushDirection);\n      thisThreadBoxElement.setAttribute('push-state', '1');\n      thisItemElement.setAttribute('push-direction', pushDirection);\n      thisItemElement.setAttribute('push-state', '1');\n    }\n\n    itemElement.addEventListener(\n      'transitionend',\n      function () {\n        // Reset the push direction and push state\n        for (let i = 0; i < elementsBelowLength; i++) {\n          const thisItemElement = elementsBelowItemElement[i];\n          const thisThreadBoxElement = elementsBelowThreadBoxElement[i];\n          thisThreadBoxElement.setAttribute('push-direction', '0');\n          thisThreadBoxElement.setAttribute('push-state', '0');\n          thisItemElement.setAttribute('push-direction', '0');\n          thisItemElement.setAttribute('push-state', '0');\n        }\n        // Deposit the element\n        threadBoxElement.setAttribute('stretching', 'false');\n        itemElement.setAttribute('stretching', 'false');\n      },\n      { once: true }\n    );\n\n    itemElement.addEventListener(\n      'transitionstart',\n      function () {\n        // Transition the elements below\n        for (let i = 0; i < elementsBelowLength; i++) {\n          const thisItemElement = elementsBelowItemElement[i];\n          const thisThreadBoxElement = elementsBelowThreadBoxElement[i];\n          thisThreadBoxElement.setAttribute('push-state', '2');\n          thisItemElement.setAttribute('push-state', '2');\n        }\n      },\n      { once: true }\n    );\n  }\n\n  // Switch the state of the stretching element\n  if (stretched) {\n    if (animation) {\n      itemBodyElement.addEventListener(\n        'transitionend',\n        function () {\n          itemBodyElement.setAttribute('displayed', 'false');\n        },\n        { once: true }\n      );\n    } else {\n      itemBodyElement.setAttribute('displayed', 'false');\n    }\n    itemElement.setAttribute('stretched', 'false');\n    threadBoxElement.setAttribute('stretched', 'false');\n  } else {\n    itemBodyElement.setAttribute('displayed', 'true');\n    itemElement.setAttribute('stretched', 'true');\n    threadBoxElement.setAttribute('stretched', 'true');\n  }\n}\n\nexport function switchRouteBodyTab(itemID: string, tabCode: number): void {\n  const itemElement = elementQuerySelector(RouteGroupsElement, `.css_route_group_item#${itemID}`);\n  const buttons = elementQuerySelector(itemElement, '.css_route_group_item_buttons');\n  const button = elementQuerySelectorAll(buttons, '.css_route_group_item_button[highlighted=\"true\"][type=\"tab\"]');\n  for (const t of button) {\n    t.setAttribute('highlighted', 'false');\n  }\n  elementQuerySelector(buttons, `.css_route_group_item_button[code=\"${tabCode}\"]`).setAttribute('highlighted', 'true');\n  switch (tabCode) {\n    case 0:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_nearby_locations').setAttribute('displayed', 'false');\n      break;\n    case 1:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_nearby_locations').setAttribute('displayed', 'false');\n      break;\n    case 2:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_nearby_locations').setAttribute('displayed', 'false');\n      break;\n    case 3:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_nearby_locations').setAttribute('displayed', 'true');\n      break;\n    default:\n      break;\n  }\n}\n"],"names":["RouteField","documentQuerySelector","RouteHeadElement","elementQuerySelector","RouteNameElement","RouteButtonRightElement","RouteUpdateTimerElement","RouteGroupTabsElement","RouteGroupTabsTrayElement","RouteGroupTabLineTrackElement","RouteGroupTabLineElement","RouteGroupsElement","previousIntegration","previousAnimation","previousSkeletonScreen","routeSliding_initialIndex","routeSliding_targetIndex","routeSliding_groupQuantity","routeSliding_groupStyles","routeSliding_fieldWidth","routeSliding_sliding","routeRefreshTimer_retryInterval","routeRefreshTimer_baseInterval","routeRefreshTimer_minInterval","routeRefreshTimer_dynamicInterval","routeRefreshTimer_dynamic","routeRefreshTimer_streaming","routeRefreshTimer_lastUpdate","routeRefreshTimer_nextUpdate","routeRefreshTimer_refreshing","routeRefreshTimer_currentRequestID","routeRefreshTimer_currentProgress","routeRefreshTimer_streamStarted","currentRouteIDSet_RouteID","currentRouteIDSet_PathAttributeId","tabPadding","initializeRouteSliding","addEventListener","Math","round","scrollLeft","passive","event","currentIndex","target","initialSize","width","offset","targetSize","tabWidth","abs","updateRouteCSS","ResizeRouteField","WindowSize","querySize","FieldWidth","FieldHeight","height","style","setProperty","groupQuantity","tabLineWidth","percentage","toString","toFixed","updateUpdateTimer","time","Date","getTime","min","max","window","requestAnimationFrame","handleDataReceivingProgressUpdates","CustomEvent","getDataReceivingProgress","detail","stage","document","removeEventListener","generateElementOfThreadBox","identifier","generateIdentifier","element","createElement","classList","add","id","setAttribute","innerHTML","generateElementOfItem","threadBoxIdentifier","getIconHTML","generateElementOfGroup","tracksElement","threadTrackElement","threadBoxSpace","itemsTrackElement","itemSpaceElement","appendChild","updateRouteField","integration","skeletonScreen","animation","updateItem","thisItemElement","thisThreadBoxElement","thisItem","previousItem","updateStatus","thisThreadStatusElement","currentThreadSlideElement","nextThreadSlideElement","thisItemStatusElement","currentItemSlideElement","nextItemSlideElememt","status","code","innerText","text","thisItemElementRect","getBoundingClientRect","top","left","bottom","right","windowWidth","innerWidth","windowHeight","innerHeight","remove","once","updateSegmentBuffer","booleanToString","segmentBuffer","isSegmentBuffer","updateName","name","updateBuses","buses","length","map","bus","onThisRoute","carNumber","RouteName","type","join","updateOverlappingRoutes","overlappingRoutes","route","RouteEndPoints","html","RouteID","PathAttributeId","updateBusArrivalTimes","busArrivalTimes","busArrivalTime","personalSchedule","indexToDay","day","timeObjectToString","period","start","end","chart","updateNearbyLocations","nearbyLocations","nearbyLocation","distance","hash","updateNearest","nearest","updateThread","previousProgress","progress","thisProgress","thisThreadElement","updateStretch","updateAnimation","updateSkeletonScreen","updateSaveToFolderButton","saveToFolderButtonElement","isFolderContentSaved","then","e","updateScheduleNotificationButton","scheduleNotificationButtonElement","havingNotifcationSchedules","stopHasNotifcationSchedules","compareThings","itemQuantity","groupedItems","cumulativeOffset","i","getTextWidth","RouteDestination","RouteDeparture","currentGroupSeatQuantity","elementQuerySelectorAll","capacity","newGroupsFragment","DocumentFragment","newTabsFragment","o","newGroupElement","newTabElement","append","GroupElements","TabElements","groupIndex","RouteGroupElements","groupKey","thisGroupElement","thisGroupItemsTrackElement","thisGroupThreadsTrackElement","currentItemSeatQuantity","newItemsFragment","newThreadsFragment","newThreadBoxElement","newItemElement","thisGroupItemElements","thisGroupThreadElements","itemIndex","thisTabElement","j","hasOwnProperty","refreshRoute","_refreshRoute","apply","arguments","playing_animation","getSettingOptionValue","refresh_interval_setting","busArrivalTimeChartSize","dynamic","baseInterval","integrateRoute","updateRate","getUpdateRate","dataUpdateTime","streamRoute","setTimeout","err","console","error","promptMessage","openRoute","pushPageHistory","logRecentView","defaultItemQuantity","floor","push","goBack","sequence","position","longitude","latitude","isStartingPoint","isEndingPoint","g_0","g_1","setUpRouteFieldSkeletonScreen","closePreviousPage","closeRoute","openPreviousPage","switchRoute","stretchRouteItem","itemElementID","threadBoxElementID","itemElement","itemBodyElement","threadBoxElement","parentElement","elementsBelowThreadBoxElement","getElementsBelow","elementsBelowItemElement","elementsBelowLength","itemsTrackElementRect","itemElementRect","threadTrackElementRect","threadBoxElementY","itemElementY","stretched","getAttribute","pushDirection","switchRouteBodyTab","itemID","tabCode","_step","buttons","_iterator","_createForOfIteratorHelper","s","n","done","value","f"],"sourceRoot":""}