{"version":3,"file":"31b97b700f3bac23f88d.js","mappings":"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","sources":["webpack://bus/./src/interface/home/folders/index.ts"],"sourcesContent":["import { Folder, integratedFolderContent, integratedFolders, integrateFolders } from '../../../data/folder/index';\nimport { FieldSize, GeneratedElement } from '../../index';\nimport { getIconHTML } from '../../icons/index';\nimport { getSettingOptionValue, SettingSelectOptionBooleanValue, SettingSelectOptionRefreshIntervalValue } from '../../../data/settings/index';\nimport { getUpdateRate } from '../../../data/analytics/update-rate/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../../tools/query-selector';\nimport { booleanToString, compareThings, generateIdentifier } from '../../../tools/index';\nimport { getDataReceivingProgress } from '../../../data/apis/loader';\nimport { promptMessage } from '../../prompt/index';\nimport { MaterialSymbols } from '../../icons/material-symbols-type';\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeHeadElement = elementQuerySelector(HomeField, '.css_home_head');\nconst HomeBodyElement = elementQuerySelector(HomeField, '.css_home_body');\nconst HomeFoldersField = elementQuerySelector(HomeBodyElement, '.css_home_folders');\nconst HomeUpdateTimerElement = elementQuerySelector(HomeHeadElement, '.css_home_update_timer_box .css_home_update_timer');\n\nlet previousIntegration = {} as integratedFolders;\nlet previousSkeletonScreen: boolean = false;\nlet previousAnimation: boolean = true;\n\nlet foldersRefreshTimer_retryInterval: number = 10 * 1000;\nlet foldersRefreshTimer_baseInterval: number = 15 * 1000;\nlet foldersRefreshTimer_minInterval: number = 5 * 1000;\nlet foldersRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet foldersRefreshTimer_dynamic: boolean = true;\nlet foldersRefreshTimer_streaming: boolean = false;\nlet foldersRefreshTimer_lastUpdate: number = 0;\nlet foldersRefreshTimer_nextUpdate: number = 0;\nlet foldersRefreshTimer_refreshing: boolean = false;\nlet foldersRefreshTimer_currentRequestID: string = '';\nlet foldersRefreshTimer_streamStarted: boolean = false;\nlet foldersRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nfunction queryFolderFieldSize(): FieldSize {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\n\nfunction generateElementOfItem(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_folder_item');\n  element.setAttribute('type', 'stop');\n  element.innerHTML = /*html*/ `<div class=\"css_home_folder_item_icon\"></div><div class=\"css_home_folder_item_context\"></div><div class=\"css_home_folder_item_main\"></div><div class=\"css_home_folder_item_capsule\"><div class=\"css_home_folder_item_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div><div class=\"css_home_folder_item_button\">${getIconHTML('keyboard_arrow_right')}</div><div class=\"css_home_folder_item_capsule_separator\"></div></div>`;\n  return {\n    element: element,\n    id: null\n  };\n}\n\nfunction generateElementOfFolder(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_folder');\n  element.innerHTML = /*html*/ `<div class=\"css_home_folder_head\"><div class=\"css_home_folder_icon\"></div><div class=\"css_home_folder_name\"></div></div><div class=\"css_home_folder_content\"></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction updateUpdateTimer(): void {\n  const time = new Date().getTime();\n  let percentage = 0;\n  if (foldersRefreshTimer_refreshing) {\n    percentage = -1 + getDataReceivingProgress(foldersRefreshTimer_currentRequestID);\n  } else {\n    percentage = -1 * Math.min(1, Math.max(0, Math.abs(time - foldersRefreshTimer_lastUpdate) / foldersRefreshTimer_dynamicInterval));\n  }\n  HomeUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', percentage.toString());\n  window.requestAnimationFrame(function () {\n    if (foldersRefreshTimer_streaming) {\n      updateUpdateTimer();\n    }\n  });\n}\n\nexport function setUpFolderFieldSkeletonScreen(Field: HTMLElement): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const FieldSize = queryFolderFieldSize();\n  const FieldWidth = FieldSize.width;\n  const FieldHeight = FieldSize.height;\n  const defaultItemQuantity = { f_0: Math.floor(FieldHeight / 50 / 3) + 2, f_1: Math.floor(FieldHeight / 50 / 3) + 2, f_2: Math.floor(FieldHeight / 50 / 3) + 2 };\n  const defaultFolderQuantity = 3;\n  let foldedContent = {} as integratedFolders['foldedContent'];\n  let folders = {} as integratedFolders['folders'];\n  for (let i = 0; i < defaultFolderQuantity; i++) {\n    const folderKey: string = `f_${i}`;\n    foldedContent[folderKey] = [];\n    folders[folderKey] = {\n      name: '',\n      index: i,\n      icon: '',\n      default: false,\n      storeIndex: null,\n      contentType: [],\n      id: '',\n      time: '',\n      timeNumber: 0\n    };\n    for (let j = 0; j < defaultItemQuantity[folderKey]; j++) {\n      foldedContent[folderKey].push({\n        type: 'stop',\n        id: 0,\n        time: '',\n        name: '',\n        status: {\n          code: 0,\n          text: ''\n        },\n        direction: 0,\n        route: {\n          name: '',\n          endPoints: {\n            departure: '',\n            destination: ''\n          },\n          id: 0,\n          pathAttributeId: []\n        },\n        index: j\n      });\n    }\n  }\n  updateFolderField(\n    Field,\n    {\n      foldedContent: foldedContent,\n      folders: folders,\n      folderQuantity: defaultFolderQuantity,\n      itemQuantity: defaultItemQuantity,\n      dataUpdateTime: null\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction updateFolderField(Field: HTMLElement, integration: integratedFolders, skeletonScreen: boolean, animation: boolean): void {\n  function updateItem(thisElement: HTMLElement, thisItem: integratedFolderContent, previousItem: integratedFolderContent | null) {\n    function updateType(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      thisElement.setAttribute('type', thisItem.type);\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const iconElement = elementQuerySelector(thisElement, '.css_home_folder_item_icon');\n      let icon = '' as MaterialSymbols;\n      switch (thisItem.type) {\n        case 'stop':\n          icon = 'location_on';\n          break;\n        case 'route':\n          icon = 'route';\n          break;\n        case 'bus':\n          icon = 'directions_bus';\n          break;\n        case 'empty':\n          icon = 'lightbulb';\n          break;\n        default:\n          icon = '';\n          break;\n      }\n      iconElement.innerHTML = getIconHTML(icon);\n    }\n\n    function updateStatus(thisElement: HTMLElement, thisItem: integratedFolderContent, animation: boolean): void {\n      if (thisItem.type === 'stop') {\n        const thisElementRect = thisElement.getBoundingClientRect();\n        const top = thisElementRect.top;\n        const left = thisElementRect.left;\n        const bottom = thisElementRect.bottom;\n        const right = thisElementRect.right;\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n\n        const thisItemStatusElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_status');\n        const nextSlideElement = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n        const currentSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n\n        nextSlideElement.setAttribute('code', thisItem.status.code.toString());\n        nextSlideElement.innerText = thisItem.status.text;\n\n        if (animation && bottom > 0 && top < windowHeight && right > 0 && left < windowWidth) {\n          currentSlideElement.addEventListener(\n            'animationend',\n            function () {\n              currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n              currentSlideElement.innerText = thisItem.status.text;\n              currentSlideElement.classList.remove('css_slide_fade_out');\n            },\n            { once: true }\n          );\n          currentSlideElement.classList.add('css_slide_fade_out');\n        } else {\n          currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n          currentSlideElement.innerText = thisItem.status.text;\n        }\n      }\n    }\n\n    function updateMain(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let main: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          main = thisItem.name;\n          break;\n        case 'route':\n          main = thisItem.name;\n          break;\n        case 'bus':\n          main = thisItem.busID;\n          break;\n        case 'empty':\n          main = '沒有內容';\n          break;\n        default:\n          main = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_main').innerText = main;\n    }\n\n    function updateContext(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let context: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          context = `${thisItem.route ? thisItem.route.name : ''} - 往${thisItem.route ? [thisItem.route.endPoints.destination, thisItem.route.endPoints.departure, ''][thisItem.direction ? thisItem.direction : 0] : ''}`;\n          break;\n        case 'route':\n          context = `${thisItem.endPoints.departure} \\u2194 ${thisItem.endPoints.destination}`;\n          break;\n        case 'bus':\n          // context = thisItem.currentRoute.name; // TODO: integration\n          break;\n        case 'empty':\n          context = '提示';\n          break;\n        default:\n          context = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_context').innerText = context;\n    }\n\n    function updateButton(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const buttonElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_button');\n      let onclick = '';\n      switch (thisItem.type) {\n        case 'stop':\n          onclick = `bus.route.openRoute(${thisItem.route.id}, [${thisItem.route.pathAttributeId.join(',')}])`;\n          break;\n        case 'route':\n          onclick = `bus.route.openRoute(${thisItem.id}, [${thisItem.pathAttributeId.join(',')}])`;\n          break;\n        case 'bus':\n          break;\n        case 'empty':\n          break;\n        default:\n          break;\n      }\n      buttonElement.setAttribute('onclick', onclick);\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateType(thisElement, thisItem);\n      updateIcon(thisElement, thisItem);\n      updateStatus(thisElement, thisItem, animation);\n      updateMain(thisElement, thisItem);\n      updateContext(thisElement, thisItem);\n      updateButton(thisElement, thisItem);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (!(thisItem.type === previousItem.type)) {\n        updateType(thisElement, thisItem);\n        updateIcon(thisElement, thisItem);\n        updateStatus(thisElement, thisItem, animation);\n        updateMain(thisElement, thisItem);\n        updateContext(thisElement, thisItem);\n        updateButton(thisElement, thisItem);\n        updateAnimation(thisElement, animation);\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      } else {\n        switch (thisItem.type) {\n          case 'stop':\n            if (!compareThings(previousItem.route, thisItem.route)) {\n              updateContext(thisElement, thisItem);\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            if (!(thisItem.status.code === previousItem.status.code) || !compareThings(previousItem.status.text, thisItem.status.text)) {\n              updateStatus(thisElement, thisItem, animation);\n            }\n            break;\n          case 'route':\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.endPoints, thisItem.endPoints)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'bus':\n            if (!compareThings(previousItem.currentRoute, thisItem.currentRoute)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.busID, thisItem.busID)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'empty':\n            if (!(thisItem.type === previousItem.type)) {\n              updateContext(thisElement, thisItem);\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          default:\n            break;\n        }\n        if (!(skeletonScreen === previousSkeletonScreen)) {\n          updateSkeletonScreen(thisElement, skeletonScreen);\n        }\n        if (!(animation === previousAnimation)) {\n          updateAnimation(thisElement, animation);\n        }\n      }\n    }\n  }\n\n  function updateFolder(thisElement: HTMLElement, thisFolder: Folder, previousFolder: Folder | null): void {\n    function updateName(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisNameElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_name');\n      thisNameElememt.innerText = thisFolder.name;\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisIconElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_icon');\n      thisIconElememt.innerHTML = getIconHTML(thisFolder.icon);\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousFolder === null) {\n      updateName(thisElement, thisFolder);\n      updateIcon(thisElement, thisFolder);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (!(thisFolder.name === previousFolder.name)) {\n        updateName(thisElement, thisFolder);\n      }\n      if (!(thisFolder.icon === previousFolder.icon)) {\n        updateIcon(thisElement, thisFolder);\n      }\n      if (!(animation === previousAnimation)) {\n        updateAnimation(thisElement, animation);\n      }\n      if (!(skeletonScreen === previousSkeletonScreen)) {\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      }\n    }\n  }\n\n  const FieldSize = queryFolderFieldSize();\n  const FieldWidth = FieldSize.width;\n  const FieldHeight = FieldSize.height;\n\n  const folderQuantity = integration.folderQuantity;\n  const itemQuantity = integration.itemQuantity;\n  const foldedContent = integration.foldedContent;\n  const folders = integration.folders;\n\n  // Field.setAttribute('skeleton-screen', skeletonScreen);\n\n  const currentFolderSeatQuantity = elementQuerySelectorAll(Field, `.css_home_folder`).length;\n  if (!(folderQuantity === currentFolderSeatQuantity)) {\n    const capacity = currentFolderSeatQuantity - folderQuantity;\n    if (capacity < 0) {\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newFolderElement = generateElementOfFolder();\n        Field.appendChild(newFolderElement.element);\n      }\n    } else {\n      const FolderElements = elementQuerySelectorAll(Field, `.css_home_folder`);\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const folderIndex = currentFolderSeatQuantity - 1 - o;\n        FolderElements[folderIndex].remove();\n      }\n    }\n  }\n\n  for (let i = 0; i < folderQuantity; i++) {\n    const folderKey = `f_${i}`;\n    const currentItemSeatQuantity = elementQuerySelectorAll(elementQuerySelectorAll(Field, `.css_home_folder`)[i], `.css_home_folder_content .css_home_folder_item`).length;\n    if (!(itemQuantity[folderKey] === currentItemSeatQuantity)) {\n      const capacity = currentItemSeatQuantity - itemQuantity[folderKey];\n      if (capacity < 0) {\n        const FolderContentElement = elementQuerySelector(elementQuerySelectorAll(Field, `.css_home_folder`)[i], `.css_home_folder_content`);\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newItemElement = generateElementOfItem();\n          FolderContentElement.appendChild(newItemElement.element);\n        }\n      } else {\n        const FolderContentItemElements = elementQuerySelectorAll(elementQuerySelectorAll(Field, `.css_home_folder`)[i], `.css_home_folder_content .css_home_folder_item`);\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          FolderContentItemElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < folderQuantity; i++) {\n    const folderKey = `f_${i}`;\n    const thisFolderElement = elementQuerySelectorAll(Field, `.css_home_folder`)[i];\n    const thisFolder = folders[folderKey];\n    if (previousIntegration.hasOwnProperty('folders')) {\n      if (previousIntegration.folders.hasOwnProperty(folderKey)) {\n        if (previousIntegration.folders[folderKey]) {\n          const previousFolder = previousIntegration.folders[folderKey];\n          updateFolder(thisFolderElement, thisFolder, previousFolder);\n        } else {\n          updateFolder(thisFolderElement, thisFolder, null);\n        }\n      } else {\n        updateFolder(thisFolderElement, thisFolder, null);\n      }\n    } else {\n      updateFolder(thisFolderElement, thisFolder, null);\n    }\n\n    for (let j = 0; j < itemQuantity[folderKey]; j++) {\n      const thisElement = elementQuerySelectorAll(elementQuerySelectorAll(Field, `.css_home_folder`)[i], `.css_home_folder_content .css_home_folder_item`)[j];\n      const thisItem = foldedContent[folderKey][j];\n      if (previousIntegration.hasOwnProperty('foldedContent')) {\n        if (previousIntegration.foldedContent.hasOwnProperty(folderKey)) {\n          if (previousIntegration.foldedContent[folderKey][j]) {\n            const previousItem = previousIntegration.foldedContent[folderKey][j];\n            updateItem(thisElement, thisItem, previousItem);\n          } else {\n            updateItem(thisElement, thisItem, null);\n          }\n        } else {\n          updateItem(thisElement, thisItem, null);\n        }\n      } else {\n        updateItem(thisElement, thisItem, null);\n      }\n    }\n  }\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshFolders(): Promise<object> {\n  const time = new Date().getTime();\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  foldersRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  foldersRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  foldersRefreshTimer_refreshing = true;\n  foldersRefreshTimer_currentRequestID = generateIdentifier('r');\n  HomeUpdateTimerElement.setAttribute('refreshing', 'true');\n  const integration = await integrateFolders(foldersRefreshTimer_currentRequestID);\n  updateFolderField(HomeFoldersField, integration, false, playing_animation);\n  foldersRefreshTimer_lastUpdate = time;\n  if (foldersRefreshTimer_dynamic) {\n    const updateRate = await getUpdateRate();\n    foldersRefreshTimer_nextUpdate = Math.max(time + foldersRefreshTimer_minInterval, integration.dataUpdateTime + foldersRefreshTimer_baseInterval / updateRate);\n  } else {\n    foldersRefreshTimer_nextUpdate = time + foldersRefreshTimer_baseInterval;\n  }\n  foldersRefreshTimer_dynamicInterval = Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - time);\n  foldersRefreshTimer_refreshing = false;\n  HomeUpdateTimerElement.setAttribute('refreshing', 'false');\n  return { status: 'Successfully refreshed the folders.' };\n}\n\nasync function streamFolders(): void {\n  refreshFolders()\n    .then((result) => {\n      if (foldersRefreshTimer_streaming) {\n        foldersRefreshTimer_timer = setTimeout(function () {\n          streamFolders();\n        }, Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (foldersRefreshTimer_streaming) {\n        promptMessage(`（資料夾）發生網路錯誤，將在${foldersRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        foldersRefreshTimer_timer = setTimeout(function () {\n          streamFolders();\n        }, foldersRefreshTimer_retryInterval);\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function initializeFolders(): void {\n  setUpFolderFieldSkeletonScreen(HomeFoldersField);\n  if (!foldersRefreshTimer_streaming) {\n    foldersRefreshTimer_streaming = true;\n    if (!foldersRefreshTimer_streamStarted) {\n      foldersRefreshTimer_streamStarted = true;\n      streamFolders();\n    } else {\n      refreshFolders();\n    }\n    updateUpdateTimer();\n  }\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","HomeField","documentQuerySelector","HomeHeadElement","elementQuerySelector","HomeBodyElement","HomeFoldersField","HomeUpdateTimerElement","previousIntegration","previousSkeletonScreen","previousAnimation","foldersRefreshTimer_baseInterval","foldersRefreshTimer_minInterval","foldersRefreshTimer_dynamicInterval","foldersRefreshTimer_dynamic","foldersRefreshTimer_streaming","foldersRefreshTimer_lastUpdate","foldersRefreshTimer_nextUpdate","foldersRefreshTimer_refreshing","foldersRefreshTimer_currentRequestID","foldersRefreshTimer_streamStarted","queryFolderFieldSize","width","window","innerWidth","height","innerHeight","generateElementOfItem","element","document","createElement","classList","add","setAttribute","innerHTML","concat","getIconHTML","id","updateUpdateTimer","time","Date","getTime","percentage","getDataReceivingProgress","Math","min","max","abs","style","setProperty","toString","requestAnimationFrame","setUpFolderFieldSkeletonScreen","Field","playing_animation","getSettingOptionValue","FieldSize","FieldHeight","defaultItemQuantity","f_0","floor","f_1","f_2","foldedContent","folders","folderKey","index","icon","default","storeIndex","contentType","timeNumber","j","status","code","text","direction","route","endPoints","departure","destination","pathAttributeId","updateFolderField","folderQuantity","itemQuantity","dataUpdateTime","integration","skeletonScreen","animation","updateItem","thisElement","thisItem","previousItem","updateType","updateIcon","iconElement","updateStatus","thisElementRect","getBoundingClientRect","top","left","bottom","right","windowWidth","windowHeight","thisItemStatusElement","nextSlideElement","currentSlideElement","innerText","addEventListener","remove","once","updateMain","main","busID","updateContext","context","updateButton","buttonElement","onclick","join","updateAnimation","booleanToString","updateSkeletonScreen","compareThings","currentRoute","updateFolder","thisFolder","previousFolder","updateName","thisHeadElement","currentFolderSeatQuantity","elementQuerySelectorAll","capacity","newFolderElement","appendChild","FolderElements","currentItemSeatQuantity","FolderContentElement","newItemElement","FolderContentItemElements","thisFolderElement","refreshFolders","_refreshFolders","_callee","refresh_interval_setting","updateRate","_context","dynamic","baseInterval","generateIdentifier","integrateFolders","getUpdateRate","streamFolders","_streamFolders","_callee2","_context2","result","setTimeout","err","console","error","promptMessage","foldersRefreshTimer_retryInterval","initializeFolders"],"sourceRoot":""}