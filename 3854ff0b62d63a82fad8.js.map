{"version":3,"file":"3854ff0b62d63a82fad8.js","mappings":"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","sources":["webpack://bus/./src/data/analytics/bus-arrival-time/index.ts"],"sourcesContent":["import { generateIdentifier } from '../../../tools/index';\nimport { findExtremum } from '../../../tools/math';\nimport { WeekDayIndex } from '../../../tools/time';\nimport { EstimateTime } from '../../apis/getEstimateTime/index';\nimport { listAllFolderContent } from '../../folder/index';\nimport { isInPersonalSchedule, listPersonalSchedules } from '../../personal-schedule/index';\nimport { PersonalSchedule } from '../../personal-schedule/index';\nimport { lfGetItem, lfListItemKeys, lfSetItem, lfRemoveItem } from '../../storage/index';\n\nconst busArrivalTimeData_writeAheadLog_maxDataLength: number = 32;\nlet busArrivalTimeData_writeAheadLog_id: string = '';\nlet busArrivalTimeData_writeAheadLog_tracking: boolean = false;\nlet busArrivalTimeData_trackedStops: Array<number> = [];\nlet busArrivalTimeData_writeAheadLog_group: BusArrivalTimeDataWriteAheadLog = {\n  data: {},\n  timestamp: 0,\n  id: ''\n};\nlet busArrivalTimeData_writeAheadLog_currentDataLength: number = 0;\n\nexport type BusArrivalTimeData = [estimateTime: number, timestamp: number]; // EstimateTime (seconds), timestamp (milliseconds)\n\nexport type BusArrivalTimeDataGroupStats = Array<number>;\n\nexport interface BusArrivalTimeDataGroup {\n  stats: BusArrivalTimeDataGroupStats;\n  day: WeekDayIndex;\n  max: number;\n  min: number;\n  timestamp: number;\n  id: number; // stop id\n}\n\nexport type BusArrivalTimeDataGroupArray = Array<BusArrivalTimeDataGroup>;\n\nexport interface BusArrivalTimeDataWriteAheadLog {\n  data: {\n    [key: string]: Array<BusArrivalTimeData>;\n  };\n  timestamp: number;\n  id: string;\n}\n\nexport interface BusArrivalTime {\n  personalSchedule: PersonalSchedule;\n  chart: string; // svg\n  day: WeekDayIndex;\n}\n\nexport interface BusArrivalTimes {\n  [stopKey: string]: Array<BusArrivalTime>;\n}\n\nfunction getBusArrivalTimeDataStats(data: Array<BusArrivalTimeData>): BusArrivalTimeDataGroupStats {\n  const statsArray = new Uint32Array(60 * 24); // one day in minutes\n  const dataLength = data.length;\n  for (let i = dataLength - 1; i >= 0; i--) {\n    const item = data[i];\n    let time = 0;\n    let offset = 0;\n    if (item[0] >= 0) {\n      time = item[1] + item[0] * 1000;\n      offset = 1;\n    } else {\n      time = item[1];\n      offset = 0;\n    }\n    const date = new Date(time);\n    const index = date.getHours() * 60 + date.getMinutes();\n    statsArray[index] += offset;\n  }\n  return Array.from(statsArray);\n}\n\nfunction mergeBusArrivalTimeDataStats(targetStats: BusArrivalTimeDataGroupStats, sourceStats: BusArrivalTimeDataGroupStats): BusArrivalTimeDataGroupStats {\n  const mergedArray = new Uint32Array(60 * 24);\n  for (let i = 60 * 24 - 1; i >= 0; i--) {\n    mergedArray[i] = targetStats[i] + sourceStats[i];\n  }\n  return Array.from(mergedArray);\n}\n\nexport async function collectBusArrivalTimeData(EstimateTime: EstimateTime) {\n  const now = new Date();\n  const currentTimestamp: number = now.getTime();\n  const currentDay = now.getDay();\n  let needToReset = false;\n  // Initialize\n  if (!busArrivalTimeData_writeAheadLog_tracking) {\n    busArrivalTimeData_writeAheadLog_tracking = true;\n    busArrivalTimeData_writeAheadLog_id = generateIdentifier('b');\n    busArrivalTimeData_writeAheadLog_group = {\n      id: busArrivalTimeData_writeAheadLog_id,\n      timestamp: currentTimestamp,\n      data: {}\n    };\n    busArrivalTimeData_writeAheadLog_currentDataLength = 0;\n    const allFolderContent = await listAllFolderContent(['stop']);\n    busArrivalTimeData_trackedStops = allFolderContent.map((e) => e.id);\n  }\n\n  // Record EstimateTime\n  if (isInPersonalSchedule(now)) {\n    for (const item of EstimateTime) {\n      const stopID = item.StopID;\n      const stopKey = `s_${stopID}_${currentDay}`;\n      if (busArrivalTimeData_trackedStops.indexOf(stopID) > -1) {\n        if (!busArrivalTimeData_writeAheadLog_group.data.hasOwnProperty(stopKey)) {\n          busArrivalTimeData_writeAheadLog_group.data[stopKey] = [];\n        }\n        busArrivalTimeData_writeAheadLog_group.data[stopKey].push([parseInt(item.EstimateTime), currentTimestamp]);\n        busArrivalTimeData_writeAheadLog_currentDataLength += 1;\n        if (busArrivalTimeData_writeAheadLog_currentDataLength > busArrivalTimeData_writeAheadLog_maxDataLength) {\n          needToReset = true;\n        }\n      }\n    }\n    if (needToReset || busArrivalTimeData_writeAheadLog_currentDataLength % 8 === 0) {\n      await lfSetItem(5, busArrivalTimeData_writeAheadLog_id, JSON.stringify(busArrivalTimeData_writeAheadLog_group));\n    }\n    if (needToReset) {\n      for (const stopID of busArrivalTimeData_trackedStops) {\n        const stopKey = `s_${stopID}_${currentDay}`;\n        const data = busArrivalTimeData_writeAheadLog_group.data[stopKey];\n        let dataGroup = {} as BusArrivalTimeDataGroup;\n        const existingData = await lfGetItem(6, stopKey);\n        if (existingData) {\n          const existingDataObject = JSON.parse(existingData) as BusArrivalTimeDataGroup;\n          const newStats = getBusArrivalTimeDataStats(data);\n          dataGroup.stats = mergeBusArrivalTimeDataStats(existingDataObject.stats, newStats);\n          const newExtremum = findExtremum(newStats.concat(existingDataObject.max, existingDataObject.min));\n          dataGroup.min = newExtremum[0];\n          dataGroup.max = newExtremum[1];\n          dataGroup.day = currentDay;\n          dataGroup.timestamp = existingDataObject.timestamp;\n          dataGroup.id = stopID;\n        } else {\n          const newStats = getBusArrivalTimeDataStats(data);\n          dataGroup.stats = newStats;\n          const newExtremum = findExtremum(newStats);\n          dataGroup.min = newExtremum[0];\n          dataGroup.max = newExtremum[1];\n          dataGroup.day = currentDay;\n          dataGroup.timestamp = currentTimestamp;\n          dataGroup.id = stopID;\n        }\n        await lfSetItem(6, stopKey, JSON.stringify(dataGroup));\n        await lfRemoveItem(5, busArrivalTimeData_writeAheadLog_id);\n      }\n      busArrivalTimeData_writeAheadLog_tracking = false;\n    }\n  }\n}\n\nexport async function recoverBusArrivalTimeDataFromWriteAheadLog() {\n  const now = new Date();\n  const currentTimestamp = now.getTime();\n  const currentDay = now.getDay();\n  const keys = await lfListItemKeys(5);\n  for (const key of keys) {\n    const json = await lfGetItem(5, key);\n    const object = JSON.parse(json) as BusArrivalTimeDataWriteAheadLog;\n    const thisID = object.id;\n    for (const stopKey in object.data) {\n      const thisStopData = object[stopKey];\n      let dataGroup = {} as BusArrivalTimeDataGroup;\n      const existingData = await lfGetItem(6, stopKey);\n      if (existingData) {\n        const existingDataObject = JSON.parse(existingData) as BusArrivalTimeDataGroup;\n        const newStats = getBusArrivalTimeDataStats(thisStopData);\n        dataGroup.stats = mergeBusArrivalTimeDataStats(existingDataObject.stats, newStats);\n        const newExtremum = findExtremum(newStats.concat(existingDataObject.max, existingDataObject.min));\n        dataGroup.min = newExtremum[0];\n        dataGroup.max = newExtremum[1];\n        dataGroup.day = existingDataObject.day;\n        dataGroup.timestamp = existingDataObject.timestamp;\n        dataGroup.id = stopID;\n      } else {\n        const newStats = getBusArrivalTimeDataStats(thisStopData);\n        dataGroup.stats = newStats;\n        const newExtremum = findExtremum(newStats);\n        dataGroup.min = newExtremum[0];\n        dataGroup.max = newExtremum[1];\n        dataGroup.day = currentDay;\n        dataGroup.timestamp = currentTimestamp;\n        dataGroup.id = stopID;\n      }\n      await lfSetItem(6, stopKey, JSON.stringify(dataGroup));\n      await lfRemoveItem(5, thisID);\n    }\n  }\n}\n\nexport async function listBusArrivalTimeDataGroups(): Promise<BusArrivalTimeDataGroupArray> {\n  const keys = await lfListItemKeys(6);\n  let result: BusArrivalTimeDataGroupArray = [];\n  for (const key of keys) {\n    const json = await lfGetItem(6, key);\n    if (json) {\n      const object = JSON.parse(json) as BusArrivalTimeDataGroup;\n      result.push(object);\n    }\n  }\n  return result;\n}\n\nlet getBusArrivalTimesWorkerResponses = {};\nvar port;\n\n// Check if SharedWorker is supported, and fall back to Worker if not\nif (typeof SharedWorker !== 'undefined') {\n  const getUpdateRateSharedWorker = new SharedWorker(new URL('./getBusArrivalTimes-worker.ts', import.meta.url)); // Reusable shared worker\n  port = getUpdateRateSharedWorker.port; // Access the port for communication\n  port.start(); // Start the port (required by some browsers)\n} else {\n  const getUpdateRateWorker = new Worker(new URL('./getBusArrivalTimes-worker.ts', import.meta.url)); // Fallback to standard worker\n  port = getUpdateRateWorker; // Use Worker directly for communication\n}\n\n// Handle messages from the worker\nport.onmessage = function (e) {\n  const [result, taskID] = e.data;\n  if (getBusArrivalTimesWorkerResponses[taskID]) {\n    getBusArrivalTimesWorkerResponses[taskID](result); // Resolve the correct promise\n    delete getBusArrivalTimesWorkerResponses[taskID]; // Clean up the response handler\n  }\n};\n\n// Handle errors\nport.onerror = function (e) {\n  console.error(e.message);\n};\n\nexport async function getBusArrivalTimes(chartWidth: number, chartHeight: number): Promise<BusArrivalTimes> {\n  const taskID = generateIdentifier('t');\n\n  const personalSchedules = await listPersonalSchedules();\n  const busArrivalTimeDataGroups = await listBusArrivalTimeDataGroups();\n\n  const result = await new Promise((resolve, reject) => {\n    getBusArrivalTimesWorkerResponses[taskID] = resolve; // Store the resolve function for this taskID\n    port.onerror = function (e) {\n      reject(e.message);\n    };\n    port.postMessage([personalSchedules, busArrivalTimeDataGroups, chartWidth, chartHeight, taskID]); // Send the task to the worker\n  });\n  return result;\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_arrayLikeToArray","toString","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","busArrivalTimeData_writeAheadLog_id","busArrivalTimeData_writeAheadLog_tracking","busArrivalTimeData_trackedStops","busArrivalTimeData_writeAheadLog_group","data","timestamp","id","busArrivalTimeData_writeAheadLog_currentDataLength","getBusArrivalTimeDataStats","statsArray","Uint32Array","item","time","offset","date","Date","getHours","getMinutes","mergeBusArrivalTimeDataStats","targetStats","sourceStats","mergedArray","collectBusArrivalTimeData","_x","_collectBusArrivalTimeData","_callee","EstimateTime","now","currentTimestamp","currentDay","needToReset","allFolderContent","_iterator","_step","_stopID2","_stopKey2","_iterator2","_step2","_stopID","_stopKey","dataGroup","existingData","existingDataObject","newStats","newExtremum","_newStats","_newExtremum","_context","getTime","getDay","generateIdentifier","listAllFolderContent","map","isInPersonalSchedule","stopID","StopID","stopKey","concat","indexOf","parseInt","err","lfSetItem","JSON","stringify","lfGetItem","parse","stats","findExtremum","max","min","day","lfRemoveItem","t0","recoverBusArrivalTimeDataFromWriteAheadLog","_recoverBusArrivalTimeDataFromWriteAheadLog","_callee2","_iterator3","_step3","key","json","object","thisID","_stopKey3","thisStopData","_newStats2","_newExtremum2","_context2","lfListItemKeys","t1","t2","listBusArrivalTimeDataGroups","_listBusArrivalTimeDataGroups","_callee3","result","_iterator4","_step4","_context3","port","getBusArrivalTimesWorkerResponses","SharedWorker","getUpdateRateSharedWorker","URL","start","getUpdateRateWorker","Worker","getBusArrivalTimes","_x2","_x3","_getBusArrivalTimes","_callee4","chartWidth","chartHeight","taskID","personalSchedules","busArrivalTimeDataGroups","_context4","listPersonalSchedules","reject","onerror","message","postMessage","onmessage","_e$data","console","error"],"sourceRoot":""}