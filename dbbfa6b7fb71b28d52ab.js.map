{"version":3,"file":"dbbfa6b7fb71b28d52ab.js","mappings":"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","sources":["webpack://bus/./src/interface/home/folders/index.ts","webpack://bus/./src/interface/icons/index.ts","webpack://bus/./src/interface/home/index.ts","webpack://bus/./src/interface/home/recent-views/index.ts"],"sourcesContent":["import { getUpdateRate } from '../../../data/analytics/update-rate/index';\nimport { DataReceivingProgressEvent } from '../../../data/apis/loader';\nimport { Folder, integratedFolder, integratedFolderContent, integratedFolders, integrateFolders } from '../../../data/folder/index';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../../tools/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../../tools/query-selector';\nimport { getIconHTML } from '../../icons/index';\nimport { MaterialSymbols } from '../../icons/material-symbols-type';\nimport { GeneratedElement, querySize } from '../../index';\nimport { openLocation } from '../../location/index';\nimport { promptMessage } from '../../prompt/index';\nimport { openRoute } from '../../route/index';\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeHeadElement = elementQuerySelector(HomeField, '.css_home_head');\nconst HomeBodyElement = elementQuerySelector(HomeField, '.css_home_body');\nconst HomeFoldersElement = elementQuerySelector(HomeBodyElement, '.css_home_folders');\nconst HomeUpdateTimerElement = elementQuerySelector(HomeHeadElement, '.css_home_update_timer_box .css_home_update_timer');\n\nlet previousIntegration = {} as integratedFolders;\nlet previousAnimation: boolean = false;\nlet previousSkeletonScreen: boolean = false;\n\nlet foldersRefreshTimer_retryInterval: number = 10 * 1000;\nlet foldersRefreshTimer_baseInterval: number = 15 * 1000;\nlet foldersRefreshTimer_minInterval: number = 5 * 1000;\nlet foldersRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet foldersRefreshTimer_dynamic: boolean = true;\nlet foldersRefreshTimer_lastUpdate: number = 0;\nlet foldersRefreshTimer_nextUpdate: number = 0;\nlet foldersRefreshTimer_currentRequestID: string = '';\nlet foldersRefreshTimer_refreshing: boolean = false;\nlet foldersRefreshTimer_streaming: boolean = false;\nlet foldersRefreshTimer_streamStarted: boolean = false;\n\nfunction generateElementOfItem(): GeneratedElement {\n  // Main container\n  const itemElement = document.createElement('div');\n  itemElement.classList.add('css_home_folder_item');\n  itemElement.setAttribute('type', 'stop');\n\n  // Icon\n  const iconElement = document.createElement('div');\n  iconElement.classList.add('css_home_folder_item_icon');\n  iconElement.innerHTML = getIconHTML('location_on');\n\n  // Context\n  const contextElement = document.createElement('div');\n  contextElement.classList.add('css_home_folder_item_context');\n\n  // Main\n  const mainElement = document.createElement('div');\n  mainElement.classList.add('css_home_folder_item_main');\n\n  // Capsule\n  const capsuleElement = document.createElement('div');\n  capsuleElement.classList.add('css_home_folder_item_capsule');\n\n  // Status\n  const statusElement = document.createElement('div');\n  statusElement.classList.add('css_home_folder_item_status');\n\n  const nextSlideElement = document.createElement('div');\n  nextSlideElement.classList.add('css_next_slide');\n  nextSlideElement.setAttribute('code', '0');\n  nextSlideElement.setAttribute('displayed', 'false');\n\n  const currentSlideElement = document.createElement('div');\n  currentSlideElement.classList.add('css_current_slide');\n  currentSlideElement.setAttribute('code', '0');\n  currentSlideElement.setAttribute('displayed', 'true');\n\n  statusElement.appendChild(nextSlideElement);\n  statusElement.appendChild(currentSlideElement);\n\n  // Button\n  const buttonElement = document.createElement('div');\n  buttonElement.classList.add('css_home_folder_item_button');\n  buttonElement.innerHTML = getIconHTML('keyboard_arrow_right');\n\n  // Capsule separator\n  const capsuleSeparatorElement = document.createElement('div');\n  capsuleSeparatorElement.classList.add('css_home_folder_item_capsule_separator');\n\n  // Assemble capsule\n  capsuleElement.appendChild(statusElement);\n  capsuleElement.appendChild(buttonElement);\n  capsuleElement.appendChild(capsuleSeparatorElement);\n\n  // Assemble item\n  itemElement.appendChild(iconElement);\n  itemElement.appendChild(contextElement);\n  itemElement.appendChild(mainElement);\n  itemElement.appendChild(capsuleElement);\n\n  return {\n    element: itemElement,\n    id: ''\n  };\n}\n\nfunction generateElementOfFolder(): GeneratedElement {\n  // Main container\n  const folderElement = document.createElement('div');\n  folderElement.classList.add('css_home_folder');\n\n  // Head\n  const headElement = document.createElement('div');\n  headElement.classList.add('css_home_folder_head');\n\n  // Icon\n  const iconElement = document.createElement('div');\n  iconElement.classList.add('css_home_folder_icon');\n\n  // Name\n  const nameElement = document.createElement('div');\n  nameElement.classList.add('css_home_folder_name');\n\n  // Assemble head\n  headElement.appendChild(iconElement);\n  headElement.appendChild(nameElement);\n\n  // Content\n  const contentElement = document.createElement('div');\n  contentElement.classList.add('css_home_folder_content');\n\n  // Assemble folder\n  folderElement.appendChild(headElement);\n  folderElement.appendChild(contentElement);\n\n  return {\n    element: folderElement,\n    id: ''\n  };\n}\n\nfunction animateUpdateTimer(): void {\n  HomeUpdateTimerElement.style.setProperty('--b-cssvar-home-update-timer-interval', `${foldersRefreshTimer_dynamicInterval}ms`);\n  HomeUpdateTimerElement.classList.add('css_home_update_timer_slide_rtl');\n}\n\nfunction handleDataReceivingProgressUpdates(event: Event): void {\n  const CustomEvent = event as DataReceivingProgressEvent;\n  if (foldersRefreshTimer_refreshing) {\n    const offsetRatio = CustomEvent.detail.progress - 1;\n    HomeUpdateTimerElement.style.setProperty('--b-cssvar-home-update-timer-offset-ratio', offsetRatio.toString());\n  }\n  if (CustomEvent.detail.stage === 'end') {\n    document.removeEventListener(CustomEvent.detail.target, handleDataReceivingProgressUpdates);\n  }\n}\n\nexport function setUpFolderFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const contentLength = Math.floor(FieldHeight / 50 / 3) + 2;\n  const folderQuantity = 3;\n\n  const folders: integratedFolders['folders'] = [];\n  for (let i = 0; i < folderQuantity; i++) {\n    const folder: integratedFolder = {\n      name: '',\n      icon: '',\n      id: '',\n      timestamp: 0,\n      content: [],\n      contentLength: contentLength\n    };\n\n    for (let j = 0; j < contentLength; j++) {\n      const folderContent: integratedFolderContent = {\n        type: 'stop',\n        id: 0,\n        timestamp: 0,\n        name: '',\n        status: {\n          code: 8,\n          text: '',\n          time: -6\n        },\n        direction: 0,\n        route: {\n          name: '',\n          endPoints: {\n            departure: '',\n            destination: ''\n          },\n          id: 0,\n          pathAttributeId: []\n        }\n      };\n      folder.content.push(folderContent);\n    }\n    folders.push(folder);\n  }\n\n  updateFoldersElement(\n    {\n      folders: folders,\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction updateFoldersElement(integration: integratedFolders, skeletonScreen: boolean, animation: boolean): void {\n  function updateItem(thisElement: HTMLElement, thisItem: integratedFolderContent, previousItem: integratedFolderContent | null) {\n    function updateType(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      thisElement.setAttribute('type', thisItem.type);\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const iconElement = elementQuerySelector(thisElement, '.css_home_folder_item_icon');\n      let icon = '' as MaterialSymbols;\n      switch (thisItem.type) {\n        case 'stop':\n          icon = 'location_on';\n          break;\n        case 'route':\n          icon = 'route';\n          break;\n        case 'location':\n          icon = 'location_on';\n          break;\n        case 'bus':\n          icon = 'directions_bus';\n          break;\n        case 'empty':\n          icon = 'lightbulb';\n          break;\n        default:\n          icon = '';\n          break;\n      }\n      iconElement.innerHTML = getIconHTML(icon);\n    }\n\n    function updateStatus(thisElement: HTMLElement, thisItem: integratedFolderContent, animation: boolean): void {\n      if (thisItem.type === 'stop') {\n        const thisElementRect = thisElement.getBoundingClientRect();\n        const top = thisElementRect.top;\n        const left = thisElementRect.left;\n        const bottom = thisElementRect.bottom;\n        const right = thisElementRect.right;\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n\n        const thisItemStatusElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_status');\n        const nextSlideElement = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n        const currentSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n\n        nextSlideElement.setAttribute('code', thisItem.status.code.toString());\n        nextSlideElement.innerText = thisItem.status.text;\n\n        if (animation && bottom > 0 && top < windowHeight && right > 0 && left < windowWidth) {\n          currentSlideElement.addEventListener(\n            'animationend',\n            function () {\n              currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n              currentSlideElement.innerText = thisItem.status.text;\n              currentSlideElement.classList.remove('css_slide_fade_out');\n              nextSlideElement.setAttribute('displayed', 'false');\n            },\n            { once: true }\n          );\n          nextSlideElement.setAttribute('displayed', 'true');\n          currentSlideElement.classList.add('css_slide_fade_out');\n        } else {\n          currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n          currentSlideElement.innerText = thisItem.status.text;\n        }\n      }\n    }\n\n    function updateMain(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let main: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          main = thisItem.name;\n          break;\n        case 'route':\n          main = thisItem.name;\n          break;\n        case 'location':\n          main = thisItem.name;\n          break;\n        case 'bus':\n          main = thisItem.busID;\n          break;\n        case 'empty':\n          main = '沒有內容';\n          break;\n        default:\n          main = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_main').innerText = main;\n    }\n\n    function updateContext(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let context: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          context = `${thisItem.route ? thisItem.route.name : ''} - 往${thisItem.route ? [thisItem.route.endPoints.destination, thisItem.route.endPoints.departure, ''][thisItem.direction ? thisItem.direction : 0] : ''}`;\n          break;\n        case 'route':\n          context = `${thisItem.endPoints.departure} \\u2194 ${thisItem.endPoints.destination}`;\n          break;\n        case 'location':\n          context = '地點';\n          break;\n        case 'bus':\n          // context = thisItem.currentRoute.name; // TODO: integration\n          break;\n        case 'empty':\n          context = '提示';\n          break;\n        default:\n          context = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_context').innerText = context;\n    }\n\n    function updateButton(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const buttonElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_button');\n      switch (thisItem.type) {\n        case 'stop':\n          buttonElement.onclick = function () {\n            openRoute(thisItem.route.id, thisItem.route.pathAttributeId);\n          };\n          break;\n        case 'route':\n          buttonElement.onclick = function () {\n            openRoute(thisItem.id, thisItem.pathAttributeId);\n          };\n          break;\n        case 'location':\n          buttonElement.onclick = function () {\n            openLocation(thisItem.id);\n          };\n          break;\n        case 'bus':\n          break;\n        case 'empty':\n          break;\n        default:\n          break;\n      }\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateType(thisElement, thisItem);\n      updateIcon(thisElement, thisItem);\n      updateStatus(thisElement, thisItem, animation);\n      updateMain(thisElement, thisItem);\n      updateContext(thisElement, thisItem);\n      updateButton(thisElement, thisItem);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (thisItem.type !== previousItem.type) {\n        updateType(thisElement, thisItem);\n        updateIcon(thisElement, thisItem);\n        updateStatus(thisElement, thisItem, animation);\n        updateMain(thisElement, thisItem);\n        updateContext(thisElement, thisItem);\n        updateButton(thisElement, thisItem);\n        updateAnimation(thisElement, animation);\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      } else {\n        switch (thisItem.type) {\n          case 'stop':\n            if (!compareThings(previousItem.route, thisItem.route)) {\n              updateContext(thisElement, thisItem);\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            if (thisItem.status.code !== previousItem.status.code || !compareThings(previousItem.status.text, thisItem.status.text)) {\n              updateStatus(thisElement, thisItem, animation);\n            }\n            break;\n          case 'route':\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.endPoints, thisItem.endPoints)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'location':\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            /*\n            if (!compareThings(previousItem.labels, thisItem.labels)) {\n              updateContext(thisElement, thisItem);\n            }\n            */\n            break;\n          case 'bus':\n            if (!compareThings(previousItem.currentRoute, thisItem.currentRoute)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.busID, thisItem.busID)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'empty':\n            if (thisItem.type !== previousItem.type) {\n              updateContext(thisElement, thisItem);\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          default:\n            break;\n        }\n        if (skeletonScreen !== previousSkeletonScreen) {\n          updateSkeletonScreen(thisElement, skeletonScreen);\n        }\n        if (animation !== previousAnimation) {\n          updateAnimation(thisElement, animation);\n        }\n      }\n    }\n  }\n\n  function updateFolder(thisElement: HTMLElement, thisFolder: Folder, previousFolder: Folder | null): void {\n    function updateName(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisNameElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_name');\n      thisNameElememt.innerText = thisFolder.name;\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisIconElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_icon');\n      thisIconElememt.innerHTML = getIconHTML(thisFolder.icon);\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousFolder === null) {\n      updateName(thisElement, thisFolder);\n      updateIcon(thisElement, thisFolder);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (thisFolder.name !== previousFolder.name) {\n        updateName(thisElement, thisFolder);\n      }\n      if (thisFolder.icon !== previousFolder.icon) {\n        updateIcon(thisElement, thisFolder);\n      }\n      if (animation !== previousAnimation) {\n        updateAnimation(thisElement, animation);\n      }\n      if (skeletonScreen !== previousSkeletonScreen) {\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      }\n    }\n  }\n\n  const folders = integration.folders;\n  const foldersLength = folders.length;\n\n  const currentFolderSeatQuantity = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder').length;\n  if (foldersLength !== currentFolderSeatQuantity) {\n    const capacity = currentFolderSeatQuantity - foldersLength;\n    if (capacity < 0) {\n      const fragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newFolderElement = generateElementOfFolder();\n        fragment.appendChild(newFolderElement.element);\n      }\n      HomeFoldersElement.append(fragment);\n    } else {\n      const FolderElements = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const folderIndex = currentFolderSeatQuantity - 1 - o;\n        FolderElements[folderIndex].remove();\n      }\n    }\n  }\n\n  const FolderElements = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n  for (let i = 0; i < foldersLength; i++) {\n    const thisFolder = folders[i];\n    const thisFolderContent = thisFolder.content;\n    const thisFolderContentLength = thisFolderContent.length;\n    const thisFolderElement = FolderElements[i];\n    const thisFolderContentElement = elementQuerySelector(thisFolderElement, '.css_home_folder_content');\n    const currentItemSeatQuantity = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item').length;\n    if (thisFolderContentLength !== currentItemSeatQuantity) {\n      const capacity = currentItemSeatQuantity - thisFolderContentLength;\n      if (capacity < 0) {\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newItemElement = generateElementOfItem();\n          thisFolderContentElement.appendChild(newItemElement.element);\n        }\n      } else {\n        const FolderContentItemElements = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item');\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          FolderContentItemElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  const FolderElements2 = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n  for (let i = 0; i < foldersLength; i++) {\n    const thisFolder = folders[i];\n    const thisFolderContent = thisFolder.content;\n    const thisFolderContentLength = thisFolderContent.length; // the actual length (including 'empty content')\n    const thisFolderElement = FolderElements2[i];\n    const thisFolderContentElement = elementQuerySelector(thisFolderElement, '.css_home_folder_content');\n    if (previousIntegration.hasOwnProperty('folders')) {\n      if (previousIntegration.folders[i]) {\n        const previousFolder = previousIntegration.folders[i];\n        updateFolder(thisFolderElement, thisFolder, previousFolder);\n      } else {\n        updateFolder(thisFolderElement, thisFolder, null);\n      }\n    } else {\n      updateFolder(thisFolderElement, thisFolder, null);\n    }\n\n    const thisFolderItemElements = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item');\n    for (let j = 0; j < thisFolderContentLength; j++) {\n      const thisElement = thisFolderItemElements[j];\n      const thisItem = thisFolderContent[j];\n      if (previousIntegration.hasOwnProperty('folders')) {\n        if (previousIntegration.folders[i]) {\n          if (previousIntegration.folders[i].content[j]) {\n            const previousItem = previousIntegration.folders[i].content[j];\n            updateItem(thisElement, thisItem, previousItem);\n          } else {\n            updateItem(thisElement, thisItem, null);\n          }\n        } else {\n          updateItem(thisElement, thisItem, null);\n        }\n      } else {\n        updateItem(thisElement, thisItem, null);\n      }\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshFolders() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  foldersRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  foldersRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  foldersRefreshTimer_refreshing = true;\n  foldersRefreshTimer_currentRequestID = generateIdentifier();\n  HomeUpdateTimerElement.setAttribute('refreshing', 'true');\n  HomeUpdateTimerElement.classList.remove('css_home_update_timer_slide_rtl');\n  document.addEventListener(foldersRefreshTimer_currentRequestID, handleDataReceivingProgressUpdates);\n  const integration = await integrateFolders(foldersRefreshTimer_currentRequestID);\n  updateFoldersElement(integration, false, playing_animation);\n  let updateRate = 0;\n  if (foldersRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  foldersRefreshTimer_lastUpdate = new Date().getTime();\n  if (foldersRefreshTimer_dynamic) {\n    foldersRefreshTimer_nextUpdate = Math.max(foldersRefreshTimer_lastUpdate + foldersRefreshTimer_minInterval, integration.dataUpdateTime + foldersRefreshTimer_baseInterval / updateRate);\n  } else {\n    foldersRefreshTimer_nextUpdate = foldersRefreshTimer_lastUpdate + foldersRefreshTimer_baseInterval;\n  }\n  foldersRefreshTimer_dynamicInterval = Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - foldersRefreshTimer_lastUpdate);\n  foldersRefreshTimer_refreshing = false;\n  HomeUpdateTimerElement.setAttribute('refreshing', 'false');\n  animateUpdateTimer();\n}\n\nasync function streamFolders() {\n  refreshFolders()\n    .then(function () {\n      if (foldersRefreshTimer_streaming) {\n        setTimeout(function () {\n          streamFolders();\n        }, Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (foldersRefreshTimer_streaming) {\n        promptMessage(`資料夾網路連線中斷，將在${foldersRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        setTimeout(function () {\n          streamFolders();\n        }, foldersRefreshTimer_retryInterval);\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function initializeFolders(): void {\n  setUpFolderFieldSkeletonScreen();\n  if (!foldersRefreshTimer_streaming) {\n    foldersRefreshTimer_streaming = true;\n    if (!foldersRefreshTimer_streamStarted) {\n      foldersRefreshTimer_streamStarted = true;\n      streamFolders();\n    } else {\n      refreshFolders();\n    }\n  }\n}\n","import { MaterialSymbols } from './material-symbols-type';\n\nexport function getIconHTML(identifier: MaterialSymbols): string {\n  return /*html*/ `<span class=\"css_material_symbols_rounded\">${identifier}</span>`;\n}\n","import { getCarInfo } from '../../data/apis/getCarInfo/index';\nimport { getLocation } from '../../data/apis/getLocation/index';\nimport { getMaterialSymbols } from '../../data/apis/getMaterialSymbols/index';\nimport { getRoute } from '../../data/apis/getRoute/index';\nimport { DataReceivingProgressEvent, deleteDataReceivingProgress, deleteDataUpdateTime, getDataReceivingProgress, setDataReceivingProgress } from '../../data/apis/loader';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\n\nconst dataDownloadRequestID = 'downloadData';\nexport let dataDownloadCompleted = false;\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeHeadElement = elementQuerySelector(HomeField, '.css_home_head');\nconst homeButtonRightElement = elementQuerySelector(HomeHeadElement, '.css_home_button_right');\nconst progressElement = elementQuerySelector(homeButtonRightElement, 'svg#download-svg path[progress=\"progress\"]');\n\nfunction handleDataReceivingProgressUpdates(event: Event): void {\n  const CustomEvent = event as DataReceivingProgressEvent;\n  const pixels = (1 - getDataReceivingProgress(dataDownloadRequestID)) * 189;\n  progressElement.style.setProperty('--b-cssvar-stroke-dashoffset', `${pixels}px`);\n  if (CustomEvent.detail.stage === 'end') {\n    document.removeEventListener(CustomEvent.detail.target, handleDataReceivingProgressUpdates);\n    progressElement.addEventListener(\n      'transitionend',\n      function () {\n        homeButtonRightElement.setAttribute('complete', 'true');\n      },\n      { once: true }\n    );\n    progressElement.style.setProperty('--b-cssvar-stroke-dashoffset', `${0}px`);\n    dataDownloadCompleted = true;\n  }\n}\n\nexport async function downloadData() {\n  /*\n  setDataReceivingProgress(dataDownloadRequestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getRoute_1', 0, false);\n  */\n  // eliminate duplicate downloads in integrateFolders\n  setDataReceivingProgress(dataDownloadRequestID, 'getLocation_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getLocation_1', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getCarInfo_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getCarInfo_1', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getMaterialSymbols', 0, false);\n  document.addEventListener(dataDownloadRequestID, handleDataReceivingProgressUpdates);\n  await getRoute(dataDownloadRequestID, true);\n  await getLocation(dataDownloadRequestID, 1);\n  await getCarInfo(dataDownloadRequestID, true);\n  await getMaterialSymbols(dataDownloadRequestID);\n  deleteDataReceivingProgress(dataDownloadRequestID);\n  deleteDataUpdateTime(dataDownloadRequestID);\n}\n","import { getUpdateRate } from '../../../data/analytics/update-rate/index';\nimport { integratedRecentView, integratedRecentViews, integrateRecentViews } from '../../../data/recent-views/index';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../../tools/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../../tools/query-selector';\nimport { openBus } from '../../bus/index';\nimport { getIconHTML } from '../../icons/index';\nimport { GeneratedElement, querySize } from '../../index';\nimport { openLocation } from '../../location/index';\nimport { openRoute } from '../../route/index';\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeBodyElement = elementQuerySelector(HomeField, '.css_home_body');\nconst RecentViewsField = elementQuerySelector(HomeBodyElement, '.css_home_recent_views');\nconst RecentViewsContentElement = elementQuerySelector(RecentViewsField, '.css_home_recent_views_content');\n\nlet previousIntegration = {};\nlet previousAnimation: boolean = false;\nlet previousSkeletonScreen: boolean = false;\n\nlet recentViewsRefreshTimer_retryInterval: number = 10 * 1000;\nlet recentViewsRefreshTimer_baseInterval: number = 15 * 1000;\nlet recentViewsRefreshTimer_minInterval: number = 5 * 1000;\nlet recentViewsRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet recentViewsRefreshTimer_dynamic: boolean = true;\nlet recentViewsRefreshTimer_streaming: boolean = false;\nlet recentViewsRefreshTimer_lastUpdate: number = 0;\nlet recentViewsRefreshTimer_nextUpdate: number = 0;\nlet recentViewsRefreshTimer_refreshing: boolean = false;\nlet recentViewsRefreshTimer_currentRequestID: string = '';\nlet recentViewsRefreshTimer_streamStarted: boolean = false;\nlet recentViewsRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nfunction generateElementOfRecentViewItem(): GeneratedElement {\n  // Main container\n  const recentViewsItemElement = document.createElement('div');\n  recentViewsItemElement.classList.add('css_home_recent_views_item');\n\n  // Head\n  const headElement = document.createElement('div');\n  headElement.classList.add('css_home_recent_views_item_head');\n\n  // Icon\n  const iconElement = document.createElement('div');\n  iconElement.classList.add('css_home_recent_views_item_icon');\n\n  // Title\n  const titleElement = document.createElement('div');\n  titleElement.classList.add('css_home_recent_views_item_title');\n\n  // Time\n  const timeElement = document.createElement('div');\n  timeElement.classList.add('css_home_recent_views_item_time');\n\n  // Assemble head\n  headElement.appendChild(iconElement);\n  headElement.appendChild(titleElement);\n  headElement.appendChild(timeElement);\n\n  // Name\n  const nameElement = document.createElement('div');\n  nameElement.classList.add('css_home_recent_views_item_name');\n\n  // Assemble item\n  recentViewsItemElement.appendChild(headElement);\n  recentViewsItemElement.appendChild(nameElement);\n\n  return {\n    element: recentViewsItemElement,\n    id: ''\n  };\n}\n\nfunction updateRecentViewsField(integration: integratedRecentViews, skeletonScreen: boolean, animation: boolean) {\n  function updateItem(thisElement: HTMLElement, thisItem: integratedRecentView, previousItem: integratedRecentView): void {\n    function updateIcon(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const iconElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_icon');\n      let icon = '';\n      switch (thisItem.type) {\n        case 'route':\n          icon = 'route';\n          break;\n        case 'location':\n          icon = 'location_on';\n          break;\n        case 'bus':\n          icon = 'directions_bus';\n          break;\n        case 'empty':\n          icon = 'lightbulb';\n          break;\n        default:\n          break;\n      }\n      iconElement.innerHTML = getIconHTML(icon);\n    }\n\n    function updateTitle(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const titleElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_title');\n      let title = '';\n      switch (thisItem.type) {\n        case 'route':\n          title = '路線';\n          break;\n        case 'location':\n          title = '地點';\n          break;\n        case 'bus':\n          title = '公車';\n          break;\n        case 'empty':\n          title = '提示';\n          break;\n        default:\n          break;\n      }\n      titleElement.innerText = title;\n    }\n\n    function updateTime(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const timeElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_time');\n      timeElement.innerText = thisItem.time.relative;\n    }\n\n    function updateName(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const nameElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_name');\n      nameElement.innerText = thisItem.name;\n    }\n\n    function updateOnclick(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      switch (thisItem.type) {\n        case 'route':\n          thisElement.onclick = function () {\n            openRoute(thisItem.id, thisItem.pid);\n          };\n          break;\n        case 'location':\n          thisElement.onclick = function () {\n            openLocation(thisItem.hash);\n          };\n          break;\n        case 'bus':\n          thisElement.onclick = function () {\n            openBus(thisItem.id);\n          };\n          break;\n        case 'empty':\n          thisElement.onclick = null;\n          break;\n        default:\n          break;\n      }\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateIcon(thisElement, thisItem);\n      updateTitle(thisElement, thisItem);\n      updateTime(thisElement, thisItem);\n      updateName(thisElement, thisItem);\n      updateOnclick(thisElement, thisItem);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (thisItem.type !== previousItem.type) {\n        updateIcon(thisElement, thisItem);\n        updateTitle(thisElement, thisItem);\n        updateTime(thisElement, thisItem);\n        updateName(thisElement, thisItem);\n        updateOnclick(thisElement, thisItem);\n        updateAnimation(thisElement, animation);\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      } else {\n        switch (thisItem.type) {\n          case 'location':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.hash, thisItem.hash)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'route':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.id, thisItem.id) || !compareThings(previousItem.pid, thisItem.pid)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'bus':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'empty':\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            break;\n          default:\n            break;\n        }\n        if (animation !== previousAnimation) {\n          updateAnimation(thisElement, animation);\n        }\n        if (skeletonScreen !== previousSkeletonScreen) {\n          updateSkeletonScreen(thisElement, skeletonScreen);\n        }\n      }\n    }\n  }\n\n  /*\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  */\n\n  const itemQuantity = integration.itemQuantity;\n\n  // Field.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n\n  const currentItemSeatQuantity = elementQuerySelectorAll(RecentViewsContentElement, '.css_home_recent_views_item').length;\n  if (itemQuantity !== currentItemSeatQuantity) {\n    const capacity = currentItemSeatQuantity - itemQuantity;\n    if (capacity < 0) {\n      const fragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newRecentViewItemElement = generateElementOfRecentViewItem();\n        fragment.appendChild(newRecentViewItemElement.element);\n      }\n      RecentViewsContentElement.append(fragment);\n    } else {\n      const RecentViewsItemElements = elementQuerySelectorAll(RecentViewsContentElement, '.css_home_recent_views_item');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const recentViewItemIndex = currentItemSeatQuantity - 1 - o;\n        RecentViewsItemElements[recentViewItemIndex].remove();\n      }\n    }\n  }\n\n  const RecentViewsItemElements = elementQuerySelectorAll(RecentViewsContentElement, '.css_home_recent_views_item');\n  for (let i = 0; i < itemQuantity; i++) {\n    const thisElement = RecentViewsItemElements[i];\n    const thisItem = integration.items[i];\n    if (previousIntegration.hasOwnProperty('items')) {\n      if (previousIntegration.items[i]) {\n        const previousItem = previousIntegration.items[i];\n        updateItem(thisElement, thisItem, previousItem);\n      } else {\n        updateItem(thisElement, thisItem, null);\n      }\n    } else {\n      updateItem(thisElement, thisItem, null);\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nexport function setUpRecentViewsFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const defaultItemQuantity = Math.floor(WindowSize.height / 70 / 3) + 2;\n  const items: Array<integratedRecentView> = [];\n  for (let i = 0; i < defaultItemQuantity; i++) {\n    items.push({\n      type: 'route',\n      id: 0,\n      pid: [],\n      time: {\n        absolute: 0,\n        relative: ''\n      },\n      name: ''\n    });\n  }\n  updateRecentViewsField(\n    {\n      items: items,\n      itemQuantity: items.length,\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nasync function refreshRecentViews() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  recentViewsRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  recentViewsRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  recentViewsRefreshTimer_refreshing = true;\n  recentViewsRefreshTimer_currentRequestID = generateIdentifier();\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'true');\n  const integration = await integrateRecentViews(recentViewsRefreshTimer_currentRequestID);\n  updateRecentViewsField(integration, false, playing_animation);\n  let updateRate = 0;\n  if (recentViewsRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  recentViewsRefreshTimer_lastUpdate = new Date().getTime();\n  if (recentViewsRefreshTimer_dynamic) {\n    recentViewsRefreshTimer_nextUpdate = Math.max(recentViewsRefreshTimer_lastUpdate + recentViewsRefreshTimer_minInterval, integration.dataUpdateTime + recentViewsRefreshTimer_baseInterval / updateRate);\n  } else {\n    recentViewsRefreshTimer_nextUpdate = recentViewsRefreshTimer_lastUpdate + recentViewsRefreshTimer_baseInterval;\n  }\n  recentViewsRefreshTimer_dynamicInterval = Math.max(recentViewsRefreshTimer_minInterval, recentViewsRefreshTimer_nextUpdate - recentViewsRefreshTimer_lastUpdate);\n  recentViewsRefreshTimer_refreshing = false;\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'false');\n}\n\nasync function streamRecentViews() {\n  refreshRecentViews()\n    .then(function () {\n      if (recentViewsRefreshTimer_streaming) {\n        recentViewsRefreshTimer_timer = setTimeout(function () {\n          streamRecentViews();\n        }, Math.max(recentViewsRefreshTimer_minInterval, recentViewsRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        recentViewsRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (recentViewsRefreshTimer_streaming) {\n        recentViewsRefreshTimer_timer = setTimeout(function () {\n          streamRecentViews();\n        }, recentViewsRefreshTimer_retryInterval);\n      } else {\n        recentViewsRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function initializeRecentViews(): void {\n  setUpRecentViewsFieldSkeletonScreen();\n  if (!recentViewsRefreshTimer_streaming) {\n    recentViewsRefreshTimer_streaming = true;\n    if (!recentViewsRefreshTimer_streamStarted) {\n      recentViewsRefreshTimer_streamStarted = true;\n      streamRecentViews();\n    } else {\n      refreshRecentViews();\n    }\n  }\n}\n"],"names":["HomeField","documentQuerySelector","HomeHeadElement","elementQuerySelector","HomeBodyElement","HomeFoldersElement","HomeUpdateTimerElement","previousIntegration","previousAnimation","previousSkeletonScreen","foldersRefreshTimer_baseInterval","foldersRefreshTimer_minInterval","foldersRefreshTimer_dynamicInterval","foldersRefreshTimer_dynamic","foldersRefreshTimer_lastUpdate","foldersRefreshTimer_nextUpdate","foldersRefreshTimer_currentRequestID","foldersRefreshTimer_refreshing","foldersRefreshTimer_streaming","foldersRefreshTimer_streamStarted","generateElementOfItem","itemElement","document","createElement","classList","add","setAttribute","iconElement","innerHTML","getIconHTML","contextElement","mainElement","capsuleElement","statusElement","nextSlideElement","currentSlideElement","appendChild","buttonElement","capsuleSeparatorElement","element","id","generateElementOfFolder","folderElement","headElement","nameElement","contentElement","handleDataReceivingProgressUpdates","event","CustomEvent","offsetRatio","detail","progress","style","setProperty","toString","stage","removeEventListener","target","setUpFolderFieldSkeletonScreen","playing_animation","getSettingOptionValue","WindowSize","querySize","FieldHeight","width","height","contentLength","Math","floor","folders","i","folder","name","icon","timestamp","content","j","push","type","status","code","text","time","direction","route","endPoints","departure","destination","pathAttributeId","updateFoldersElement","dataUpdateTime","integration","skeletonScreen","animation","updateItem","thisElement","thisItem","previousItem","updateType","updateIcon","updateStatus","thisElementRect","getBoundingClientRect","top","left","bottom","right","windowWidth","window","innerWidth","windowHeight","innerHeight","thisItemStatusElement","innerText","addEventListener","remove","once","updateMain","main","busID","updateContext","context","updateButton","onclick","openRoute","openLocation","updateAnimation","booleanToString","updateSkeletonScreen","compareThings","currentRoute","updateFolder","thisFolder","previousFolder","updateName","thisHeadElement","foldersLength","length","currentFolderSeatQuantity","elementQuerySelectorAll","capacity","fragment","DocumentFragment","o","abs","newFolderElement","append","FolderElements","thisFolderContentLength","thisFolderElement","thisFolderContentElement","currentItemSeatQuantity","newItemElement","FolderContentItemElements","FolderElements2","thisFolderContent","hasOwnProperty","thisFolderItemElements","refreshFolders","_refreshFolders","apply","arguments","_asyncToGenerator","refresh_interval_setting","dynamic","baseInterval","generateIdentifier","integrateFolders","updateRate","getUpdateRate","Date","getTime","max","streamFolders","_streamFolders","then","setTimeout","err","promptMessage","initializeFolders","identifier","dataDownloadRequestID","dataDownloadCompleted","homeButtonRightElement","progressElement","pixels","getDataReceivingProgress","downloadData","_downloadData","setDataReceivingProgress","getRoute","getLocation","getCarInfo","getMaterialSymbols","deleteDataReceivingProgress","deleteDataUpdateTime","RecentViewsField","RecentViewsContentElement","recentViewsRefreshTimer_baseInterval","recentViewsRefreshTimer_minInterval","recentViewsRefreshTimer_dynamic","recentViewsRefreshTimer_streaming","recentViewsRefreshTimer_lastUpdate","recentViewsRefreshTimer_nextUpdate","recentViewsRefreshTimer_currentRequestID","recentViewsRefreshTimer_streamStarted","generateElementOfRecentViewItem","recentViewsItemElement","titleElement","timeElement","updateRecentViewsField","updateTitle","title","updateTime","relative","updateOnclick","pid","hash","openBus","itemQuantity","newRecentViewItemElement","RecentViewsItemElements","items","setUpRecentViewsFieldSkeletonScreen","defaultItemQuantity","absolute","refreshRecentViews","_refreshRecentViews","integrateRecentViews","streamRecentViews","_streamRecentViews","initializeRecentViews"],"sourceRoot":""}