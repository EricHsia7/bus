{"version":3,"file":"eb3734d9fe8d5c80d63b.js","mappings":"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","sources":["webpack://bus/./src/tools/array.ts","webpack://bus/./src/tools/labels.ts","webpack://bus/./src/tools/address.ts","webpack://bus/./src/tools/convert.ts","webpack://bus/./src/tools/graphic.ts","webpack://bus/./src/tools/index.ts"],"sourcesContent":["// Function to split data based on delta\n\n/**\n * Splits data into groups based on delta between consecutive elements.\n *\n * @param {Array<[number, number]>} data - Array of tuples where each tuple contains two numbers.\n * @returns {Array<Array<[number, number]>>} - Array of groups, each containing arrays of tuples.\n */\n\nexport function splitDataByDelta(data: Array<[number, number]>): Array<Array<[number, number]>> {\n  const result: Array<Array<[number, number]>> = [];\n  let currentGroup: Array<[number, number]> = [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (i === 0 || data[i][0] - data[i - 1][0] > 0) {\n      if (currentGroup.length > 0) {\n        result.push(currentGroup);\n      }\n      currentGroup = [data[i]];\n    } else {\n      currentGroup.push(data[i]);\n    }\n  }\n\n  if (currentGroup.length > 0) {\n    result.push(currentGroup);\n  }\n\n  return result;\n}\n\nexport function areItemsDifferent(arr: Array): boolean {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        return false; // Found a duplicate\n      }\n    }\n  }\n  return true; // No duplicates found\n}\n\n/**\n * Get common items from the two arrays\n * @param arrayA - The first array\n * @param arrayB - The second array\n * @returns An array of the common items\n */\n\nexport function getIntersection(arrayA: Array, arrayB: Array): Array {\n  let result = [];\n  if (arrayA.length <= arrayB.length) {\n    for (const item of arrayA) {\n      if (arrayB.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  } else {\n    for (const item of arrayB) {\n      if (arrayA.indexOf(item) > -1) {\n        result.push(item);\n      }\n    }\n  }\n  return result;\n}\n","import { convertNumberToLetters } from './convert';\nimport { convertToUnitVector } from './math';\n\nexport function generateLetterLabels(quantity: number): Array<string> {\n  let result = [];\n  for (let i = 0; i < quantity; i++) {\n    result.push(`地點${convertNumberToLetters(i + 1)}`);\n  }\n  return result;\n}\n\nexport function generateDirectionLabels(setsOfVectors: Array<Array<[number, number]>>): Array<string> {\n  let result = [];\n  const unknownVector = [0, 0];\n  // cardinal directions\n  const NorthVector = [0, 1];\n  const EastVector = [1, 0];\n  const WestVector = [-1, 0];\n  const SouthVector = [0, -1];\n  // intercardinal directions\n  const NorthEastVector = [Math.SQRT1_2, Math.SQRT1_2]; // 45 degrees\n  const SouthEastVector = [Math.SQRT1_2, -Math.SQRT1_2]; // 135 degrees\n  const SouthWestVector = [-Math.SQRT1_2, -Math.SQRT1_2]; // 225 degrees\n  const NorthWestVector = [-Math.SQRT1_2, Math.SQRT1_2]; // 315 degrees\n\n  const directions = [\n    {\n      vector: unknownVector,\n      label: '未知'\n    },\n    {\n      vector: NorthVector,\n      label: '北↑'\n    },\n    {\n      vector: EastVector,\n      label: '東→'\n    },\n    {\n      vector: SouthVector,\n      label: '南↓'\n    },\n    {\n      vector: WestVector,\n      label: '西←'\n    },\n    {\n      vector: NorthEastVector,\n      label: '東北↗'\n    },\n    {\n      vector: SouthEastVector,\n      label: '東南↘'\n    },\n    {\n      vector: SouthWestVector,\n      label: '西南↙'\n    },\n    {\n      vector: NorthWestVector,\n      label: '西北↖'\n    }\n  ];\n\n  for (const vectorSet of setsOfVectors) {\n    let x = 0;\n    let y = 0;\n    for (const vector of vectorSet) {\n      x += vector[0];\n      y += vector[1];\n    }\n    const meanVector = convertToUnitVector([x, y]);\n    let result2 = [];\n    for (const direction of directions) {\n      const dotProduct = direction.vector[0] * meanVector[0] + direction.vector[1] * meanVector[1];\n      result2.push({ label: direction.label, dotProduct: dotProduct });\n    }\n    result2 = result2.sort(function (a, b) {\n      return b.dotProduct - a.dotProduct;\n    });\n    const bestMatch = result2[0];\n    result.push(bestMatch.label);\n  }\n  return result;\n}\n","import { generateLetterLabels } from './labels';\nimport { areItemsDifferent } from './array';\n\ninterface AddressPart {\n  suffixes?: string;\n  key: keyof ParsedAddress;\n  process: (e: Array<string> | null) => Array<string> | Array<number> | null;\n  type: number;\n}\n\nexport interface ParsedAddress {\n  city: Array<string>;\n  district: Array<string>;\n  area: Array<string>;\n  road: Array<string>;\n  road_section: Array<number>;\n  alley: Array<number>;\n  alley_branch: Array<number>;\n  doorplate: Array<number>;\n  floornumber: Array<string>;\n  exit: Array<string>;\n  direction: Array<string>;\n  [key: string]: Array<string> | Array<number> | null;\n}\n\ninterface FeatureCounts {\n  [key: string]: { count: number; chars: string; index: number };\n}\n\nexport function mergeAddressesIntoOne(addresses: Array<string>): ParsedAddress | string {\n  const parts: Array<AddressPart> = [\n    {\n      suffixes: '市',\n      key: 'city',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '區',\n      key: 'district',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '鄉鎮村里',\n      key: 'area',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '路街道',\n      key: 'road',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.replaceAll(/[\\(\\)\\（\\）]/gim, '').trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '段',\n      key: 'road_section',\n      process: function (e) {\n        var toNumber = function (char) {\n          switch (char) {\n            case '一':\n              return 1;\n              break;\n            case '二':\n              return 2;\n              break;\n            case '三':\n              return 3;\n              break;\n            case '四':\n              return 4;\n              break;\n            case '五':\n              return 5;\n              break;\n            case '六':\n              return 6;\n              break;\n            case '七':\n              return 7;\n              break;\n            case '八':\n              return 8;\n              break;\n            case '九':\n              return 9;\n              break;\n            case '十':\n              return 10;\n              break;\n          }\n          if (!isNaN(parseInt(char))) {\n            return parseInt(char);\n          }\n          return 0;\n        };\n        var len = String(e).length;\n        var numbers = [];\n        for (let i = 0; i < len; i++) {\n          var p = toNumber(String(e).charAt(i));\n          if (p === 10) {\n            if (numbers.length > 0) {\n              numbers = [numbers.reduce((a, b) => a + b, 0) * 10];\n            }\n          } else {\n            numbers = [numbers.reduce((a, b) => a + b, 0) + p];\n          }\n        }\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '巷',\n      key: 'alley',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[巷]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '弄',\n      key: 'alley_branch',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return parseInt(t.trim().replaceAll(/[弄]/gim));\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      suffixes: '號',\n      key: 'doorplate',\n      process: function (e) {\n        var numbers = String(e).match(/[0-9]+/gim);\n        numbers =\n          numbers?.map((n) => {\n            if (n === null) {\n              return null;\n            } else {\n              return parseInt(n);\n            }\n          }) || null;\n        return numbers;\n      },\n      type: 0\n    },\n    {\n      suffixes: '樓',\n      key: 'floornumber',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 0\n    },\n    {\n      key: 'exit',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim();\n          });\n        }\n      },\n      type: 2\n    },\n    {\n      key: 'direction',\n      process: function (e) {\n        if (e === null) {\n          return null;\n        } else {\n          return e.map((t) => {\n            return t.trim().replace(/[往向]/gim, '');\n          });\n        }\n      },\n      type: 1\n    }\n  ];\n\n  function parseAddress(address: string): object {\n    function regex(suffixes, type) {\n      if (type === 0) {\n        return new RegExp(`([^市區鄉鎮村里路段街道巷弄號樓與]+[${suffixes}])`, 'gmi');\n      }\n      if (type === 1) {\n        return new RegExp(`([往向]+[東南西北])`, 'gmi');\n      }\n      if (type === 2) {\n        return new RegExp(`([0-9]+[號]出口)`, 'gmi');\n      }\n    }\n    var result = {};\n    for (var part of parts) {\n      var r = regex(part?.suffixes, part.type);\n      result[part.key] = part.process(String(address).match(r));\n    }\n    return result;\n  }\n\n  function mergeAddresses(addresses: Array<string>): object {\n    var result = {};\n    for (var address of addresses) {\n      var parsedAddress = parseAddress(address);\n      for (var part of parts) {\n        if (!result.hasOwnProperty(part.key)) {\n          result[part.key] = [];\n        }\n        result[part.key] = result[part.key].concat(parsedAddress[part.key]);\n      }\n    }\n    for (var key in result) {\n      result[key] = Array.from(new Set(result[key]))\n        .filter((e) => (e ? true : false))\n        .sort(function (a, b) {\n          if (typeof a === 'number' && typeof b === 'number') {\n            return a - b;\n          } else {\n            return String(a).charCodeAt(0) - String(b).charCodeAt(0);\n          }\n        });\n    }\n    return result;\n  }\n  return mergeAddresses(addresses);\n}\n\nexport function addressToString(address: ParsedAddress): string {\n  return `${address.city.join('')}${address.district.join('')}${address.road.join('、')}${\n    address.road_section.sort(function (a, b) {\n      return a - b;\n    }).length > 0\n      ? address.road_section.join('、') + '段'\n      : ''\n  }${\n    address.alley.length > 0\n      ? address.alley\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '巷'\n      : ''\n  }${\n    address.alley_branch.length > 0\n      ? address.alley_branch\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '弄'\n      : ''\n  }${\n    address.doorplate.length > 0\n      ? address.doorplate\n          .sort(function (a, b) {\n            return a - b;\n          })\n          .join('、') + '號'\n      : ''\n  }${address.floornumber.length > 0 ? address.floornumber.join('、') + '樓' : ''}${address.direction.length > 0 ? '（朝' + address.direction.join('、') + '）' : ''}`;\n}\n\nexport function extractCommonFeaturesFromAddresses(addresses: Array<string>): string {\n  // Create an object to store feature occurrences\n  const featureCounts: { [key: string]: { count: number; chars: string; index: number } } = {};\n\n  // Create a set to store unique simplified addresses\n  const simplifiedSet = new Set<string>();\n\n  // Iterate through each address\n  for (const address of addresses) {\n    // Extract common features by splitting the address\n    const features = String(address)\n      .split('')\n      .filter((feature) => feature.trim() !== '');\n\n    // Join the extracted features to create a simplified address\n    const simplifiedAddress = features.join('');\n\n    // Add the simplified address to the set\n    simplifiedSet.add(simplifiedAddress);\n\n    // Count occurrences of each feature\n    let index = 0;\n    for (const feature of features) {\n      // Check if the feature is a digit\n      if (!isNaN(parseInt(feature))) {\n        // Create a key for the digit feature\n        const digitKey = `digit_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[digitKey] = {\n          count: (featureCounts[digitKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      } else {\n        // Create a key for non-digit features\n        const featureKey = `chars_${index}_${feature.charCodeAt(0)}`;\n        featureCounts[featureKey] = {\n          count: (featureCounts[featureKey]?.count || 0) + 1,\n          chars: feature,\n          index: index\n        };\n      }\n      index += 1;\n    }\n  }\n\n  // Set threshold and limit for filtering features\n  const threshold = addresses.length * 0.6;\n  const limit = addresses.length * 1;\n\n  // Convert the feature counts object to an array of [feature, count] pairs\n  const sortedFeatures = Object.entries(featureCounts)\n    .filter((pair) => threshold <= pair[1].count && pair[1].count <= limit)\n    .sort((a, b) => a[1].index - b[1].index);\n\n  // Extract the features from the sorted array\n  const commonFeatures = sortedFeatures.map((pair) => pair[1].chars);\n\n  return commonFeatures.join('');\n}\n\nexport function generateLabelFromAddresses(addresses: Array<ParsedAddress>): Array<string> {\n  let result = [];\n  let filledProperties = {};\n  for (const address of addresses) {\n    for (const key in address) {\n      if (!filledProperties.hasOwnProperty(key)) {\n        filledProperties[key] = 0;\n      }\n      if (address[key].length > 0) {\n        filledProperties[key] = filledProperties[key] + 1;\n      }\n    }\n  }\n  let commonProperties = Object.entries(filledProperties)\n    .map((property) => {\n      return { key: property[0], value: property[1] };\n    })\n    .filter((e) => {\n      return e.value === addresses.length ? true : false;\n    })\n    .sort(function (a, b) {\n      return a.value - b.value;\n    });\n  if (commonProperties.length > 0) {\n    for (const commonProperty of commonProperties) {\n      let components = [];\n      for (const address of addresses) {\n        components.push(address[commonProperty.key].join(''));\n      }\n      if (areItemsDifferent(components)) {\n        result.push({ components: components, len: Math.max(...components.map((e) => e.length)) });\n      }\n    }\n  }\n\n  if (result.length > 0) {\n    result = result.sort(function (a, b) {\n      return a.len - b.len;\n    });\n    return result[0].components;\n  } else {\n    const addressesLength = addresses.length;\n    return generateLetterLabels(addressesLength);\n  }\n}\n","export function convertPositionsToDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6378.137;\n  const dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\n  const dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c;\n  return d * 1000; // measured in meters\n}\n\nexport function convertBytes(contentLength: number): string {\n  const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let i = 0;\n\n  while (contentLength >= 1024 && i < units.length - 1) {\n    contentLength /= 1024;\n    i++;\n  }\n\n  return `${contentLength.toFixed(2)} ${units[i]}`;\n}\n\nexport function convertNumberToLetters(number: number): string {\n  let result = '';\n  while (number > 0) {\n    let remainder = (number - 1) % 26; // Adjust for 1-based indexing\n    let letter = String.fromCharCode(remainder + 65); // A=65 in ASCII\n    result = letter + result;\n    number = Math.floor((number - 1) / 26); // Update number for next iteration\n  }\n  return result;\n}","export function getTextWidth(text: string, weight: number, size: string, fontFamily: string): number {\n  const canvas: HTMLCanvasElement = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  const font: string = `${weight} ${size} ${fontFamily}`;\n  context.font = font;\n  return context.measureText(text).width;\n}\n\nexport function getTextHeight(text: string, weight: number, size: string, fontFamily: string): number {\n  const canvas: HTMLCanvasElement = getTextHeight.canvas || (getTextHeight.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  const font: string = `${weight} ${size} ${fontFamily}`;\n  context.font = font;\n  context.textBaseline = 'top';\n  return context.measureText(text).actualBoundingBoxDescent;\n}\n\ninterface BorderRadius {\n  tl: number;\n  tr: number;\n  br: number;\n  bl: number;\n}\n\nexport function drawRoundedRect(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number | BorderRadius, fill: string): void {\n  // If radius is a single value, treat it as the same for all corners\n  if (typeof radius === 'number') {\n    radius = { tl: radius, tr: radius, br: radius, bl: radius };\n  } else {\n    // Set defaults if individual radii are not provided\n    radius = {\n      tl: radius.tl || 0,\n      tr: radius.tr || 0,\n      br: radius.br || 0,\n      bl: radius.bl || 0\n    };\n  }\n\n  // Start path\n  ctx.beginPath();\n  // Move to the top-left corner, accounting for the top-left radius\n  ctx.moveTo(x + radius.tl, y);\n  // Draw the top line, rounding the top-right corner\n  ctx.lineTo(x + width - radius.tr, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n  // Draw the right side, rounding the bottom-right corner\n  ctx.lineTo(x + width, y + height - radius.br);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n  // Draw the bottom side, rounding the bottom-left corner\n  ctx.lineTo(x + radius.bl, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n  // Draw the left side, rounding the top-left corner\n  ctx.lineTo(x, y + radius.tl);\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n  // Complete the path\n  ctx.closePath();\n\n  ctx.fillStyle = fill;\n  ctx.fill(); // To fill the shape\n}\n","export const md5 = require('md5');\nexport const sha256 = require('sha256');\n\nexport function compareThings(a: any, b: any): boolean {\n  function anyToString(any: any): string {\n    return JSON.stringify({ e: any });\n  }\n  const ax = anyToString(a);\n  const bx = anyToString(b);\n  const length: number = 32;\n  const axLength: number = ax.length;\n  const bxLength: number = bx.length;\n  if (axLength === bxLength) {\n    if (axLength > length || bxLength > length) {\n      const hash_a: string = md5(ax);\n      const hash_b: string = md5(bx);\n\n      let equal: boolean = true;\n      for (let i = 0; i < 8; i++) {\n        const a_i: string = hash_a.charAt(i);\n        const b_i: string = hash_b.charAt(i);\n        if (a_i === b_i) {\n          continue;\n        } else {\n          equal = false;\n          break;\n        }\n      }\n      return equal;\n    } else {\n      if (ax === bx) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  } else {\n    return false;\n  }\n}\n\nexport function generateIdentifier(prefix: string = ''): string {\n  /*\n  const characterSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n  let result = `${prefix}_`;\n  const length: number = 16;\n  for (let i = 0; i < length; i++) {\n    const randomNumber = Math.floor(Math.random() * characterSet.length);\n    result += characterSet.substring(randomNumber, randomNumber + 1);\n  }\n  return result;\n  */\n  const randomNumber = Math.random();\n  const randomNumber2 = Math.random();\n  return `${prefix}${randomNumber2.toString(36).substring(2, 9)}${randomNumber.toString(36).substring(2, 9)}`;\n}\n\nexport function getNoCacheParameter(interval: number): string {\n  const time = new Date().getTime();\n  const number = (time / interval).toFixed(0) * interval;\n  const string = number.toString(36);\n  return string;\n}\n\nexport function releaseFile(content: string, type: string = 'application/json', fileName: string): void {\n  const blob = new Blob([content], { type: type });\n  const fileObj = new File([blob], fileName, { type: type });\n  if (navigator.canShare && navigator.canShare({ files: [fileObj] })) {\n    navigator\n      .share({\n        files: [fileObj]\n      })\n      .catch((error) => {});\n  } else {\n    const blobURL = URL.createObjectURL(blob);\n    const downloadLink = document.createElement('a');\n    downloadLink.href = blobURL;\n    downloadLink.download = fileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    downloadLink.remove();\n    setTimeout(() => {\n      URL.revokeObjectURL(blobURL);\n    }, 10 * 1000);\n  }\n}\n\nexport function isRunningStandalone(): boolean {\n  return window.matchMedia('(display-mode: standalone)').matches;\n}\n\nexport function supportTouch(): boolean {\n  if ('ontouchstart' in window || navigator.maxTouchPoints) {\n    // Touch events are supported\n    return true;\n  } else {\n    // Touch events are not supported\n    return false;\n  }\n}\n\nexport function booleanToString(x: boolean): 'true' | 'false' {\n  if (typeof x === 'boolean') {\n    if (x) {\n      return 'true';\n    } else {\n      return 'false';\n    }\n  }\n}\n\nexport function isValidURL(string: string): boolean {\n  try {\n    new URL(string);\n    return true; // If no error is thrown, it's a valid URL\n  } catch (_) {\n    return false; // Invalid URL\n  }\n}\n\nexport function nearestPowerOf2(x: number): number {\n  return 1 << (31 - Math.clz32(x));\n}\n"],"names":["areItemsDifferent","arr","i","length","j","getIntersection","arrayA","arrayB","result","_step","_iterator","_createForOfIteratorHelper","s","n","done","item","value","indexOf","push","err","e","f","_step2","_iterator2","generateLetterLabels","quantity","convertNumberToLetters","generateDirectionLabels","setsOfVectors","directions","vector","label","Math","SQRT1_2","vectorSet","x","y","_step3","meanVector","convertToUnitVector","result2","_iterator3","direction","dotProduct","bestMatch","sort","a","b","addressToString","address","city","join","district","road","road_section","alley","alley_branch","doorplate","floornumber","generateLabelFromAddresses","addresses","_step4","filledProperties","_iterator4","key","hasOwnProperty","commonProperties","Object","entries","map","property","filter","_step5","_iterator5","_step6","commonProperty","components","_iterator6","len","max","apply","_toConsumableArray","addressesLength","convertPositionsToDistance","lat1","lon1","lat2","lon2","dLat","PI","dLon","sin","cos","atan2","sqrt","convertBytes","contentLength","units","toFixed","number","remainder","String","fromCharCode","floor","getTextWidth","text","weight","size","fontFamily","context","canvas","document","createElement","getContext","font","measureText","width","drawRoundedRect","ctx","height","radius","fill","tl","tr","br","bl","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fillStyle","md5","require","sha256","compareThings","anyToString","any","JSON","stringify","ax","bx","axLength","bxLength","hash_a","hash_b","equal","charAt","generateIdentifier","prefix","arguments","undefined","randomNumber","random","toString","substring","getNoCacheParameter","interval","Date","getTime","releaseFile","content","type","fileName","blob","Blob","fileObj","File","navigator","canShare","files","share","error","blobURL","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","remove","setTimeout","revokeObjectURL","isRunningStandalone","window","matchMedia","matches","supportTouch","maxTouchPoints","booleanToString","isValidURL","string","_"],"sourceRoot":""}