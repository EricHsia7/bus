{"version":3,"file":"5af628c28c45b65dca8c.js","mappings":"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","sources":["webpack://bus/./src/interface/route/index.ts"],"sourcesContent":["import { IntegratedRoute, integratedStopItem, integrateRoute } from '../../data/route/index';\nimport { getIconHTML } from '../icons/index';\nimport { getDataReceivingProgress } from '../../data/apis/loader';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../tools/index';\nimport { getTextWidth } from '../../tools/graphic';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../tools/query-selector';\nimport { getUpdateRate } from '../../data/analytics/update-rate/index';\nimport { isFolderContentSaved } from '../../data/folder/index';\nimport { GeneratedElement, pushPageHistory, closePreviousPage, openPreviousPage, GroupStyles, querySize, GroupScrollTops } from '../index';\nimport { promptMessage } from '../prompt/index';\nimport { indexToDay, timeObjectToString } from '../../tools/time';\nimport { logRecentView } from '../../data/recent-views/index';\nimport { stopHasNotifcationSchedules } from '../../data/notification/index';\n\nconst RouteField = documentQuerySelector('.css_route_field');\nconst RouteHeadElement = elementQuerySelector(RouteField, '.css_route_head');\nconst RouteNameElement = elementQuerySelector(RouteHeadElement, '.css_route_name');\nconst RouteButtonRightElement = elementQuerySelector(RouteHeadElement, '.css_route_button_right');\nconst RouteUpdateTimerElement = elementQuerySelector(RouteHeadElement, '.css_route_update_timer_box .css_route_update_timer');\nconst RouteGroupTabsElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tabs');\nconst RouteGroupTabsTrayElement = elementQuerySelector(RouteGroupTabsElement, '.css_route_group_tabs_tray');\nconst RouteGroupTabLineTrackElement = elementQuerySelector(RouteHeadElement, '.css_route_group_tab_line_track');\nconst RouteGroupTabLineElement = elementQuerySelector(RouteGroupTabLineTrackElement, '.css_route_group_tab_line');\nconst RouteGroupsElement = elementQuerySelector(RouteField, '.css_route_groups');\n\nlet previousIntegration = {} as IntegratedRoute;\nlet previousAnimation: boolean = true;\nlet previousSkeletonScreen: boolean = false;\n\nlet routeSliding_initialIndex: number = 0;\nlet routeSliding_targetIndex: number = 0;\nlet routeSliding_groupQuantity: number = 0;\nlet routeSliding_groupStyles: GroupStyles = {};\nlet routeSliding_fieldWidth: number = 0;\nlet routeSliding_fieldHeight: number = 0;\nlet routeSliding_sliding: boolean = false;\n\nlet routeRefreshTimer_retryInterval: number = 10 * 1000;\nlet routeRefreshTimer_baseInterval: number = 15 * 1000;\nlet routeRefreshTimer_minInterval: number = 5 * 1000;\nlet routeRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet routeRefreshTimer_dynamic: boolean = true;\nlet routeRefreshTimer_streaming: boolean = false;\nlet routeRefreshTimer_lastUpdate: number = 0;\nlet routeRefreshTimer_nextUpdate: number = 0;\nlet routeRefreshTimer_refreshing: boolean = false;\nlet routeRefreshTimer_currentRequestID: string = '';\nlet routeRefreshTimer_currentProgress: number = -1;\nlet routeRefreshTimer_targetProgress: number = -1;\nlet routeRefreshTimer_streamStarted: boolean = false;\nvar routeRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nlet currentRouteIDSet_RouteID: number = 0;\nlet currentRouteIDSet_PathAttributeId: Array<number> = [];\n\nlet tabPadding: number = 20;\n\nexport function initializeRouteSliding(): void {\n  RouteGroupsElement.addEventListener(\n    'touchstart',\n    function () {\n      routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n    },\n    { passive: true }\n  );\n\n  RouteGroupsElement.addEventListener(\n    'scroll',\n    function (event: Event) {\n      routeSliding_sliding = true;\n      const target = event.target as HTMLElement;\n      const currentIndex = target.scrollLeft / routeSliding_fieldWidth;\n      if (currentIndex > routeSliding_initialIndex) {\n        routeSliding_targetIndex = routeSliding_initialIndex + 1;\n      } else {\n        routeSliding_targetIndex = routeSliding_initialIndex - 1;\n      }\n      const initialSize = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`] || { width: 0, offset: 0 };\n      const targetSize = routeSliding_groupStyles[`g_${routeSliding_targetIndex}`] || { width: 0, offset: 0 };\n      const tabWidth = initialSize.width + (targetSize.width - initialSize.width) * Math.abs(currentIndex - routeSliding_initialIndex);\n      const offset = (initialSize.offset + (targetSize.offset - initialSize.offset) * Math.abs(currentIndex - routeSliding_initialIndex)) * -1 + routeSliding_fieldWidth * 0.5 - tabWidth * 0.5;\n\n      updateRouteCSS(routeSliding_groupQuantity, offset, tabWidth - tabPadding, currentIndex);\n\n      if (currentIndex === routeSliding_targetIndex) {\n        routeSliding_initialIndex = Math.round(RouteGroupsElement.scrollLeft / routeSliding_fieldWidth);\n        routeSliding_sliding = false;\n      }\n    },\n    { passive: true }\n  );\n}\n\nexport function ResizeRouteField(): void {\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  RouteField.style.setProperty('--b-cssvar-route-field-width', `${FieldWidth}px`);\n  RouteField.style.setProperty('--b-cssvar-route-field-height', `${FieldHeight}px`);\n}\n\nexport function updateRouteCSS(groupQuantity: number, offset: number, tabLineWidth: number, percentage: number): void {\n  RouteGroupsElement.style.setProperty('--b-cssvar-route-group-quantity', groupQuantity.toString());\n  RouteGroupTabLineElement.style.setProperty('--b-cssvar-route-tab-line-width-scale', (tabLineWidth / 10).toString());\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-tabs-tray-offset', `${offset.toFixed(5)}px`);\n  RouteGroupTabsTrayElement.style.setProperty('--b-cssvar-route-percentage', percentage.toFixed(5));\n}\n\nfunction updateUpdateTimer(): void {\n  const smoothingFactor = 0.1;\n  const time = new Date().getTime();\n  if (routeRefreshTimer_refreshing) {\n    routeRefreshTimer_targetProgress = -1 + getDataReceivingProgress(routeRefreshTimer_currentRequestID);\n    routeRefreshTimer_currentProgress += (routeRefreshTimer_targetProgress - routeRefreshTimer_currentProgress) * smoothingFactor;\n  } else {\n    routeRefreshTimer_targetProgress = -1 * Math.min(1, Math.max(0, Math.abs(time - routeRefreshTimer_lastUpdate) / routeRefreshTimer_dynamicInterval));\n    routeRefreshTimer_currentProgress = routeRefreshTimer_targetProgress;\n  }\n  RouteUpdateTimerElement.style.setProperty('--b-cssvar-update-timer', routeRefreshTimer_currentProgress.toString());\n  window.requestAnimationFrame(function () {\n    if (routeRefreshTimer_streaming) {\n      updateUpdateTimer();\n    }\n  });\n}\n\nfunction generateElementOfThreadBox(): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_thread_box');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_thread\"></div><div class=\"css_route_group_thread_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfItem(threadBoxIdentifier: string): GeneratedElement {\n  var identifier = generateIdentifier('i');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_item');\n  element.id = identifier;\n  element.setAttribute('stretched', 'false');\n  element.innerHTML = /*html*/ `<div class=\"css_route_group_item_head\"><div class=\"css_route_group_item_name\"></div><div class=\"css_route_group_item_capsule\"><div class=\"css_route_group_item_status\"><div class=\"css_next_slide\" code=\"0\"></div><div class=\"css_current_slide\" code=\"0\"></div></div><div class=\"css_route_group_item_stretch\" onclick=\"bus.route.stretchRouteItemBody('${identifier}', '${threadBoxIdentifier}')\">${getIconHTML('keyboard_arrow_down')}</div><div class=\"css_route_group_item_capsule_separator\"></div></div></div><div class=\"css_route_group_item_body\" displayed=\"false\"><div class=\"css_route_group_item_buttons\"><div class=\"css_route_group_item_button\" highlighted=\"true\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 0)\" code=\"0\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('directions_bus')}</div>公車</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 1)\" code=\"1\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('departure_board')}</div>抵達時間</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"tab\" onclick=\"bus.route.switchRouteBodyTab('${identifier}', 2)\" code=\"2\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('route')}</div>路線</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"save-to-folder\" onclick=\"bus.folder.openSaveToFolder('stop-on-route', ['${identifier}', null, null])\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('folder')}</div>儲存至資料夾</div><div class=\"css_route_group_item_button\" highlighted=\"false\" type=\"schedule-notification\" onclick=\"bus.notification.openScheduleNotification('stop-on-route', ['${identifier}', null, null, null])\" enabled=\"true\"><div class=\"css_route_group_item_button_icon\">${getIconHTML('notifications')}</div>設定到站通知</div></div><div class=\"css_route_group_item_buses\" displayed=\"true\"></div><div class=\"css_route_group_item_overlapping_routes\" displayed=\"false\"></div><div class=\"css_route_group_item_bus_arrival_times\" displayed=\"false\"></div></div>`;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction generateElementOfGroup(): GeneratedElement {\n  // const identifier = generateIdentifier('g');\n  const element = document.createElement('div');\n  element.classList.add('css_route_group');\n  // element.id = identifier;\n  const tracksElement = document.createElement('div');\n  tracksElement.classList.add('css_route_group_tracks');\n\n  const threadTrackElement = document.createElement('div');\n  threadTrackElement.classList.add('css_route_group_threads_track');\n\n  const itemsTrackElement = document.createElement('div');\n  itemsTrackElement.classList.add('css_route_group_items_track');\n\n  tracksElement.appendChild(threadTrackElement);\n  tracksElement.appendChild(itemsTrackElement);\n  element.appendChild(tracksElement);\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction generateElementOfTab(): GeneratedElement {\n  var identifier = generateIdentifier('t');\n  var element = document.createElement('div');\n  element.classList.add('css_route_group_tab');\n  element.id = identifier;\n  return {\n    element: element,\n    id: identifier\n  };\n}\n\nfunction setUpRouteFieldSkeletonScreen(Field: HTMLElement): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const defaultItemQuantity: number = Math.floor(FieldHeight / 50) + 5;\n  const defaultGroupQuantity = 2;\n  let groupedItems: IntegratedRoute['groupedItems'] = {};\n  for (let i = 0; i < defaultGroupQuantity; i++) {\n    const groupKey: string = `g_${i}`;\n    groupedItems[groupKey] = [];\n    for (let j = 0; j < defaultItemQuantity; j++) {\n      groupedItems[groupKey].push({\n        name: '',\n        goBack: '0',\n        status: { code: 8, text: '', time: -6 },\n        buses: [],\n        overlappingRoutes: [],\n        busArrivalTimes: [],\n        sequence: j,\n        position: {\n          longitude: 0,\n          latitude: 0\n        },\n        nearest: false,\n        progress: 0,\n        segmentBuffer: {\n          isSegmentBuffer: false,\n          isStartingPoint: false,\n          isEndingPoint: false\n        },\n        id: 0\n      });\n    }\n  }\n  updateRouteField(\n    Field,\n    {\n      groupedItems: groupedItems,\n      groupQuantity: defaultGroupQuantity,\n      itemQuantity: {\n        g_0: defaultItemQuantity,\n        g_1: defaultItemQuantity\n      },\n      RouteName: '載入中',\n      RouteEndPoints: {\n        RouteDeparture: '載入中',\n        RouteDestination: '載入中'\n      },\n      RouteID: 0,\n      PathAttributeId: [],\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction checkItemElementVisibility(boxHeight: number, groupIndex: number, index: number, scrollTop: number): boolean {\n  const itemHeight = 50;\n  if (routeSliding_initialIndex !== groupIndex && routeSliding_targetIndex !== groupIndex) {\n    return false;\n  }\n  const itemQuantityFromTop = Math.floor(scrollTop / itemHeight) - 1;\n  const itemQuantityWithinBox = Math.floor(boxHeight / itemHeight) + 1;\n  if (index < itemQuantityFromTop) {\n    return false;\n  }\n  if (index > itemQuantityFromTop + itemQuantityWithinBox) {\n    return false;\n  }\n  return true;\n}\n\nfunction updateRouteField(Field: HTMLElement, integration: IntegratedRoute, skeletonScreen: boolean, animation: boolean) {\n  function updateItem(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, groupIndex: number, index: number, scrollTop: number): void {\n    function updateStatus(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, groupIndex: number, index: number, scrollTop: number, animation: boolean): void {\n      /*\n      const thisItemElementRect = thisItemElement.getBoundingClientRect();\n      const top = thisItemElementRect.top;\n      const left = thisItemElementRect.left;\n      const bottom = thisItemElementRect.bottom;\n      const right = thisItemElementRect.right;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n      */\n      const thisThreadStatusElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread_status');\n      const currentThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_current_slide');\n      const nextThreadSlideElement = elementQuerySelector(thisThreadStatusElement, '.css_next_slide');\n\n      const thisItemStatusElement = elementQuerySelector(thisItemElement, '.css_route_group_item_status');\n      const currentItemSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n      const nextItemSlideElememt = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n\n      nextThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n\n      nextItemSlideElememt.setAttribute('code', thisItem.status.code.toString());\n      nextItemSlideElememt.innerText = thisItem.status.text;\n\n      if (animation && checkItemElementVisibility(routeSliding_fieldHeight, groupIndex, index, scrollTop)) {\n        currentThreadSlideElement.addEventListener(\n          'animationend',\n          function () {\n            currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n            currentThreadSlideElement.classList.remove('css_slide_fade_out');\n          },\n          { once: true }\n        );\n        currentItemSlideElement.addEventListener(\n          'animationend',\n          function () {\n            currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n            currentItemSlideElement.innerText = thisItem.status.text;\n            currentItemSlideElement.classList.remove('css_slide_fade_out');\n          },\n          { once: true }\n        );\n        currentThreadSlideElement.classList.add('css_slide_fade_out');\n        currentItemSlideElement.classList.add('css_slide_fade_out');\n      } else {\n        currentThreadSlideElement.setAttribute('code', thisItem.status.code.toString());\n\n        currentItemSlideElement.setAttribute('code', thisItem.status.code.toString());\n        currentItemSlideElement.innerText = thisItem.status.text;\n      }\n    }\n\n    function updateSegmentBuffer(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n      thisThreadBoxElement.setAttribute('segment-buffer', booleanToString(thisItem.segmentBuffer.isSegmentBuffer));\n    }\n\n    function updateName(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_name').innerText = thisItem.name;\n    }\n\n    function updateBuses(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_buses').innerHTML = thisItem.buses.length === 0 ? '<div class=\"css_route_group_item_buses_message\">目前沒有公車可顯示</div>' : thisItem.buses.map((bus) => `<div class=\"css_route_group_item_bus\" on-this-route=\"${bus.onThisRoute}\"><div class=\"css_route_group_item_bus_title\"><div class=\"css_route_group_item_bus_icon\">${getIconHTML('directions_bus')}</div><div class=\"css_route_group_item_bus_car_number\">${bus.carNumber}</div></div><div class=\"css_route_group_item_bus_attributes\"><div class=\"css_route_group_item_bus_route\">路線：${bus.RouteName}</div><div class=\"css_route_group_item_bus_car_status\">狀態：${bus.status.text}</div><div class=\"css_route_group_item_bus_car_type\">類型：${bus.type}</div></div></div>`).join('');\n    }\n\n    function updateOverlappingRoutes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_overlapping_routes').innerHTML = thisItem.overlappingRoutes.length === 0 ? '<div class=\"css_route_group_item_overlapping_route_message\">目前沒有路線可顯示</div>' : thisItem.overlappingRoutes.map((route) => `<div class=\"css_route_group_item_overlapping_route\"><div class=\"css_route_group_item_overlapping_route_title\"><div class=\"css_route_group_item_overlapping_route_icon\">${getIconHTML('route')}</div><div class=\"css_route_group_item_overlapping_route_name\">${route.name}</div></div><div class=\"css_route_group_item_overlapping_route_endpoints\">${route.RouteEndPoints.html}</div><div class=\"css_route_group_item_overlapping_route_actions\"><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.route.switchRoute(${route.RouteID}, [${route.PathAttributeId.join(',')}])\">查看路線</div><div class=\"css_route_group_item_overlapping_route_action_button\" onclick=\"bus.folder.openSaveToFolder('route-on-route', [${route.RouteID}])\">收藏路線</div></div></div>`).join('');\n    }\n\n    function updateBusArrivalTimes(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      elementQuerySelector(thisItemElement, '.css_route_group_item_bus_arrival_times').innerHTML = thisItem.busArrivalTimes.length === 0 ? '<div class=\"css_route_group_item_bus_arrival_message\">目前沒有抵達時間可顯示</div>' : thisItem.busArrivalTimes.map((busArrivalTime) => `<div class=\"css_route_group_item_bus_arrival_time\"><div class=\"css_route_group_item_bus_arrival_time_title\"><div class=\"css_route_group_item_bus_arrival_time_icon\">${getIconHTML('calendar_view_day')}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_name\">${busArrivalTime.personalSchedule.name}</div><div class=\"css_route_group_item_bus_arrival_time_personal_schedule_time\">週${indexToDay(busArrivalTime.day).name} ${timeObjectToString(busArrivalTime.personalSchedule.period.start)} - ${timeObjectToString(busArrivalTime.personalSchedule.period.end)}</div></div><div class=\"css_route_group_item_bus_arrival_time_chart\">${busArrivalTime.chart}</div></div>`).join('');\n    }\n\n    function updateNearest(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem): void {\n      thisItemElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n      thisThreadBoxElement.setAttribute('nearest', booleanToString(thisItem.nearest));\n    }\n\n    function updateThread(thisThreadBoxElement: HTMLElement, thisItem: integratedStopItem, previousItem: integratedStopItem | null, animation: boolean): void {\n      const previousProgress = previousItem?.progress || 0;\n      const thisProgress = thisItem?.progress || 0;\n      const thisThreadElement = elementQuerySelector(thisThreadBoxElement, '.css_route_group_thread');\n      if (animation && !(previousProgress === 0) && thisProgress === 0 && Math.abs(thisProgress - previousProgress) > 0) {\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', `${100}%`);\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${100}%`);\n        thisThreadElement.addEventListener(\n          'transitionend',\n          function () {\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', `${0}%`);\n            thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${0}%`);\n          },\n          { once: true }\n        );\n      } else {\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-a', `${0}%`);\n        thisThreadElement.style.setProperty('--b-cssvar-thread-progress-b', `${thisProgress * 100}%`);\n      }\n    }\n\n    function updateStretch(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      if (skeletonScreen) {\n        const thisItemBodyElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body');\n        thisItemBodyElement.setAttribute('displayed', 'false');\n        thisItemElement.setAttribute('stretched', 'false');\n        thisThreadBoxElement.setAttribute('stretched', 'false');\n      }\n    }\n\n    function updateAnimation(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, animation: boolean): void {\n      thisItemElement.setAttribute('animation', booleanToString(animation));\n      thisThreadBoxElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisItemElement: HTMLElement, thisThreadBoxElement: HTMLElement, skeletonScreen: boolean): void {\n      thisItemElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n      thisThreadBoxElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    function updateSaveToFolderButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const saveToFolderButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"save-to-folder\"]');\n      saveToFolderButtonElement.setAttribute('onclick', `bus.folder.openSaveToFolder('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}])`);\n      isFolderContentSaved('stop', thisItem.id).then((e) => {\n        saveToFolderButtonElement.setAttribute('highlighted', booleanToString(e));\n      });\n    }\n\n    function updateScheduleNotificationButton(thisItemElement: HTMLElement, thisItem: integratedStopItem): void {\n      const scheduleNotificationButtonElement = elementQuerySelector(thisItemElement, '.css_route_group_item_body .css_route_group_item_buttons .css_route_group_item_button[type=\"schedule-notification\"]');\n      scheduleNotificationButtonElement.setAttribute('onclick', `bus.notification.openScheduleNotification('stop-on-route', ['${thisItemElement.id}', ${thisItem.id}, ${integration.RouteID}, ${thisItem.status.time}])`);\n      const havingNotifcationSchedules = stopHasNotifcationSchedules(thisItem.id);\n      scheduleNotificationButtonElement.setAttribute('highlighted', booleanToString(havingNotifcationSchedules));\n    }\n\n    if (previousItem === null) {\n      updateStatus(thisItemElement, thisThreadBoxElement, thisItem, groupIndex, index, scrollTop, animation);\n      updateName(thisItemElement, thisItem);\n      updateBuses(thisItemElement, thisItem);\n      updateOverlappingRoutes(thisItemElement, thisItem);\n      updateBusArrivalTimes(thisItemElement, thisItem);\n      updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      updateThread(thisThreadBoxElement, thisItem, previousItem, animation);\n      updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      updateSaveToFolderButton(thisItemElement, thisItem);\n      updateScheduleNotificationButton(thisItemElement, thisItem);\n    } else {\n      if (!(thisItem.status.time === previousItem.status.time)) {\n        updateStatus(thisItemElement, thisThreadBoxElement, thisItem, groupIndex, index, scrollTop, animation);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.buses, thisItem.buses)) {\n        updateBuses(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.busArrivalTimes, thisItem.busArrivalTimes)) {\n        updateBusArrivalTimes(thisItemElement, thisItem);\n      }\n      if (!compareThings(previousItem.segmentBuffer, thisItem.segmentBuffer)) {\n        updateSegmentBuffer(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.nearest === thisItem.nearest)) {\n        updateNearest(thisItemElement, thisThreadBoxElement, thisItem);\n      }\n      if (!(previousItem.progress === thisItem.progress)) {\n        updateThread(thisThreadBoxElement, thisItem, previousItem, animation);\n      }\n      if (!(previousItem.id === thisItem.id)) {\n        updateName(thisItemElement, thisItem);\n        updateOverlappingRoutes(thisItemElement, thisItem);\n        updateSaveToFolderButton(thisItemElement, thisItem);\n        updateScheduleNotificationButton(thisItemElement, thisItem);\n      }\n      if (!(animation === previousAnimation)) {\n        updateAnimation(thisItemElement, thisThreadBoxElement, animation);\n      }\n      if (!(skeletonScreen === previousSkeletonScreen)) {\n        updateStretch(thisItemElement, thisThreadBoxElement, skeletonScreen);\n        updateSkeletonScreen(thisItemElement, thisThreadBoxElement, skeletonScreen);\n      }\n    }\n  }\n\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n\n  const groupQuantity = integration.groupQuantity;\n  const itemQuantity = integration.itemQuantity;\n  const groupedItems = integration.groupedItems;\n\n  routeSliding_groupQuantity = groupQuantity;\n  routeSliding_fieldWidth = FieldWidth;\n  routeSliding_fieldHeight = FieldHeight;\n\n  let cumulativeOffset = 0;\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const width = getTextWidth([integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `往${e}`)[i], 500, '17px', `\"Noto Sans TC\", sans-serif`) + tabPadding;\n    routeSliding_groupStyles[groupKey] = {\n      width: width,\n      offset: cumulativeOffset\n    };\n    cumulativeOffset += width;\n  }\n  const offset = routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].offset * -1 + routeSliding_fieldWidth * 0.5 - routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width * 0.5;\n  if (!routeSliding_sliding) {\n    updateRouteCSS(routeSliding_groupQuantity, offset, routeSliding_groupStyles[`g_${routeSliding_initialIndex}`].width - tabPadding, routeSliding_initialIndex);\n  }\n\n  RouteNameElement.innerHTML = /*html*/ `<span>${integration.RouteName}</span>`;\n  RouteNameElement.setAttribute('animation', booleanToString(animation));\n  RouteNameElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabsElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabsElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n  RouteGroupTabLineTrackElement.setAttribute('animation', booleanToString(animation));\n  RouteGroupTabLineTrackElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n\n  RouteButtonRightElement.setAttribute('onclick', `bus.route.openRouteDetails(${integration.RouteID}, [${integration.PathAttributeId.join(',')}])`);\n\n  const currentGroupSeatQuantity = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group').length;\n  if (!(groupQuantity === currentGroupSeatQuantity)) {\n    const capacity = currentGroupSeatQuantity - groupQuantity;\n    if (capacity < 0) {\n      const RouteGroupsFragment = new DocumentFragment();\n      const RouteGroupTabsTrayFragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newGroupElement = generateElementOfGroup();\n        RouteGroupsFragment.appendChild(newGroupElement.element);\n        const newTabElement = generateElementOfTab();\n        RouteGroupTabsTrayFragment.appendChild(newTabElement.element);\n      }\n      RouteGroupsElement.append(RouteGroupsFragment);\n      RouteGroupTabsTrayElement.append(RouteGroupTabsTrayFragment);\n    } else {\n      const GroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n      const TabElements = elementQuerySelectorAll(Field, `.css_route_head .css_route_group_tabs .css_route_group_tabs_tray .css_route_group_tab`);\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const groupIndex = currentGroupSeatQuantity - 1 - o;\n        GroupElements[groupIndex].remove();\n        TabElements[groupIndex].remove();\n      }\n    }\n  }\n\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const currentItemSeatQuantity = elementQuerySelectorAll(elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_items_track'), `.css_route_group_item`).length;\n    if (!(itemQuantity[groupKey] === currentItemSeatQuantity)) {\n      const capacity = currentItemSeatQuantity - itemQuantity[groupKey];\n      if (capacity < 0) {\n        const RouteGroupItemsTrackElement = elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_items_track');\n        const RouteGroupThreadsTrackElement = elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_threads_track');\n        const RouteGroupItemsTrackFragment = new DocumentFragment();\n        const RouteGroupThreadsTrackFragment = new DocumentFragment();\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newThreadBoxElement = generateElementOfThreadBox();\n          const newItemElement = generateElementOfItem(newThreadBoxElement.id);\n          RouteGroupItemsTrackFragment.appendChild(newItemElement.element);\n          RouteGroupThreadsTrackFragment.appendChild(newThreadBoxElement.element);\n        }\n        RouteGroupItemsTrackElement.append(RouteGroupItemsTrackFragment);\n        RouteGroupThreadsTrackElement.append(RouteGroupThreadsTrackFragment);\n      } else {\n        const RouteGroupItemElements = elementQuerySelectorAll(elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_items_track'), `.css_route_group_item`);\n        const RouteGroupThreadElements = elementQuerySelectorAll(elementQuerySelector(elementQuerySelectorAll(Field, `.css_route_groups .css_route_group`)[i], '.css_route_group_threads_track'), `.css_route_group_thread_box`);\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          RouteGroupItemElements[itemIndex].remove();\n          RouteGroupThreadElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  const GroupElements = elementQuerySelectorAll(RouteGroupsElement, '.css_route_group');\n  for (let i = 0; i < groupQuantity; i++) {\n    const groupKey = `g_${i}`;\n    const thisTabElement = elementQuerySelectorAll(Field, `.css_route_head .css_route_group_tabs .css_route_group_tabs_tray .css_route_group_tab`)[i];\n    thisTabElement.innerHTML = [integration.RouteEndPoints.RouteDestination, integration.RouteEndPoints.RouteDeparture, ''].map((e) => `<span>往${e}</span>`)[i];\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-width', `${routeSliding_groupStyles[groupKey].width}px`);\n    thisTabElement.style.setProperty('--b-cssvar-route-tab-index', `${i}`);\n    const thisGroupElement = GroupElements[i];\n    const thisGroupElementScrollTop = thisGroupElement.scrollTop;\n    const thisGroupItemsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_items_track');\n    const thisGroupThreadsTrackElement = elementQuerySelector(thisGroupElement, '.css_route_group_threads_track');\n    const RouteGroupItemElements = elementQuerySelectorAll(thisGroupItemsTrackElement, '.css_route_group_item');\n    const RouteGroupThreadElements = elementQuerySelectorAll(thisGroupThreadsTrackElement, `.css_route_group_thread_box`);\n\n    for (let j = 0; j < itemQuantity[groupKey]; j++) {\n      const thisItemElement = RouteGroupItemElements[j];\n      const thisThreadBoxElement = RouteGroupThreadElements[j];\n      const thisItem = groupedItems[groupKey][j];\n      if (previousIntegration.hasOwnProperty('groupedItems')) {\n        if (previousIntegration.groupedItems.hasOwnProperty(groupKey)) {\n          if (previousIntegration.groupedItems[groupKey][j]) {\n            const previousItem = previousIntegration.groupedItems[groupKey][j];\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, previousItem, i, j, thisGroupElementScrollTop);\n          } else {\n            updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, i, j, thisGroupElementScrollTop);\n          }\n        } else {\n          updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, i, j, thisGroupElementScrollTop);\n        }\n      } else {\n        updateItem(thisItemElement, thisThreadBoxElement, thisItem, null, i, j, thisGroupElementScrollTop);\n      }\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshRoute() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  const busArrivalTimeChartSize = querySize('route-bus-arrival-time-chart');\n  routeRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  routeRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  routeRefreshTimer_refreshing = true;\n  routeRefreshTimer_currentRequestID = generateIdentifier('r');\n  RouteUpdateTimerElement.setAttribute('refreshing', 'true');\n  const integration = await integrateRoute(currentRouteIDSet_RouteID, currentRouteIDSet_PathAttributeId, busArrivalTimeChartSize.width, busArrivalTimeChartSize.height, routeRefreshTimer_currentRequestID);\n  updateRouteField(RouteField, integration, false, playing_animation);\n  let updateRate = 0;\n  if (routeRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  routeRefreshTimer_lastUpdate = new Date().getTime();\n  if (routeRefreshTimer_dynamic) {\n    routeRefreshTimer_nextUpdate = Math.max(routeRefreshTimer_lastUpdate + routeRefreshTimer_minInterval, integration.dataUpdateTime + routeRefreshTimer_baseInterval / updateRate);\n  } else {\n    routeRefreshTimer_nextUpdate = routeRefreshTimer_lastUpdate + routeRefreshTimer_baseInterval;\n  }\n  routeRefreshTimer_dynamicInterval = Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - routeRefreshTimer_lastUpdate);\n  routeRefreshTimer_refreshing = false;\n  RouteUpdateTimerElement.setAttribute('refreshing', 'false');\n}\n\nexport function streamRoute(): void {\n  refreshRoute()\n    .then(function () {\n      if (routeRefreshTimer_streaming) {\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, Math.max(routeRefreshTimer_minInterval, routeRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (routeRefreshTimer_streaming) {\n        promptMessage(`（路線）發生網路錯誤，將在${routeRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        routeRefreshTimer_timer = setTimeout(function () {\n          streamRoute();\n        }, routeRefreshTimer_retryInterval);\n      } else {\n        routeRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function openRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  pushPageHistory('Route');\n  logRecentView('route', RouteID);\n  currentRouteIDSet_RouteID = RouteID;\n  currentRouteIDSet_PathAttributeId = PathAttributeId;\n  routeSliding_initialIndex = 0;\n  RouteField.setAttribute('displayed', 'true');\n  elementQuerySelector(RouteField, '.css_route_groups').scrollLeft = 0;\n  setUpRouteFieldSkeletonScreen(RouteField);\n  if (!routeRefreshTimer_streaming) {\n    routeRefreshTimer_streaming = true;\n    if (!routeRefreshTimer_streamStarted) {\n      routeRefreshTimer_streamStarted = true;\n      streamRoute();\n    } else {\n      refreshRoute();\n    }\n    routeRefreshTimer_currentProgress = -1;\n    routeRefreshTimer_targetProgress = -1;\n    updateUpdateTimer();\n  }\n  closePreviousPage();\n}\n\nexport function closeRoute(): void {\n  // revokePageHistory('Route');\n  RouteField.setAttribute('displayed', 'false');\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  routeRefreshTimer_targetProgress = -1;\n  openPreviousPage();\n}\n\nexport function switchRoute(RouteID: number, PathAttributeId: Array<number>): void {\n  routeRefreshTimer_streaming = false;\n  routeRefreshTimer_currentProgress = -1;\n  routeRefreshTimer_targetProgress = -1;\n  openRoute(RouteID, PathAttributeId);\n}\n\nexport function stretchRouteItemBody(itemElementID: string, threadBoxElementID: string): void {\n  const itemElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_items_track .css_route_group_item#${itemElementID}`);\n  const itemBodyElement = elementQuerySelector(itemElement, '.css_route_group_item_body');\n  const threadBoxElement = documentQuerySelector(`.css_route_field .css_route_groups .css_route_group .css_route_group_tracks .css_route_group_threads_track .css_route_group_thread_box#${threadBoxElementID}`);\n  if (itemElement.getAttribute('stretched') === 'true') {\n    if (itemElement.getAttribute('animation') === 'true') {\n      itemBodyElement.addEventListener(\n        'transitionend',\n        function () {\n          itemBodyElement.setAttribute('displayed', 'false');\n        },\n        { once: true }\n      );\n    } else {\n      itemBodyElement.setAttribute('displayed', 'false');\n    }\n    itemElement.setAttribute('stretched', 'false');\n    threadBoxElement.setAttribute('stretched', 'false');\n  } else {\n    itemBodyElement.setAttribute('displayed', 'true');\n    itemElement.setAttribute('stretched', 'true');\n    threadBoxElement.setAttribute('stretched', 'true');\n  }\n}\n\nexport function switchRouteBodyTab(itemID: string, tabCode: number): void {\n  const itemElement = elementQuerySelector(RouteGroupsElement, `.css_route_group_item#${itemID}`);\n  const buttons = elementQuerySelector(itemElement, '.css_route_group_item_buttons');\n  const button = elementQuerySelectorAll(buttons, '.css_route_group_item_button[highlighted=\"true\"][type=\"tab\"]');\n  for (const t of button) {\n    t.setAttribute('highlighted', 'false');\n  }\n  elementQuerySelector(buttons, `.css_route_group_item_button[code=\"${tabCode}\"]`).setAttribute('highlighted', 'true');\n  switch (tabCode) {\n    case 0:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      break;\n    case 1:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'true');\n      break;\n    case 2:\n      elementQuerySelector(itemElement, '.css_route_group_item_buses').setAttribute('displayed', 'false');\n      elementQuerySelector(itemElement, '.css_route_group_item_overlapping_routes').setAttribute('displayed', 'true');\n      elementQuerySelector(itemElement, '.css_route_group_item_bus_arrival_times').setAttribute('displayed', 'false');\n      break;\n    default:\n      break;\n  }\n}\n"],"names":["RouteField","documentQuerySelector","RouteHeadElement","elementQuerySelector","RouteNameElement","RouteButtonRightElement","RouteUpdateTimerElement","RouteGroupTabsElement","RouteGroupTabsTrayElement","RouteGroupTabLineTrackElement","RouteGroupTabLineElement","RouteGroupsElement","previousIntegration","previousAnimation","previousSkeletonScreen","routeSliding_initialIndex","routeSliding_targetIndex","routeSliding_groupQuantity","routeSliding_groupStyles","routeSliding_fieldWidth","routeSliding_fieldHeight","routeSliding_sliding","routeRefreshTimer_retryInterval","routeRefreshTimer_baseInterval","routeRefreshTimer_minInterval","routeRefreshTimer_dynamicInterval","routeRefreshTimer_dynamic","routeRefreshTimer_streaming","routeRefreshTimer_lastUpdate","routeRefreshTimer_nextUpdate","routeRefreshTimer_refreshing","routeRefreshTimer_currentRequestID","routeRefreshTimer_currentProgress","routeRefreshTimer_targetProgress","routeRefreshTimer_streamStarted","currentRouteIDSet_RouteID","currentRouteIDSet_PathAttributeId","tabPadding","initializeRouteSliding","addEventListener","Math","round","scrollLeft","passive","event","currentIndex","target","initialSize","concat","width","offset","targetSize","tabWidth","abs","updateRouteCSS","ResizeRouteField","WindowSize","querySize","FieldWidth","FieldHeight","height","style","setProperty","groupQuantity","tabLineWidth","percentage","toString","toFixed","updateUpdateTimer","time","Date","getTime","getDataReceivingProgress","min","max","window","requestAnimationFrame","generateElementOfThreadBox","identifier","generateIdentifier","element","document","createElement","classList","add","id","setAttribute","innerHTML","generateElementOfItem","threadBoxIdentifier","getIconHTML","generateElementOfGroup","tracksElement","threadTrackElement","itemsTrackElement","appendChild","updateRouteField","Field","integration","skeletonScreen","animation","updateItem","thisItemElement","thisThreadBoxElement","thisItem","previousItem","groupIndex","index","scrollTop","updateStatus","thisThreadStatusElement","currentThreadSlideElement","nextThreadSlideElement","thisItemStatusElement","currentItemSlideElement","nextItemSlideElememt","status","code","innerText","text","boxHeight","itemQuantityFromTop","floor","itemQuantityWithinBox","checkItemElementVisibility","remove","once","updateSegmentBuffer","booleanToString","segmentBuffer","isSegmentBuffer","updateName","name","updateBuses","buses","length","map","bus","onThisRoute","carNumber","RouteName","type","join","updateOverlappingRoutes","overlappingRoutes","route","RouteEndPoints","html","RouteID","PathAttributeId","updateBusArrivalTimes","busArrivalTimes","busArrivalTime","personalSchedule","indexToDay","day","timeObjectToString","period","start","end","chart","updateNearest","nearest","updateThread","previousProgress","progress","thisProgress","thisThreadElement","updateStretch","updateAnimation","updateSkeletonScreen","updateSaveToFolderButton","saveToFolderButtonElement","isFolderContentSaved","then","e","updateScheduleNotificationButton","scheduleNotificationButtonElement","havingNotifcationSchedules","stopHasNotifcationSchedules","compareThings","itemQuantity","groupedItems","cumulativeOffset","i","groupKey","getTextWidth","RouteDestination","RouteDeparture","currentGroupSeatQuantity","elementQuerySelectorAll","capacity","RouteGroupsFragment","DocumentFragment","RouteGroupTabsTrayFragment","o","newGroupElement","newTabElement","append","GroupElements","TabElements","currentItemSeatQuantity","RouteGroupItemsTrackElement","RouteGroupThreadsTrackElement","RouteGroupItemsTrackFragment","RouteGroupThreadsTrackFragment","newThreadBoxElement","newItemElement","RouteGroupItemElements","RouteGroupThreadElements","itemIndex","thisTabElement","thisGroupElement","thisGroupElementScrollTop","thisGroupItemsTrackElement","thisGroupThreadsTrackElement","j","hasOwnProperty","refreshRoute","_refreshRoute","apply","arguments","playing_animation","getSettingOptionValue","refresh_interval_setting","busArrivalTimeChartSize","dynamic","baseInterval","integrateRoute","updateRate","getUpdateRate","dataUpdateTime","streamRoute","setTimeout","err","console","error","promptMessage","openRoute","pushPageHistory","logRecentView","defaultItemQuantity","push","goBack","sequence","position","longitude","latitude","isStartingPoint","isEndingPoint","g_0","g_1","setUpRouteFieldSkeletonScreen","closePreviousPage","closeRoute","openPreviousPage","switchRoute","stretchRouteItemBody","itemElementID","threadBoxElementID","itemElement","itemBodyElement","threadBoxElement","getAttribute","switchRouteBodyTab","itemID","tabCode","_step","buttons","_iterator","_createForOfIteratorHelper","s","n","done","value","f"],"sourceRoot":""}