{"version":3,"file":"ee7c8b4556f9c03525fb.js","mappings":"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","sources":["webpack://bus/./src/interface/home/folders/index.ts","webpack://bus/./src/interface/icons/index.ts","webpack://bus/./src/interface/home/index.ts","webpack://bus/./src/interface/home/recent-views/index.ts"],"sourcesContent":["import { getUpdateRate } from '../../../data/analytics/update-rate/index';\nimport { DataReceivingProgressEvent } from '../../../data/apis/loader';\nimport { Folder, integratedFolder, integratedFolderContent, integratedFolders, integrateFolders } from '../../../data/folder/index';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../../tools/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../../tools/query-selector';\nimport { getIconHTML } from '../../icons/index';\nimport { MaterialSymbols } from '../../icons/material-symbols-type';\nimport { GeneratedElement, querySize } from '../../index';\nimport { promptMessage } from '../../prompt/index';\nimport { openRoute } from '../../route/index';\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeHeadElement = elementQuerySelector(HomeField, '.css_home_head');\nconst HomeBodyElement = elementQuerySelector(HomeField, '.css_home_body');\nconst HomeFoldersElement = elementQuerySelector(HomeBodyElement, '.css_home_folders');\nconst HomeUpdateTimerElement = elementQuerySelector(HomeHeadElement, '.css_home_update_timer_box .css_home_update_timer');\n\nlet previousIntegration = {} as integratedFolders;\nlet previousSkeletonScreen: boolean = false;\nlet previousAnimation: boolean = true;\n\nlet foldersRefreshTimer_retryInterval: number = 10 * 1000;\nlet foldersRefreshTimer_baseInterval: number = 15 * 1000;\nlet foldersRefreshTimer_minInterval: number = 5 * 1000;\nlet foldersRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet foldersRefreshTimer_dynamic: boolean = true;\nlet foldersRefreshTimer_lastUpdate: number = 0;\nlet foldersRefreshTimer_nextUpdate: number = 0;\nlet foldersRefreshTimer_currentRequestID: string = '';\nlet foldersRefreshTimer_refreshing: boolean = false;\nlet foldersRefreshTimer_streaming: boolean = false;\nlet foldersRefreshTimer_streamStarted: boolean = false;\n\nfunction generateElementOfItem(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_folder_item');\n  element.setAttribute('type', 'stop');\n  element.innerHTML = /*html*/ `<div class=\"css_home_folder_item_icon\"></div><div class=\"css_home_folder_item_context\"></div><div class=\"css_home_folder_item_main\"></div><div class=\"css_home_folder_item_capsule\"><div class=\"css_home_folder_item_status\"><div class=\"css_next_slide\" code=\"0\" displayed=\"false\"></div><div class=\"css_current_slide\" code=\"0\" displayed=\"true\"></div></div><div class=\"css_home_folder_item_button\">${getIconHTML('keyboard_arrow_right')}</div><div class=\"css_home_folder_item_capsule_separator\"></div></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction generateElementOfFolder(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_folder');\n  element.innerHTML = /*html*/ `<div class=\"css_home_folder_head\"><div class=\"css_home_folder_icon\"></div><div class=\"css_home_folder_name\"></div></div><div class=\"css_home_folder_content\"></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction animateUpdateTimer(): void {\n  HomeUpdateTimerElement.style.setProperty('--b-cssvar-home-update-timer-interval', `${foldersRefreshTimer_dynamicInterval}ms`);\n  HomeUpdateTimerElement.classList.add('css_home_update_timer_slide_rtl');\n}\n\nfunction handleDataReceivingProgressUpdates(event: Event): void {\n  const CustomEvent = event as DataReceivingProgressEvent;\n  if (foldersRefreshTimer_refreshing) {\n    const offsetRatio = CustomEvent.detail.progress - 1;\n    HomeUpdateTimerElement.style.setProperty('--b-cssvar-home-update-timer-offset-ratio', offsetRatio.toString());\n  }\n  if (CustomEvent.detail.stage === 'end') {\n    document.removeEventListener(CustomEvent.detail.target, handleDataReceivingProgressUpdates);\n  }\n}\n\nexport function setUpFolderFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  const contentLength = Math.floor(FieldHeight / 50 / 3) + 2;\n  const folderQuantity = 3;\n\n  const folders: integratedFolders['folders'] = [];\n  for (let i = 0; i < folderQuantity; i++) {\n    const folder: integratedFolder = {\n      name: '',\n      icon: '',\n      id: '',\n      timestamp: 0,\n      content: [],\n      contentLength: contentLength\n    };\n\n    for (let j = 0; j < contentLength; j++) {\n      const folderContent: integratedFolderContent = {\n        type: 'stop',\n        id: 0,\n        timestamp: 0,\n        name: '',\n        status: {\n          code: 8,\n          text: '',\n          time: -6\n        },\n        direction: 0,\n        route: {\n          name: '',\n          endPoints: {\n            departure: '',\n            destination: ''\n          },\n          id: 0,\n          pathAttributeId: []\n        }\n      };\n      folder.content.push(folderContent);\n    }\n    folders.push(folder);\n  }\n\n  updateFoldersElement(\n    {\n      folders: folders,\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nfunction updateFoldersElement(integration: integratedFolders, skeletonScreen: boolean, animation: boolean): void {\n  function updateItem(thisElement: HTMLElement, thisItem: integratedFolderContent, previousItem: integratedFolderContent | null) {\n    function updateType(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      thisElement.setAttribute('type', thisItem.type);\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const iconElement = elementQuerySelector(thisElement, '.css_home_folder_item_icon');\n      let icon = '' as MaterialSymbols;\n      switch (thisItem.type) {\n        case 'stop':\n          icon = 'location_on';\n          break;\n        case 'route':\n          icon = 'route';\n          break;\n        case 'bus':\n          icon = 'directions_bus';\n          break;\n        case 'empty':\n          icon = 'lightbulb';\n          break;\n        default:\n          icon = '';\n          break;\n      }\n      iconElement.innerHTML = getIconHTML(icon);\n    }\n\n    function updateStatus(thisElement: HTMLElement, thisItem: integratedFolderContent, animation: boolean): void {\n      if (thisItem.type === 'stop') {\n        const thisElementRect = thisElement.getBoundingClientRect();\n        const top = thisElementRect.top;\n        const left = thisElementRect.left;\n        const bottom = thisElementRect.bottom;\n        const right = thisElementRect.right;\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n\n        const thisItemStatusElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_status');\n        const nextSlideElement = elementQuerySelector(thisItemStatusElement, '.css_next_slide');\n        const currentSlideElement = elementQuerySelector(thisItemStatusElement, '.css_current_slide');\n\n        nextSlideElement.setAttribute('code', thisItem.status.code.toString());\n        nextSlideElement.innerText = thisItem.status.text;\n\n        if (animation && bottom > 0 && top < windowHeight && right > 0 && left < windowWidth) {\n          currentSlideElement.addEventListener(\n            'animationend',\n            function () {\n              currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n              currentSlideElement.innerText = thisItem.status.text;\n              currentSlideElement.classList.remove('css_slide_fade_out');\n              nextSlideElement.setAttribute('displayed', 'false');\n            },\n            { once: true }\n          );\n          nextSlideElement.setAttribute('displayed', 'true');\n          currentSlideElement.classList.add('css_slide_fade_out');\n        } else {\n          currentSlideElement.setAttribute('code', thisItem.status.code.toString());\n          currentSlideElement.innerText = thisItem.status.text;\n        }\n      }\n    }\n\n    function updateMain(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let main: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          main = thisItem.name;\n          break;\n        case 'route':\n          main = thisItem.name;\n          break;\n        case 'bus':\n          main = thisItem.busID;\n          break;\n        case 'empty':\n          main = '沒有內容';\n          break;\n        default:\n          main = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_main').innerText = main;\n    }\n\n    function updateContext(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      let context: string = '';\n      switch (thisItem.type) {\n        case 'stop':\n          context = `${thisItem.route ? thisItem.route.name : ''} - 往${thisItem.route ? [thisItem.route.endPoints.destination, thisItem.route.endPoints.departure, ''][thisItem.direction ? thisItem.direction : 0] : ''}`;\n          break;\n        case 'route':\n          context = `${thisItem.endPoints.departure} \\u2194 ${thisItem.endPoints.destination}`;\n          break;\n        case 'bus':\n          // context = thisItem.currentRoute.name; // TODO: integration\n          break;\n        case 'empty':\n          context = '提示';\n          break;\n        default:\n          context = 'null';\n          break;\n      }\n      elementQuerySelector(thisElement, '.css_home_folder_item_context').innerText = context;\n    }\n\n    function updateButton(thisElement: HTMLElement, thisItem: integratedFolderContent): void {\n      const buttonElement = elementQuerySelector(thisElement, '.css_home_folder_item_capsule .css_home_folder_item_button');\n      let onclick = '';\n      switch (thisItem.type) {\n        case 'stop':\n          buttonElement.onclick = function () {\n            openRoute(thisItem.route.id, thisItem.route.pathAttributeId);\n          };\n          break;\n        case 'route':\n          buttonElement.onclick = function () {\n            openRoute(thisItem.id, thisItem.pathAttributeId);\n          };\n          break;\n        case 'bus':\n          break;\n        case 'empty':\n          break;\n        default:\n          break;\n      }\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateType(thisElement, thisItem);\n      updateIcon(thisElement, thisItem);\n      updateStatus(thisElement, thisItem, animation);\n      updateMain(thisElement, thisItem);\n      updateContext(thisElement, thisItem);\n      updateButton(thisElement, thisItem);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (thisItem.type !== previousItem.type) {\n        updateType(thisElement, thisItem);\n        updateIcon(thisElement, thisItem);\n        updateStatus(thisElement, thisItem, animation);\n        updateMain(thisElement, thisItem);\n        updateContext(thisElement, thisItem);\n        updateButton(thisElement, thisItem);\n        updateAnimation(thisElement, animation);\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      } else {\n        switch (thisItem.type) {\n          case 'stop':\n            if (!compareThings(previousItem.route, thisItem.route)) {\n              updateContext(thisElement, thisItem);\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            if (thisItem.status.code !== previousItem.status.code || !compareThings(previousItem.status.text, thisItem.status.text)) {\n              updateStatus(thisElement, thisItem, animation);\n            }\n            break;\n          case 'route':\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateButton(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.endPoints, thisItem.endPoints)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'bus':\n            if (!compareThings(previousItem.currentRoute, thisItem.currentRoute)) {\n              updateContext(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.busID, thisItem.busID)) {\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          case 'empty':\n            if (thisItem.type !== previousItem.type) {\n              updateContext(thisElement, thisItem);\n              updateMain(thisElement, thisItem);\n            }\n            break;\n          default:\n            break;\n        }\n        if (skeletonScreen !== previousSkeletonScreen) {\n          updateSkeletonScreen(thisElement, skeletonScreen);\n        }\n        if (animation !== previousAnimation) {\n          updateAnimation(thisElement, animation);\n        }\n      }\n    }\n  }\n\n  function updateFolder(thisElement: HTMLElement, thisFolder: Folder, previousFolder: Folder | null): void {\n    function updateName(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisNameElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_name');\n      thisNameElememt.innerText = thisFolder.name;\n    }\n\n    function updateIcon(thisElement: HTMLElement, thisFolder: Folder): void {\n      const thisHeadElement = elementQuerySelector(thisElement, `.css_home_folder_head`);\n      const thisIconElememt = elementQuerySelector(thisHeadElement, '.css_home_folder_icon');\n      thisIconElememt.innerHTML = getIconHTML(thisFolder.icon);\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousFolder === null) {\n      updateName(thisElement, thisFolder);\n      updateIcon(thisElement, thisFolder);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (thisFolder.name !== previousFolder.name) {\n        updateName(thisElement, thisFolder);\n      }\n      if (thisFolder.icon !== previousFolder.icon) {\n        updateIcon(thisElement, thisFolder);\n      }\n      if (animation !== previousAnimation) {\n        updateAnimation(thisElement, animation);\n      }\n      if (skeletonScreen !== previousSkeletonScreen) {\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      }\n    }\n  }\n\n  const folders = integration.folders;\n  const foldersLength = folders.length;\n\n  const currentFolderSeatQuantity = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder').length;\n  if (foldersLength !== currentFolderSeatQuantity) {\n    const capacity = currentFolderSeatQuantity - foldersLength;\n    if (capacity < 0) {\n      const fragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newFolderElement = generateElementOfFolder();\n        fragment.appendChild(newFolderElement.element);\n      }\n      HomeFoldersElement.append(fragment);\n    } else {\n      const FolderElements = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const folderIndex = currentFolderSeatQuantity - 1 - o;\n        FolderElements[folderIndex].remove();\n      }\n    }\n  }\n\n  const FolderElements = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n  for (let i = 0; i < foldersLength; i++) {\n    const thisFolder = folders[i];\n    const thisFolderContent = thisFolder.content;\n    const thisFolderContentLength = thisFolderContent.length;\n    const thisFolderElement = FolderElements[i];\n    const thisFolderContentElement = elementQuerySelector(thisFolderElement, '.css_home_folder_content');\n    const currentItemSeatQuantity = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item').length;\n    if (thisFolderContentLength !== currentItemSeatQuantity) {\n      const capacity = currentItemSeatQuantity - thisFolderContentLength;\n      if (capacity < 0) {\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const newItemElement = generateElementOfItem();\n          thisFolderContentElement.appendChild(newItemElement.element);\n        }\n      } else {\n        const FolderContentItemElements = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item');\n        for (let o = 0; o < Math.abs(capacity); o++) {\n          const itemIndex = currentItemSeatQuantity - 1 - o;\n          FolderContentItemElements[itemIndex].remove();\n        }\n      }\n    }\n  }\n\n  const FolderElements2 = elementQuerySelectorAll(HomeFoldersElement, '.css_home_folder');\n  for (let i = 0; i < foldersLength; i++) {\n    const thisFolder = folders[i];\n    const thisFolderContent = thisFolder.content;\n    const thisFolderContentLength = thisFolderContent.length; // the actual length (including 'empty content')\n    const thisFolderElement = FolderElements2[i];\n    const thisFolderContentElement = elementQuerySelector(thisFolderElement, '.css_home_folder_content');\n    if (previousIntegration.hasOwnProperty('folders')) {\n      if (previousIntegration.folders[i]) {\n        const previousFolder = previousIntegration.folders[i];\n        updateFolder(thisFolderElement, thisFolder, previousFolder);\n      } else {\n        updateFolder(thisFolderElement, thisFolder, null);\n      }\n    } else {\n      updateFolder(thisFolderElement, thisFolder, null);\n    }\n\n    const thisFolderItemElements = elementQuerySelectorAll(thisFolderContentElement, '.css_home_folder_item');\n    for (let j = 0; j < thisFolderContentLength; j++) {\n      const thisElement = thisFolderItemElements[j];\n      const thisItem = thisFolderContent[j];\n      if (previousIntegration.hasOwnProperty('folders')) {\n        if (previousIntegration.folders[i]) {\n          if (previousIntegration.folders[i].content[j]) {\n            const previousItem = previousIntegration.folders[i].content[j];\n            updateItem(thisElement, thisItem, previousItem);\n          } else {\n            updateItem(thisElement, thisItem, null);\n          }\n        } else {\n          updateItem(thisElement, thisItem, null);\n        }\n      } else {\n        updateItem(thisElement, thisItem, null);\n      }\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nasync function refreshFolders() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  foldersRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  foldersRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  foldersRefreshTimer_refreshing = true;\n  foldersRefreshTimer_currentRequestID = generateIdentifier();\n  HomeUpdateTimerElement.setAttribute('refreshing', 'true');\n  HomeUpdateTimerElement.classList.remove('css_home_update_timer_slide_rtl');\n  document.addEventListener(foldersRefreshTimer_currentRequestID, handleDataReceivingProgressUpdates);\n  const integration = await integrateFolders(foldersRefreshTimer_currentRequestID);\n  updateFoldersElement(integration, false, playing_animation);\n  let updateRate = 0;\n  if (foldersRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  foldersRefreshTimer_lastUpdate = new Date().getTime();\n  if (foldersRefreshTimer_dynamic) {\n    foldersRefreshTimer_nextUpdate = Math.max(foldersRefreshTimer_lastUpdate + foldersRefreshTimer_minInterval, integration.dataUpdateTime + foldersRefreshTimer_baseInterval / updateRate);\n  } else {\n    foldersRefreshTimer_nextUpdate = foldersRefreshTimer_lastUpdate + foldersRefreshTimer_baseInterval;\n  }\n  foldersRefreshTimer_dynamicInterval = Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - foldersRefreshTimer_lastUpdate);\n  foldersRefreshTimer_refreshing = false;\n  HomeUpdateTimerElement.setAttribute('refreshing', 'false');\n  animateUpdateTimer();\n}\n\nasync function streamFolders() {\n  refreshFolders()\n    .then(function () {\n      if (foldersRefreshTimer_streaming) {\n        setTimeout(function () {\n          streamFolders();\n        }, Math.max(foldersRefreshTimer_minInterval, foldersRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (foldersRefreshTimer_streaming) {\n        promptMessage(`資料夾網路連線中斷，將在${foldersRefreshTimer_retryInterval / 1000}秒後重試。`, 'error');\n        setTimeout(function () {\n          streamFolders();\n        }, foldersRefreshTimer_retryInterval);\n      } else {\n        foldersRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function initializeFolders(): void {\n  setUpFolderFieldSkeletonScreen();\n  if (!foldersRefreshTimer_streaming) {\n    foldersRefreshTimer_streaming = true;\n    if (!foldersRefreshTimer_streamStarted) {\n      foldersRefreshTimer_streamStarted = true;\n      streamFolders();\n    } else {\n      refreshFolders();\n    }\n  }\n}\n","import { MaterialSymbols } from './material-symbols-type';\n\nexport function getIconHTML(identifier: MaterialSymbols): string {\n  return /*html*/ `<span class=\"css_material_symbols_rounded\">${identifier}</span>`;\n}\n","import { getCarInfo } from '../../data/apis/getCarInfo/index';\nimport { getLocation } from '../../data/apis/getLocation/index';\nimport { getMaterialSymbols } from '../../data/apis/getMaterialSymbols/index';\nimport { getRoute } from '../../data/apis/getRoute/index';\nimport { DataReceivingProgressEvent, deleteDataReceivingProgress, deleteDataUpdateTime, getDataReceivingProgress, setDataReceivingProgress } from '../../data/apis/loader';\nimport { documentQuerySelector, elementQuerySelector } from '../../tools/query-selector';\n\nconst dataDownloadRequestID = 'downloadData';\nexport let dataDownloadCompleted = false;\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeHeadElement = elementQuerySelector(HomeField, '.css_home_head');\nconst homeButtonRightElement = elementQuerySelector(HomeHeadElement, '.css_home_button_right');\nconst progressElement = elementQuerySelector(homeButtonRightElement, 'svg#download-svg path[progress=\"progress\"]');\n\nfunction handleDataReceivingProgressUpdates(event: Event): void {\n  const CustomEvent = event as DataReceivingProgressEvent;\n  const pixels = (1 - getDataReceivingProgress(dataDownloadRequestID)) * 189;\n  progressElement.style.setProperty('--b-cssvar-stroke-dashoffset', `${pixels}px`);\n  if (CustomEvent.detail.stage === 'end') {\n    document.removeEventListener(CustomEvent.detail.target, handleDataReceivingProgressUpdates);\n    progressElement.addEventListener(\n      'transitionend',\n      function () {\n        homeButtonRightElement.setAttribute('complete', 'true');\n      },\n      { once: true }\n    );\n    progressElement.style.setProperty('--b-cssvar-stroke-dashoffset', `${0}px`);\n    dataDownloadCompleted = true;\n  }\n}\n\nexport async function downloadData() {\n  /*\n  setDataReceivingProgress(dataDownloadRequestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getRoute_1', 0, false);\n  */\n  // eliminate duplicate downloads in integrateFolders\n  setDataReceivingProgress(dataDownloadRequestID, 'getLocation_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getLocation_1', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getCarInfo_0', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getCarInfo_1', 0, false);\n  setDataReceivingProgress(dataDownloadRequestID, 'getMaterialSymbols', 0, false);\n  document.addEventListener(dataDownloadRequestID, handleDataReceivingProgressUpdates);\n  await getRoute(dataDownloadRequestID, true);\n  await getLocation(dataDownloadRequestID, 1);\n  await getCarInfo(dataDownloadRequestID, true);\n  await getMaterialSymbols(dataDownloadRequestID);\n  deleteDataReceivingProgress(dataDownloadRequestID);\n  deleteDataUpdateTime(dataDownloadRequestID);\n}\n","import { getUpdateRate } from '../../../data/analytics/update-rate/index';\nimport { integratedRecentView, integratedRecentViews, integrateRecentViews } from '../../../data/recent-views/index';\nimport { getSettingOptionValue, SettingSelectOptionRefreshIntervalValue } from '../../../data/settings/index';\nimport { booleanToString, compareThings, generateIdentifier } from '../../../tools/index';\nimport { documentQuerySelector, elementQuerySelector, elementQuerySelectorAll } from '../../../tools/query-selector';\nimport { openBus } from '../../bus/index';\nimport { getIconHTML } from '../../icons/index';\nimport { GeneratedElement, querySize } from '../../index';\n\nconst HomeField = documentQuerySelector('.css_home_field');\nconst HomeBodyElement = elementQuerySelector(HomeField, '.css_home_body');\nconst RecentViewsField = elementQuerySelector(HomeBodyElement, '.css_home_recent_views');\nconst RecentViewsContentElement = elementQuerySelector(RecentViewsField, '.css_home_recent_views_content');\n\nlet previousIntegration = {};\nlet previousAnimation: boolean = true;\nlet previousSkeletonScreen: boolean = false;\n\nlet recentViewsRefreshTimer_retryInterval: number = 10 * 1000;\nlet recentViewsRefreshTimer_baseInterval: number = 15 * 1000;\nlet recentViewsRefreshTimer_minInterval: number = 5 * 1000;\nlet recentViewsRefreshTimer_dynamicInterval: number = 15 * 1000;\nlet recentViewsRefreshTimer_dynamic: boolean = true;\nlet recentViewsRefreshTimer_streaming: boolean = false;\nlet recentViewsRefreshTimer_lastUpdate: number = 0;\nlet recentViewsRefreshTimer_nextUpdate: number = 0;\nlet recentViewsRefreshTimer_refreshing: boolean = false;\nlet recentViewsRefreshTimer_currentRequestID: string = '';\nlet recentViewsRefreshTimer_streamStarted: boolean = false;\nlet recentViewsRefreshTimer_timer: ReturnType<typeof setTimeout>;\n\nfunction generateElementOfRecentViewItem(): GeneratedElement {\n  const element = document.createElement('div');\n  element.classList.add('css_home_recent_views_item');\n  element.innerHTML = /*html*/ `<div class=\"css_home_recent_views_item_head\"><div class=\"css_home_recent_views_item_icon\"></div><div class=\"css_home_recent_views_item_title\"></div><div class=\"css_home_recent_views_item_time\"></div></div><div class=\"css_home_recent_views_item_name\"></div>`;\n  return {\n    element: element,\n    id: ''\n  };\n}\n\nfunction updateRecentViewsField(integration: integratedRecentViews, skeletonScreen: boolean, animation: boolean) {\n  function updateItem(thisElement: HTMLElement, thisItem: integratedRecentView, previousItem: integratedRecentView): void {\n    function updateIcon(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const iconElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_icon');\n      let icon = '';\n      switch (thisItem.type) {\n        case 'route':\n          icon = 'route';\n          break;\n        case 'location':\n          icon = 'location_on';\n          break;\n        case 'bus':\n          icon = 'directions_bus';\n          break;\n        case 'empty':\n          icon = 'lightbulb';\n          break;\n        default:\n          break;\n      }\n      iconElement.innerHTML = getIconHTML(icon);\n    }\n\n    function updateTitle(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const titleElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_title');\n      let title = '';\n      switch (thisItem.type) {\n        case 'route':\n          title = '路線';\n          break;\n        case 'location':\n          title = '地點';\n          break;\n        case 'bus':\n          title = '公車';\n          break;\n        case 'empty':\n          title = '提示';\n          break;\n        default:\n          break;\n      }\n      titleElement.innerText = title;\n    }\n\n    function updateTime(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const timeElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_head .css_home_recent_views_item_time');\n      timeElement.innerText = thisItem.time.relative;\n    }\n\n    function updateName(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      const nameElement = elementQuerySelector(thisElement, '.css_home_recent_views_item_name');\n      nameElement.innerText = thisItem.name;\n    }\n\n    function updateOnclick(thisElement: HTMLElement, thisItem: integratedRecentView): void {\n      switch (thisItem.type) {\n        case 'route':\n          thisElement.onclick = function () {\n            openRoute(thisItem.id, thisItem.pid);\n          };\n          break;\n        case 'location':\n          thisElement.onclick = function () {\n            openLocation(thisItem.hash);\n          };\n          break;\n        case 'bus':\n          thisElement.onclick = function () {\n            openBus(thisItem.id);\n          };\n          break;\n        case 'empty':\n          thisElement.onclick = null;\n          break;\n        default:\n          break;\n      }\n    }\n\n    function updateAnimation(thisElement: HTMLElement, animation: boolean): void {\n      thisElement.setAttribute('animation', booleanToString(animation));\n    }\n\n    function updateSkeletonScreen(thisElement: HTMLElement, skeletonScreen: boolean): void {\n      thisElement.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n    }\n\n    if (previousItem === null) {\n      updateIcon(thisElement, thisItem);\n      updateTitle(thisElement, thisItem);\n      updateTime(thisElement, thisItem);\n      updateName(thisElement, thisItem);\n      updateOnclick(thisElement, thisItem);\n      updateAnimation(thisElement, animation);\n      updateSkeletonScreen(thisElement, skeletonScreen);\n    } else {\n      if (thisItem.type !== previousItem.type) {\n        updateIcon(thisElement, thisItem);\n        updateTitle(thisElement, thisItem);\n        updateTime(thisElement, thisItem);\n        updateName(thisElement, thisItem);\n        updateOnclick(thisElement, thisItem);\n        updateAnimation(thisElement, animation);\n        updateSkeletonScreen(thisElement, skeletonScreen);\n      } else {\n        switch (thisItem.type) {\n          case 'location':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.hash, thisItem.hash)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'route':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.id, thisItem.id) || !compareThings(previousItem.pid, thisItem.pid)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'bus':\n            if (!compareThings(previousItem.name, thisItem.name)) {\n              updateName(thisElement, thisItem);\n            }\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            if (!compareThings(previousItem.id, thisItem.id)) {\n              updateOnclick(thisElement, thisItem);\n            }\n            break;\n          case 'empty':\n            if (previousItem.time !== thisItem.time) {\n              updateTime(thisElement, thisItem);\n            }\n            break;\n          default:\n            break;\n        }\n        if (animation !== previousAnimation) {\n          updateAnimation(thisElement, animation);\n        }\n        if (skeletonScreen !== previousSkeletonScreen) {\n          updateSkeletonScreen(thisElement, skeletonScreen);\n        }\n      }\n    }\n  }\n\n  /*\n  const WindowSize = querySize('window');\n  const FieldWidth = WindowSize.width;\n  const FieldHeight = WindowSize.height;\n  */\n\n  const itemQuantity = integration.itemQuantity;\n\n  // Field.setAttribute('skeleton-screen', booleanToString(skeletonScreen));\n\n  const currentItemSeatQuantity = elementQuerySelectorAll(RecentViewsContentElement, '.css_home_recent_views_item').length;\n  if (itemQuantity !== currentItemSeatQuantity) {\n    const capacity = currentItemSeatQuantity - itemQuantity;\n    if (capacity < 0) {\n      const fragment = new DocumentFragment();\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const newRecentViewItemElement = generateElementOfRecentViewItem();\n        fragment.appendChild(newRecentViewItemElement.element);\n      }\n      RecentViewsContentElement.append(fragment);\n    } else {\n      const RecentViewsItemElements = elementQuerySelectorAll(RecentViewsContentElement, '.css_home_recent_views_item');\n      for (let o = 0; o < Math.abs(capacity); o++) {\n        const recentViewItemIndex = currentItemSeatQuantity - 1 - o;\n        RecentViewsItemElements[recentViewItemIndex].remove();\n      }\n    }\n  }\n\n  const RecentViewsItemElements = elementQuerySelectorAll(RecentViewsContentElement, '.css_home_recent_views_item');\n  for (let i = 0; i < itemQuantity; i++) {\n    const thisElement = RecentViewsItemElements[i];\n    const thisItem = integration.items[i];\n    if (previousIntegration.hasOwnProperty('items')) {\n      if (previousIntegration.items[i]) {\n        const previousItem = previousIntegration.items[i];\n        updateItem(thisElement, thisItem, previousItem);\n      } else {\n        updateItem(thisElement, thisItem, null);\n      }\n    } else {\n      updateItem(thisElement, thisItem, null);\n    }\n  }\n\n  previousIntegration = integration;\n  previousAnimation = animation;\n  previousSkeletonScreen = skeletonScreen;\n}\n\nexport function setUpRecentViewsFieldSkeletonScreen(): void {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const WindowSize = querySize('window');\n  const defaultItemQuantity = Math.floor(WindowSize.height / 70 / 3) + 2;\n  const items: Array<integratedRecentView> = [];\n  for (let i = 0; i < defaultItemQuantity; i++) {\n    items.push({\n      type: 'route',\n      id: 0,\n      pid: [],\n      time: {\n        absolute: 0,\n        relative: ''\n      },\n      name: ''\n    });\n  }\n  updateRecentViewsField(\n    {\n      items: items,\n      itemQuantity: items.length,\n      dataUpdateTime: 0\n    },\n    true,\n    playing_animation\n  );\n}\n\nasync function refreshRecentViews() {\n  const playing_animation = getSettingOptionValue('playing_animation') as boolean;\n  const refresh_interval_setting = getSettingOptionValue('refresh_interval') as SettingSelectOptionRefreshIntervalValue;\n  recentViewsRefreshTimer_dynamic = refresh_interval_setting.dynamic;\n  recentViewsRefreshTimer_baseInterval = refresh_interval_setting.baseInterval;\n  recentViewsRefreshTimer_refreshing = true;\n  recentViewsRefreshTimer_currentRequestID = generateIdentifier();\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'true');\n  const integration = await integrateRecentViews(recentViewsRefreshTimer_currentRequestID);\n  updateRecentViewsField(integration, false, playing_animation);\n  let updateRate = 0;\n  if (recentViewsRefreshTimer_dynamic) {\n    updateRate = await getUpdateRate();\n  }\n  recentViewsRefreshTimer_lastUpdate = new Date().getTime();\n  if (recentViewsRefreshTimer_dynamic) {\n    recentViewsRefreshTimer_nextUpdate = Math.max(recentViewsRefreshTimer_lastUpdate + recentViewsRefreshTimer_minInterval, integration.dataUpdateTime + recentViewsRefreshTimer_baseInterval / updateRate);\n  } else {\n    recentViewsRefreshTimer_nextUpdate = recentViewsRefreshTimer_lastUpdate + recentViewsRefreshTimer_baseInterval;\n  }\n  recentViewsRefreshTimer_dynamicInterval = Math.max(recentViewsRefreshTimer_minInterval, recentViewsRefreshTimer_nextUpdate - recentViewsRefreshTimer_lastUpdate);\n  recentViewsRefreshTimer_refreshing = false;\n  // documentQuerySelector('.css_home_update_timer').setAttribute('refreshing', 'false');\n}\n\nasync function streamRecentViews() {\n  refreshRecentViews()\n    .then(function () {\n      if (recentViewsRefreshTimer_streaming) {\n        recentViewsRefreshTimer_timer = setTimeout(function () {\n          streamRecentViews();\n        }, Math.max(recentViewsRefreshTimer_minInterval, recentViewsRefreshTimer_nextUpdate - new Date().getTime()));\n      } else {\n        recentViewsRefreshTimer_streamStarted = false;\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      if (recentViewsRefreshTimer_streaming) {\n        recentViewsRefreshTimer_timer = setTimeout(function () {\n          streamRecentViews();\n        }, recentViewsRefreshTimer_retryInterval);\n      } else {\n        recentViewsRefreshTimer_streamStarted = false;\n      }\n    });\n}\n\nexport function initializeRecentViews(): void {\n  setUpRecentViewsFieldSkeletonScreen();\n  if (!recentViewsRefreshTimer_streaming) {\n    recentViewsRefreshTimer_streaming = true;\n    if (!recentViewsRefreshTimer_streamStarted) {\n      recentViewsRefreshTimer_streamStarted = true;\n      streamRecentViews();\n    } else {\n      refreshRecentViews();\n    }\n  }\n}\n"],"names":["HomeField","documentQuerySelector","HomeHeadElement","elementQuerySelector","HomeBodyElement","HomeFoldersElement","HomeUpdateTimerElement","previousIntegration","previousSkeletonScreen","previousAnimation","foldersRefreshTimer_baseInterval","foldersRefreshTimer_minInterval","foldersRefreshTimer_dynamicInterval","foldersRefreshTimer_dynamic","foldersRefreshTimer_lastUpdate","foldersRefreshTimer_nextUpdate","foldersRefreshTimer_currentRequestID","foldersRefreshTimer_refreshing","foldersRefreshTimer_streaming","foldersRefreshTimer_streamStarted","generateElementOfItem","element","document","createElement","classList","add","setAttribute","innerHTML","getIconHTML","id","handleDataReceivingProgressUpdates","event","CustomEvent","offsetRatio","detail","progress","style","setProperty","toString","stage","removeEventListener","target","setUpFolderFieldSkeletonScreen","playing_animation","getSettingOptionValue","WindowSize","querySize","FieldHeight","width","height","contentLength","Math","floor","folders","i","folder","name","icon","timestamp","content","j","push","type","status","code","text","time","direction","route","endPoints","departure","destination","pathAttributeId","updateFoldersElement","dataUpdateTime","integration","skeletonScreen","animation","updateItem","thisElement","thisItem","previousItem","updateType","updateIcon","iconElement","updateStatus","thisElementRect","getBoundingClientRect","top","left","bottom","right","windowWidth","window","innerWidth","windowHeight","innerHeight","thisItemStatusElement","nextSlideElement","currentSlideElement","innerText","addEventListener","remove","once","updateMain","main","busID","updateContext","context","updateButton","buttonElement","onclick","openRoute","updateAnimation","booleanToString","updateSkeletonScreen","compareThings","currentRoute","updateFolder","thisFolder","previousFolder","updateName","thisHeadElement","foldersLength","length","currentFolderSeatQuantity","elementQuerySelectorAll","capacity","fragment","DocumentFragment","o","abs","newFolderElement","appendChild","append","FolderElements","thisFolderContentLength","thisFolderElement","thisFolderContentElement","currentItemSeatQuantity","newItemElement","FolderContentItemElements","FolderElements2","thisFolderContent","hasOwnProperty","thisFolderItemElements","refreshFolders","_refreshFolders","apply","arguments","_asyncToGenerator","refresh_interval_setting","dynamic","baseInterval","generateIdentifier","integrateFolders","updateRate","getUpdateRate","Date","getTime","max","streamFolders","_streamFolders","then","setTimeout","err","promptMessage","initializeFolders","identifier","dataDownloadRequestID","dataDownloadCompleted","homeButtonRightElement","progressElement","pixels","getDataReceivingProgress","downloadData","_downloadData","setDataReceivingProgress","getRoute","getLocation","getCarInfo","getMaterialSymbols","deleteDataReceivingProgress","deleteDataUpdateTime","RecentViewsField","RecentViewsContentElement","recentViewsRefreshTimer_baseInterval","recentViewsRefreshTimer_minInterval","recentViewsRefreshTimer_dynamic","recentViewsRefreshTimer_streaming","recentViewsRefreshTimer_lastUpdate","recentViewsRefreshTimer_nextUpdate","recentViewsRefreshTimer_currentRequestID","recentViewsRefreshTimer_streamStarted","updateRecentViewsField","updateTitle","titleElement","title","updateTime","relative","updateOnclick","pid","openLocation","hash","openBus","itemQuantity","newRecentViewItemElement","RecentViewsItemElements","items","setUpRecentViewsFieldSkeletonScreen","defaultItemQuantity","absolute","refreshRecentViews","_refreshRecentViews","integrateRecentViews","streamRecentViews","_streamRecentViews","initializeRecentViews"],"sourceRoot":""}