{"version":3,"file":"b7124cd931bdb34de4b2.js","mappings":"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","sources":["webpack://bus/./src/data/route/details.ts","webpack://bus/./src/data/route/index.ts"],"sourcesContent":["import { TimeMoment, parseTimeCode, TimeRange } from '../apis/index';\nimport { getProvider, Provider, ProviderItem } from '../apis/getProvider/index';\nimport { getRoute, Route } from '../apis/getRoute/index';\nimport { getSemiTimeTable } from '../apis/getSemiTimeTable/index';\nimport { getTimeTable } from '../apis/getTimeTable/index';\nimport { dateToString, dateValueToDayOfWeek, getThisWeekOrigin, offsetDate } from '../../tools/time';\nimport { MaterialSymbols } from '../../interface/icons/material-symbols-type';\n\nfunction findRoute(Route: Route, RouteID: number): RouteItem {\n  let thisRoute = {} as RouteItem;\n  for (const item of Route) {\n    if (item.Id === RouteID) {\n      thisRoute = item;\n      break;\n    }\n  }\n  return thisRoute;\n}\n\nfunction findProvider(Provider: Provider, providerId: number): ProviderItem {\n  let thisProvider = {} as ProviderItem;\n  for (const item of Provider) {\n    if (item.id === providerId) {\n      thisProvider = item;\n    }\n  }\n  return thisProvider;\n}\n\nexport interface CalendarEvent {\n  date: Date;\n  dateString: string;\n  duration: number;\n  deviation: number;\n}\n\nexport type CalendarEventGroup = Array<CalendarEvent>;\n\nexport interface CalendarDay {\n  name: string;\n  day: number;\n  code: string;\n}\n\nexport interface Calendar {\n  calendarDays: {\n    [key: string]: CalendarDay;\n  };\n  calendarDayQuantity: 7;\n  calendarEventGroups: {\n    [key: string]: CalendarEventGroup;\n  };\n  calendarEventQuantity: {\n    [key: string]: number;\n  };\n}\n\nfunction generateCalendarFromTimeTables(RouteID: number, PathAttributeId: Array<number>, timeTableRules: object, SemiTimeTable: Array, TimeTable: Array): Calendar {\n  let calendar: Calendar = {\n    calendarDays: {\n      d_0: {\n        name: '日',\n        day: 0,\n        code: 'd_0'\n      },\n      d_1: {\n        name: '一',\n        day: 1,\n        code: 'd_1'\n      },\n      d_2: {\n        name: '二',\n        day: 2,\n        code: 'd_2'\n      },\n      d_3: {\n        name: '三',\n        day: 3,\n        code: 'd_3'\n      },\n      d_4: {\n        name: '四',\n        day: 4,\n        code: 'd_4'\n      },\n      d_5: {\n        name: '五',\n        day: 5,\n        code: 'd_5'\n      },\n      d_6: {\n        name: '六',\n        day: 6,\n        code: 'd_6'\n      }\n    },\n    calendarDayQuantity: 7,\n    calendarEventGroups: {\n      d_0: [],\n      d_1: [],\n      d_2: [],\n      d_3: [],\n      d_4: [],\n      d_5: [],\n      d_6: []\n    },\n    calendarEventQuantity: {\n      d_0: 0,\n      d_1: 0,\n      d_2: 0,\n      d_3: 0,\n      d_4: 0,\n      d_5: 0,\n      d_6: 0\n    }\n  };\n  const thisWeekOrigin = getThisWeekOrigin();\n  for (const item of SemiTimeTable) {\n    if (PathAttributeId.indexOf(item.PathAttributeId) > -1) {\n      if (item.DateType === '0') {\n        const dayOfWeek = dateValueToDayOfWeek(item.DateValue);\n        const thisDayOrigin = offsetDate(thisWeekOrigin, dayOfWeek.day, 0, 0);\n        const thisPeriodStartTime = parseTimeCode(item.StartTime, 0);\n        const thisPeriodStartTimeDateObject = offsetDate(thisDayOrigin, 0, thisPeriodStartTime.hours, thisPeriodStartTime.minutes);\n        const thisPeriodEndTime = parseTimeCode(item.EndTime, 0);\n        const thisPeriodEndTimeDateObject = offsetDate(thisDayOrigin, 0, thisPeriodEndTime.hours, thisPeriodEndTime.minutes);\n        const thisPeriodDurationInMinutes = Math.abs(thisPeriodEndTime.hours * 60 + thisPeriodEndTime.minutes - (thisPeriodStartTime.hours * 60 + thisPeriodStartTime.minutes));\n\n        const minWindow = parseInt(item.LongHeadway);\n        const maxWindow = parseInt(item.LowHeadway);\n        const averageWindow = (maxWindow + minWindow) / 2;\n        const headwayQuantity = thisPeriodDurationInMinutes / averageWindow;\n\n        for (let i = 0; i < headwayQuantity; i++) {\n          const violateRules = false;\n          const thisHeadwayDate = offsetDate(thisDayOrigin, 0, thisPeriodStartTime.hours, thisPeriodStartTime.minutes + maxWindow * i);\n          if (thisHeadwayDate.getTime() < thisPeriodStartTimeDateObject.getTime()) {\n            violateRules = true;\n          }\n          if (thisHeadwayDate.getTime() > thisPeriodEndTimeDateObject.getTime()) {\n            violateRules = true;\n          }\n          // TODO: check timeTableRules\n          if (violateRules === false) {\n            calendar.calendarEventGroups[dayOfWeek.code].push({\n              date: thisHeadwayDate,\n              dateString: dateToString(thisHeadwayDate, 'hh:mm'),\n              duration: maxWindow,\n              deviation: Math.abs(averageWindow - maxWindow)\n            });\n            calendar.calendarEventQuantity[dayOfWeek.code] += 1;\n          }\n        }\n      }\n    }\n  }\n  for (const item of TimeTable) {\n    if (PathAttributeId.indexOf(item.PathAttributeId) > -1) {\n      if (item.DateType === '0') {\n        const violateRules = false;\n        const dayOfWeek = dateValueToDayOfWeek(item.DateValue);\n        const thisDayOrigin = offsetDate(thisWeekOrigin, dayOfWeek.day, 0, 0);\n        const thisDepartureTime = parseTimeCode(item.DepartureTime, 0);\n        const thisHeadwayDate = offsetDate(thisDayOrigin, 0, thisDepartureTime.hours, thisDepartureTime.minutes);\n        // TODO: check timeTableRules\n        if (violateRules === false) {\n          calendar.calendarEventGroups[dayOfWeek.code].push({\n            date: thisHeadwayDate,\n            dateString: dateToString(thisHeadwayDate, 'hh:mm'),\n            duration: 15,\n            deviation: 0\n          });\n          calendar.calendarEventQuantity[dayOfWeek.code] += 1;\n        }\n      }\n    }\n  }\n  for (const code in calendar.calendarEventGroups) {\n    /* calendar.calendarEvents[code] = */ calendar.calendarEventGroups[code].sort(function (a, b) {\n      return a.date.getTime() - b.date.getTime();\n    });\n  }\n  return calendar;\n}\n\nexport interface TimeTableRules {\n  go: {\n    weekday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n    holiday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n  };\n  back: {\n    weekday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n    holiday: {\n      first: TimeMoment;\n      last: TimeMoment;\n      rushHourWindow: TimeRange;\n      offRushHourWindow: TimeRange;\n    };\n  };\n  realSequence: any;\n}\n\nfunction getTimeTableRules(thisRoute: RouteItem): TimeTableRules {\n  const thisRouteGoFirstBusTime = parseTimeCode(thisRoute.goFirstBusTime, 0);\n  const thisRouteGoLastBusTime = parseTimeCode(thisRoute.goLastBusTime, 0);\n\n  const thisRouteBackFirstBusTime = parseTimeCode(thisRoute.backFirstBusTime, 0);\n  const thisRouteBackLastBusTime = parseTimeCode(thisRoute.backLastBusTime, 0);\n\n  const thisRouteGoFirstBusTimeOnHoliday = parseTimeCode(thisRoute.holidayGoFirstBusTime, 0);\n  const thisRouteGoLastBusTimeOnHoliday = parseTimeCode(thisRoute.holidayGoLastBusTime, 0);\n\n  const thisRouteBackFirstBusTimeOnHoliday = parseTimeCode(thisRoute.holidayBackFirstBusTime, 0);\n  const thisRouteBackLastBusTimeOnHoliday = parseTimeCode(thisRoute.holidayBackLastBusTime, 0);\n\n  const rushHourWindow = parseTimeCode(thisRoute.peakHeadway, 1);\n  const offRushHourWindow = parseTimeCode(thisRoute.offPeakHeadway, 1);\n\n  const rushHourWindowOnHoliday = parseTimeCode(thisRoute.holidayPeakHeadway, 1);\n  const offRushHourWindowOnHoliday = parseTimeCode(thisRoute.holidayOffPeakHeadway, 1);\n  // window → the interval/gap between arrivals of buses\n\n  var realSequence = thisRoute.realSequence;\n  return {\n    go: {\n      weekday: {\n        first: thisRouteGoFirstBusTime,\n        last: thisRouteGoLastBusTime,\n        rushHourWindow: rushHourWindow,\n        offRushHourWindow: offRushHourWindow\n      },\n      holiday: {\n        first: thisRouteGoFirstBusTimeOnHoliday,\n        last: thisRouteGoLastBusTimeOnHoliday,\n        rushHourWindow: rushHourWindowOnHoliday,\n        offRushHourWindow: offRushHourWindowOnHoliday\n      }\n    },\n    back: {\n      weekday: {\n        first: thisRouteBackFirstBusTime,\n        last: thisRouteBackLastBusTime,\n        rushHourWindow: rushHourWindow,\n        offRushHourWindow: offRushHourWindow\n      },\n      holiday: {\n        first: thisRouteBackFirstBusTimeOnHoliday,\n        last: thisRouteBackLastBusTimeOnHoliday,\n        rushHourWindow: rushHourWindowOnHoliday,\n        offRushHourWindow: offRushHourWindowOnHoliday\n      }\n    },\n    realSequence: realSequence\n  };\n}\n\nexport interface integratedRouteDetailsProperty {\n  key: string;\n  icon: MaterialSymbols;\n  value: string;\n}\n\nexport type integratedRouteDetailsProperties = Array<integratedRouteDetailsProperty>;\n\nexport interface integratedRouteDetails {\n  timeTableRules: TimeTableRules;\n  calendar: Calendar;\n  properties: integratedRouteDetailsProperties;\n}\n\nexport async function integrateRouteDetails(RouteID: number, PathAttributeId: Array<number>, requestID: string): Promise<integratedRouteDetails> {\n  const Route = (await getRoute(requestID, false)) as Route;\n  const thisRoute = findRoute(Route, RouteID);\n\n  const SemiTimeTable = await getSemiTimeTable(requestID);\n  const TimeTable = await getTimeTable(requestID);\n  const Provider = await getProvider(requestID);\n  const timeTableRules = getTimeTableRules(thisRoute);\n  const calendar = generateCalendarFromTimeTables(RouteID, PathAttributeId, timeTableRules, SemiTimeTable, TimeTable);\n  const thisProviderId = thisRoute.providerId;\n  const thisProvider = findProvider(Provider, thisProviderId);\n\n  const result: integratedRouteDetails = {\n    timeTableRules: timeTableRules,\n    calendar: calendar,\n    properties: [\n      {\n        key: 'route_name',\n        icon: 'route',\n        value: thisRoute.nameZh\n      },\n      {\n        key: 'pricing',\n        icon: 'attach_money',\n        value: thisRoute.ticketPriceDescriptionZh\n      },\n      {\n        key: 'provider_name',\n        icon: 'corporate_fare',\n        value: thisProvider.nameZn\n      },\n      {\n        key: 'provider_phone',\n        icon: 'call',\n        value: thisProvider.phoneInfo\n      },\n      {\n        key: 'provider_email',\n        icon: 'alternate_email',\n        value: thisProvider.email\n      }\n    ]\n  };\n  return result;\n}\n","import { AggregatedBusArrivalTime, getBusArrivalTimes } from '../analytics/bus-arrival-time';\nimport { getBusData } from '../apis/getBusData/index';\nimport { getBusEvent } from '../apis/getBusEvent/index';\nimport { getEstimateTime } from '../apis/getEstimateTime/index';\nimport { getLocation } from '../apis/getLocation/index';\nimport { getRoute } from '../apis/getRoute/index';\nimport { getSegmentBuffers, SimplifiedSegmentBufferItem } from '../apis/getSegmentBuffers/index';\nimport { getStop } from '../apis/getStop/index';\nimport { EstimateTimeStatus, formatBus, FormattedBus, parseEstimateTime, processBuses } from '../apis/index';\nimport { dataUpdateTime, deleteDataReceivingProgress, deleteDataUpdateTime, setDataReceivingProgress } from '../apis/loader';\nimport { getSettingOptionValue } from '../settings/index';\nimport { getNearestPosition } from '../user-position/index';\n\ninterface formattedOverlappingRoute {\n  name: string;\n  RouteEndPoints: {\n    RouteDeparture: string;\n    RouteDestination: string;\n    text: string;\n    html: string;\n  };\n  RouteID: number;\n  PathAttributeId: Array<number>;\n}\n\nexport interface integratedStopItemPosition {\n  longitude: number;\n  latitude: number;\n}\n\nexport interface integratedStopItemSegmentBuffer {\n  isSegmentBuffer: boolean;\n  isStartingPoint: boolean;\n  isEndingPoint: boolean;\n}\n\nexport interface integratedStopItem {\n  name: string;\n  goBack: '0' | '1' | '2';\n  status: EstimateTimeStatus;\n  buses: Array<FormattedBus>;\n  overlappingRoutes: Array<formattedOverlappingRoute>;\n  busArrivalTimes: Array<AggregatedBusArrivalTime>;\n  sequence: number;\n  position: integratedStopItemPosition;\n  nearest: boolean;\n  segmentBuffer: integratedStopItemSegmentBuffer;\n  progress: number;\n  id: number;\n}\n\nexport interface IntegratedRoute {\n  groupedItems: { [key: string]: Array<integratedStopItem> };\n  groupQuantity: number;\n  itemQuantity: { [key: string]: number };\n  RouteName: string;\n  RouteEndPoints: {\n    RouteDeparture: string;\n    RouteDestination: string;\n  };\n  dataUpdateTime: any;\n  RouteID: number;\n  PathAttributeId: Array<number>;\n}\n\nexport async function integrateRoute(RouteID: number, PathAttributeId: Array<number>, requestID: string): Promise<IntegratedRoute> {\n  setDataReceivingProgress(requestID, 'getRoute_0', 0, false);\n  setDataReceivingProgress(requestID, 'getRoute_1', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_0', 0, false);\n  setDataReceivingProgress(requestID, 'getStop_1', 0, false);\n  setDataReceivingProgress(requestID, 'getLocation_0', 0, false);\n  setDataReceivingProgress(requestID, 'getLocation_1', 0, false);\n  setDataReceivingProgress(requestID, 'getSegmentBuffers_0', 0, false);\n  setDataReceivingProgress(requestID, 'getSegmentBuffers_1', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_0', 0, false);\n  setDataReceivingProgress(requestID, 'getEstimateTime_1', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_0', 0, false);\n  setDataReceivingProgress(requestID, 'getBusEvent_1', 0, false);\n  setDataReceivingProgress(requestID, 'getBusData_0', 0, false);\n  setDataReceivingProgress(requestID, 'getBusData_1', 0, false);\n  const Route = await getRoute(requestID, true);\n  const Stop = await getStop(requestID);\n  const Location = await getLocation(requestID, false);\n  const SegmentBuffers = await getSegmentBuffers(requestID);\n  const EstimateTime = await getEstimateTime(requestID);\n  const BusEvent = await getBusEvent(requestID);\n  const BusData = await getBusData(requestID);\n  const BusArrivalTimes = await getBusArrivalTimes();\n\n  const processedBuses = processBuses(BusEvent, BusData, Route, RouteID, PathAttributeId);\n\n  let hasSegmentBuffers: boolean = false;\n  let thisSegmentBuffers: SimplifiedSegmentBufferItem = {};\n  if (SegmentBuffers.hasOwnProperty(`r_${RouteID}`)) {\n    hasSegmentBuffers = true;\n    thisSegmentBuffers = SegmentBuffers[`r_${RouteID}`];\n  }\n\n  const time_formatting_mode = getSettingOptionValue('time_formatting_mode');\n\n  let result = [];\n  let positions = [];\n\n  for (const item of EstimateTime) {\n    let integratedStopItem: integratedStopItem = {};\n\n    const thisRouteID = item.RouteID;\n\n    // check whether this stop is on this route or not\n    if ([RouteID, RouteID * 10].includes(thisRouteID) || PathAttributeId.includes(thisRouteID)) {\n      // format status\n      integratedStopItem.status = parseEstimateTime(item?.EstimateTime, time_formatting_mode);\n\n      // collect data from 'Stop'\n      const thisStopKey = `s_${item.StopID}`;\n      let thisStop: SimplifiedStopItem = {};\n      if (Stop.hasOwnProperty(thisStopKey)) {\n        thisStop = Stop[thisStopKey];\n      } else {\n        continue;\n      }\n      integratedStopItem.id = item.StopID;\n      integratedStopItem.sequence = thisStop.seqNo;\n      integratedStopItem.goBack = thisStop.goBack;\n\n      // collect data from 'Location'\n      const thisLocationKey = `l_${thisStop.stopLocationId}`;\n      let thisLocation: SimplifiedLocationItem = {};\n      if (Location.hasOwnProperty(thisLocationKey)) {\n        thisLocation = Location[thisLocationKey];\n      } else {\n        continue;\n      }\n      integratedStopItem.name = thisLocation.n;\n      integratedStopItem.overlappingRoutes = thisLocation.r\n        .filter((id: number) => id !== RouteID)\n        .map((id: number) => {\n          const overlappingRouteKey = `r_${id}`;\n          if (Route.hasOwnProperty(overlappingRouteKey)) {\n            const overlappingRoute: SimplifiedRouteItem = Route[overlappingRouteKey];\n            const formattedOverlappingRoute = {\n              name: overlappingRoute.n,\n              RouteEndPoints: {\n                RouteDeparture: overlappingRoute.dep,\n                RouteDestination: overlappingRoute.des,\n                text: `${overlappingRoute.dep} \\u2194 ${overlappingRoute.des}`, //u2194 -> '↔'\n                html: `<span>${overlappingRoute.dep}</span><span>\\u2194</span><span>${overlappingRoute.des}</span>`\n              },\n              RouteID: overlappingRoute.id,\n              PathAttributeId: overlappingRoute.pid\n            };\n            return formattedOverlappingRoute;\n          } else {\n            return null;\n          }\n        })\n        .filter((e) => {\n          return !(e === null);\n        });\n      integratedStopItem.position = {\n        longitude: thisLocation.lo,\n        latitude: thisLocation.la\n      };\n      positions.push({\n        latitude: thisLocation.la,\n        longitude: thisLocation.lo,\n        id: item.StopID\n      });\n\n      // collect data from 'processedBuses'\n      let buses: Array<FormattedBus> = [];\n      for (var overlappingStopID of thisLocation.s) {\n        const overlappingStopKey = `s_${overlappingStopID}`;\n        if (processedBuses.hasOwnProperty(overlappingStopKey)) {\n          buses.push(processedBuses[overlappingStopKey].map((e) => formatBus(e)));\n        }\n      }\n      integratedStopItem.buses = buses.flat().sort(function (a, b) {\n        return a.index - b.index;\n      });\n\n      // collect data from 'BusArrivalTimes'\n      let thisBusArrivalTimes = {};\n      if (BusArrivalTimes.hasOwnProperty(thisStopKey)) {\n        thisBusArrivalTimes = BusArrivalTimes[thisStopKey];\n      }\n      let flattenBusArrivalTimes = [];\n      for (const personalScheduleID in thisBusArrivalTimes) {\n        flattenBusArrivalTimes = flattenBusArrivalTimes.concat(thisBusArrivalTimes[personalScheduleID].busArrivalTimes);\n      }\n      integratedStopItem.busArrivalTimes = flattenBusArrivalTimes;\n\n      // check whether this stop is segment buffer\n      let isSegmentBuffer: boolean = false;\n      let isStartingPoint: boolean = false;\n      let isEndingPoint: boolean = false;\n      let useReversed: boolean = false;\n      if (hasSegmentBuffers) {\n        const groupKey = `g_${integratedStopItem.goBack}`;\n        let segmentBufferGroup = [];\n\n        if (thisSegmentBuffers.hasOwnProperty(groupKey)) {\n          segmentBufferGroup = thisSegmentBuffers[groupKey];\n        } else {\n          if (integratedStopItem.goBack === '1') {\n            useReversed = true;\n            segmentBufferGroup = thisSegmentBuffers['g_0'];\n          }\n        }\n\n        for (const thisBufferZone of segmentBufferGroup) {\n          if (thisBufferZone.OriginStopID === item.StopID || thisBufferZone.DestinationStopID === item.StopID) {\n            isSegmentBuffer = true;\n          }\n          if (useReversed) {\n            if (thisBufferZone.OriginStopID === item.StopID) {\n              isEndingPoint = true;\n            }\n            if (thisBufferZone.DestinationStopID === item.StopID) {\n              isStartingPoint = true;\n            }\n          } else {\n            if (thisBufferZone.OriginStopID === item.StopID) {\n              isStartingPoint = true;\n            }\n            if (thisBufferZone.DestinationStopID === item.StopID) {\n              isEndingPoint = true;\n            }\n          }\n        }\n      }\n      integratedStopItem.segmentBuffer = {\n        isSegmentBuffer,\n        isStartingPoint,\n        isEndingPoint\n      };\n\n      result.push(integratedStopItem);\n    }\n  }\n\n  result.sort(function (a, b) {\n    return a.sequence - b.sequence;\n  });\n\n  const nearestPosition = getNearestPosition(positions, 450);\n\n  let isBufferZoneOpened: boolean = false;\n  let isBufferZoneClosed: boolean = false;\n\n  let groupedItems: { [key: string]: Array<integratedStopItem> } = {};\n  let groupQuantity: number = 0;\n  let itemQuantity: { [key: string]: number } = {};\n\n  const resultLength = result.length;\n\n  for (let index = 0; index < resultLength; index++) {\n    let item = result[index];\n    const nextItem = result[index + 1] || item;\n    let progress = 0;\n\n    if (item.buses.length > 0) {\n      if (item.buses[0].onThisRoute) {\n        const [x, y] = [item.buses[0].position.longitude, item.buses[0].position.latitude];\n        const [x1, y1] = [item.position.longitude, item.position.latitude];\n        const [x2, y2] = [nextItem.position.longitude, nextItem.position.latitude];\n        const dotProduct = (x - x1) * (x2 - x) + (y - y1) * (y2 - y);\n        if (dotProduct >= 0) {\n          // ensure that (x, y) is between (x1, y1) and (x2, y2)\n          const distance1 = Math.hypot(x - x1, y - y1);\n          const distance2 = Math.hypot(x - x2, y - y2);\n          progress = Math.max(0, Math.min(distance1 / (distance1 + distance2), 1));\n        }\n      }\n    }\n    item.progress = progress;\n\n    if (item.segmentBuffer.isStartingPoint) {\n      isBufferZoneOpened = true;\n    }\n\n    if (item.segmentBuffer.isEndingPoint) {\n      if (isBufferZoneOpened) {\n        isBufferZoneClosed = true;\n      }\n    }\n\n    if (isBufferZoneOpened && !isBufferZoneClosed) {\n      item.segmentBuffer.isSegmentBuffer = true;\n    }\n\n    if (isBufferZoneOpened && isBufferZoneClosed) {\n      isBufferZoneOpened = false;\n      isBufferZoneClosed = false;\n    }\n\n    let isNearest = false;\n    if (!(nearestPosition === null)) {\n      if (nearestPosition.id === item.id) {\n        isNearest = true;\n      }\n    }\n    item.nearest = isNearest;\n\n    const groupKey = `g_${item.goBack}` || 'g_0';\n\n    if (!groupedItems.hasOwnProperty(groupKey)) {\n      groupedItems[groupKey] = [];\n      itemQuantity[groupKey] = 0;\n      groupQuantity += 1;\n    }\n\n    groupedItems[groupKey].push(item);\n    itemQuantity[groupKey] += 1;\n  }\n\n  const thisRoute = Route[`r_${RouteID}`];\n  const thisRouteName = thisRoute.n;\n  const thisRouteDeparture = thisRoute.dep;\n  const thisRouteDestination = thisRoute.des;\n\n  const result2: IntegratedRoute = {\n    groupedItems: groupedItems,\n    groupQuantity: groupQuantity,\n    itemQuantity: itemQuantity,\n    RouteName: thisRouteName,\n    RouteEndPoints: {\n      RouteDeparture: thisRouteDeparture,\n      RouteDestination: thisRouteDestination\n    },\n    dataUpdateTime: dataUpdateTime[requestID],\n    RouteID,\n    PathAttributeId\n  };\n\n  deleteDataReceivingProgress(requestID);\n  deleteDataUpdateTime(requestID);\n  //await recordEstimateTimeForUpdateRate(EstimateTime);\n  return result2;\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_readOnlyError","_createForOfIteratorHelper","Array","isArray","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_n","F","findRoute","Route","RouteID","_step","thisRoute","_iterator","item","Id","err","findProvider","Provider","providerId","_step2","thisProvider","_iterator2","id","generateCalendarFromTimeTables","PathAttributeId","timeTableRules","SemiTimeTable","TimeTable","_step3","calendar","calendarDays","d_0","day","code","d_1","d_2","d_3","d_4","d_5","d_6","calendarDayQuantity","calendarEventGroups","calendarEventQuantity","thisWeekOrigin","getThisWeekOrigin","_iterator3","indexOf","DateType","dayOfWeek","dateValueToDayOfWeek","DateValue","thisDayOrigin","offsetDate","thisPeriodStartTime","parseTimeCode","StartTime","thisPeriodStartTimeDateObject","hours","minutes","thisPeriodEndTime","EndTime","thisPeriodEndTimeDateObject","thisPeriodDurationInMinutes","Math","abs","minWindow","parseInt","LongHeadway","maxWindow","LowHeadway","averageWindow","headwayQuantity","thisHeadwayDate","getTime","date","dateString","dateToString","duration","deviation","_step4","_iterator4","thisDepartureTime","DepartureTime","sort","b","getTimeTableRules","thisRouteGoFirstBusTime","goFirstBusTime","thisRouteGoLastBusTime","goLastBusTime","thisRouteBackFirstBusTime","backFirstBusTime","thisRouteBackLastBusTime","backLastBusTime","thisRouteGoFirstBusTimeOnHoliday","holidayGoFirstBusTime","thisRouteGoLastBusTimeOnHoliday","holidayGoLastBusTime","thisRouteBackFirstBusTimeOnHoliday","holidayBackFirstBusTime","thisRouteBackLastBusTimeOnHoliday","holidayBackLastBusTime","rushHourWindow","peakHeadway","offRushHourWindow","offPeakHeadway","rushHourWindowOnHoliday","holidayPeakHeadway","offRushHourWindowOnHoliday","holidayOffPeakHeadway","go","weekday","first","last","holiday","back","realSequence","integrateRouteDetails","_x","_x2","_x3","_integrateRouteDetails","apply","arguments","_callee","requestID","thisProviderId","result","_context","getRoute","getSemiTimeTable","getTimeTable","getProvider","properties","key","icon","nameZh","ticketPriceDescriptionZh","nameZn","phoneInfo","email","_next","_throw","integrateRoute","_integrateRoute","Stop","Location","SegmentBuffers","EstimateTime","BusEvent","BusData","BusArrivalTimes","processedBuses","hasSegmentBuffers","thisSegmentBuffers","time_formatting_mode","positions","_item","_integratedStopItem","thisRouteID","thisStopKey","thisStop","thisLocationKey","thisLocation","buses","overlappingStopID","overlappingStopKey","thisBusArrivalTimes","flattenBusArrivalTimes","personalScheduleID","isSegmentBuffer","isStartingPoint","isEndingPoint","useReversed","_groupKey","segmentBufferGroup","thisBufferZone","nearestPosition","isBufferZoneOpened","isBufferZoneClosed","groupedItems","groupQuantity","itemQuantity","resultLength","index","nextItem","progress","_ref","x","_ref2","x1","y1","_ref3","x2","y2","distance1","distance2","isNearest","groupKey","thisRouteName","thisRouteDeparture","thisRouteDestination","result2","setDataReceivingProgress","getStop","getLocation","getSegmentBuffers","getEstimateTime","getBusEvent","getBusData","getBusArrivalTimes","processBuses","concat","getSettingOptionValue","integratedStopItem","includes","status","parseEstimateTime","StopID","sequence","seqNo","goBack","stopLocationId","overlappingRoutes","filter","map","overlappingRouteKey","overlappingRoute","RouteEndPoints","RouteDeparture","dep","RouteDestination","des","text","html","pid","position","longitude","lo","latitude","la","formatBus","flat","busArrivalTimes","OriginStopID","DestinationStopID","segmentBuffer","t0","getNearestPosition","onThisRoute","hypot","max","min","nearest","RouteName","dataUpdateTime","deleteDataReceivingProgress","deleteDataUpdateTime"],"sourceRoot":""}